{"ast":null,"code":"import\"core-js/modules/es.error.cause.js\";import{getApp,_getProvider,SDK_VERSION as SDK_VERSION$1,_registerComponent,registerVersion}from'@firebase/app';import{Component}from'@firebase/component';import{stringify,jsonEval,contains,assert,base64,stringToByteArray,Sha1,isNodeSdk,deepCopy,base64Encode,isMobileCordova,stringLength,Deferred,safeGet,isAdmin,isValidFormat,isEmpty,isReactNative,assertionError,map,querystring,errorPrefix,getModularInstance,createMockUserToken}from'@firebase/util';import{Logger,LogLevel}from'@firebase/logger';const name=\"@firebase/database\";const version=\"0.12.7\";/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /** The semver (www.semver.org) version of the SDK. */let SDK_VERSION='';/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */function setSDKVersion(version){SDK_VERSION=version;}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */class DOMStorageWrapper{/**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */constructor(domStorage_){this.domStorage_=domStorage_;// Use a prefix to avoid collisions with other stuff saved by the app.\nthis.prefix_='firebase:';}/**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */set(key,value){if(value==null){this.domStorage_.removeItem(this.prefixedName_(key));}else{this.domStorage_.setItem(this.prefixedName_(key),stringify(value));}}/**\r\n     * @returns The value that was stored under this key, or null\r\n     */get(key){const storedVal=this.domStorage_.getItem(this.prefixedName_(key));if(storedVal==null){return null;}else{return jsonEval(storedVal);}}remove(key){this.domStorage_.removeItem(this.prefixedName_(key));}prefixedName_(name){return this.prefix_+name;}toString(){return this.domStorage_.toString();}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */class MemoryStorage{constructor(){this.cache_={};this.isInMemoryStorage=true;}set(key,value){if(value==null){delete this.cache_[key];}else{this.cache_[key]=value;}}get(key){if(contains(this.cache_,key)){return this.cache_[key];}return null;}remove(key){delete this.cache_[key];}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */const createStoragefor=function(domStorageName){try{// NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n// so it must be inside the try/catch.\nif(typeof window!=='undefined'&&typeof window[domStorageName]!=='undefined'){// Need to test cache. Just because it's here doesn't mean it works\nconst domStorage=window[domStorageName];domStorage.setItem('firebase:sentinel','cache');domStorage.removeItem('firebase:sentinel');return new DOMStorageWrapper(domStorage);}}catch(e){}// Failed to create wrapper.  Just return in-memory storage.\n// TODO: log?\nreturn new MemoryStorage();};/** A storage object that lasts across sessions */const PersistentStorage=createStoragefor('localStorage');/** A storage object that only lasts one session */const SessionStorage=createStoragefor('sessionStorage');/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const logClient=new Logger('@firebase/database');/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */const LUIDGenerator=function(){let id=1;return function(){return id++;};}();/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */const sha1=function(str){const utf8Bytes=stringToByteArray(str);const sha1=new Sha1();sha1.update(utf8Bytes);const sha1Bytes=sha1.digest();return base64.encodeByteArray(sha1Bytes);};const buildLogMessage_=function(...varArgs){let message='';for(let i=0;i<varArgs.length;i++){const arg=varArgs[i];if(Array.isArray(arg)||arg&&typeof arg==='object'&&// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntypeof arg.length==='number'){message+=buildLogMessage_.apply(null,arg);}else if(typeof arg==='object'){message+=stringify(arg);}else{message+=arg;}message+=' ';}return message;};/**\r\n * Use this for all debug messages in Firebase.\r\n */let logger=null;/**\r\n * Flag to check for log availability on first log message\r\n */let firstLog_=true;/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */const enableLogging$1=function(logger_,persistent){assert(!persistent||logger_===true||logger_===false,\"Can't turn on custom loggers persistently.\");if(logger_===true){logClient.logLevel=LogLevel.VERBOSE;logger=logClient.log.bind(logClient);if(persistent){SessionStorage.set('logging_enabled',true);}}else if(typeof logger_==='function'){logger=logger_;}else{logger=null;SessionStorage.remove('logging_enabled');}};const log=function(...varArgs){if(firstLog_===true){firstLog_=false;if(logger===null&&SessionStorage.get('logging_enabled')===true){enableLogging$1(true);}}if(logger){const message=buildLogMessage_.apply(null,varArgs);logger(message);}};const logWrapper=function(prefix){return function(...varArgs){log(prefix,...varArgs);};};const error=function(...varArgs){const message='FIREBASE INTERNAL ERROR: '+buildLogMessage_(...varArgs);logClient.error(message);};const fatal=function(...varArgs){const message=`FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;logClient.error(message);throw new Error(message);};const warn=function(...varArgs){const message='FIREBASE WARNING: '+buildLogMessage_(...varArgs);logClient.warn(message);};/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */const warnIfPageIsSecure=function(){// Be very careful accessing browser globals. Who knows what may or may not exist.\nif(typeof window!=='undefined'&&window.location&&window.location.protocol&&window.location.protocol.indexOf('https:')!==-1){warn('Insecure Firebase access from a secure page. '+'Please use https in calls to new Firebase().');}};/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */const isInvalidJSONNumber=function(data){return typeof data==='number'&&(data!==data||// NaN\ndata===Number.POSITIVE_INFINITY||data===Number.NEGATIVE_INFINITY);};const executeWhenDOMReady=function(fn){if(isNodeSdk()||document.readyState==='complete'){fn();}else{// Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n// fire before onload), but fall back to onload.\nlet called=false;const wrappedFn=function(){if(!document.body){setTimeout(wrappedFn,Math.floor(10));return;}if(!called){called=true;fn();}};if(document.addEventListener){document.addEventListener('DOMContentLoaded',wrappedFn,false);// fallback to onload.\nwindow.addEventListener('load',wrappedFn,false);// eslint-disable-next-line @typescript-eslint/no-explicit-any\n}else if(document.attachEvent){// IE.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndocument.attachEvent('onreadystatechange',()=>{if(document.readyState==='complete'){wrappedFn();}});// fallback to onload.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nwindow.attachEvent('onload',wrappedFn);// jQuery has an extra hack for IE that we could employ (based on\n// http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n// I'm hoping we don't need it.\n}}};/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */const MIN_NAME='[MIN_NAME]';/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */const MAX_NAME='[MAX_NAME]';/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */const nameCompare=function(a,b){if(a===b){return 0;}else if(a===MIN_NAME||b===MAX_NAME){return-1;}else if(b===MIN_NAME||a===MAX_NAME){return 1;}else{const aAsInt=tryParseInt(a),bAsInt=tryParseInt(b);if(aAsInt!==null){if(bAsInt!==null){return aAsInt-bAsInt===0?a.length-b.length:aAsInt-bAsInt;}else{return-1;}}else if(bAsInt!==null){return 1;}else{return a<b?-1:1;}}};/**\r\n * @returns {!number} comparison result.\r\n */const stringCompare=function(a,b){if(a===b){return 0;}else if(a<b){return-1;}else{return 1;}};const requireKey=function(key,obj){if(obj&&key in obj){return obj[key];}else{throw new Error('Missing required key ('+key+') in object: '+stringify(obj));}};const ObjectToUniqueKey=function(obj){if(typeof obj!=='object'||obj===null){return stringify(obj);}const keys=[];// eslint-disable-next-line guard-for-in\nfor(const k in obj){keys.push(k);}// Export as json, but with the keys sorted.\nkeys.sort();let key='{';for(let i=0;i<keys.length;i++){if(i!==0){key+=',';}key+=stringify(keys[i]);key+=':';key+=ObjectToUniqueKey(obj[keys[i]]);}key+='}';return key;};/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */const splitStringBySize=function(str,segsize){const len=str.length;if(len<=segsize){return[str];}const dataSegs=[];for(let c=0;c<len;c+=segsize){if(c+segsize>len){dataSegs.push(str.substring(c,len));}else{dataSegs.push(str.substring(c,c+segsize));}}return dataSegs;};/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */function each(obj,fn){for(const key in obj){if(obj.hasOwnProperty(key)){fn(key,obj[key]);}}}/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */const doubleToIEEE754String=function(v){assert(!isInvalidJSONNumber(v),'Invalid JSON number');// MJL\nconst ebits=11,fbits=52;const bias=(1<<ebits-1)-1;let s,e,f,ln,i;// Compute sign, exponent, fraction\n// Skip NaN / Infinity handling --MJL.\nif(v===0){e=0;f=0;s=1/v===-Infinity?1:0;}else{s=v<0;v=Math.abs(v);if(v>=Math.pow(2,1-bias)){// Normalized\nln=Math.min(Math.floor(Math.log(v)/Math.LN2),bias);e=ln+bias;f=Math.round(v*Math.pow(2,fbits-ln)-Math.pow(2,fbits));}else{// Denormalized\ne=0;f=Math.round(v/Math.pow(2,1-bias-fbits));}}// Pack sign, exponent, fraction\nconst bits=[];for(i=fbits;i;i-=1){bits.push(f%2?1:0);f=Math.floor(f/2);}for(i=ebits;i;i-=1){bits.push(e%2?1:0);e=Math.floor(e/2);}bits.push(s?1:0);bits.reverse();const str=bits.join('');// Return the data as a hex string. --MJL\nlet hexByteString='';for(i=0;i<64;i+=8){let hexByte=parseInt(str.substr(i,8),2).toString(16);if(hexByte.length===1){hexByte='0'+hexByte;}hexByteString=hexByteString+hexByte;}return hexByteString.toLowerCase();};/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */const isChromeExtensionContentScript=function(){return!!(typeof window==='object'&&window['chrome']&&window['chrome']['extension']&&!/^chrome/.test(window.location.href));};/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */const isWindowsStoreApp=function(){// Check for the presence of a couple WinRT globals\nreturn typeof Windows==='object'&&typeof Windows.UI==='object';};/**\r\n * Converts a server error code to a Javascript Error\r\n */function errorForServerCode(code,query){let reason='Unknown Error';if(code==='too_big'){reason='The data requested exceeds the maximum size '+'that can be accessed with a single request.';}else if(code==='permission_denied'){reason=\"Client doesn't have permission to access the desired data.\";}else if(code==='unavailable'){reason='The service is unavailable';}const error=new Error(code+' at '+query._path.toString()+': '+reason);// eslint-disable-next-line @typescript-eslint/no-explicit-any\nerror.code=code.toUpperCase();return error;}/**\r\n * Used to test for integer-looking strings\r\n */const INTEGER_REGEXP_=new RegExp('^-?(0*)\\\\d{1,10}$');/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */const INTEGER_32_MIN=-2147483648;/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */const INTEGER_32_MAX=2147483647;/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */const tryParseInt=function(str){if(INTEGER_REGEXP_.test(str)){const intVal=Number(str);if(intVal>=INTEGER_32_MIN&&intVal<=INTEGER_32_MAX){return intVal;}}return null;};/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */const exceptionGuard=function(fn){try{fn();}catch(e){// Re-throw exception when it's safe.\nsetTimeout(()=>{// It used to be that \"throw e\" would result in a good console error with\n// relevant context, but as of Chrome 39, you just get the firebase.js\n// file/line number where we re-throw it, which is useless. So we log\n// e.stack explicitly.\nconst stack=e.stack||'';warn('Exception was thrown by user callback.',stack);throw e;},Math.floor(0));}};/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */const beingCrawled=function(){const userAgent=typeof window==='object'&&window['navigator']&&window['navigator']['userAgent']||'';// For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n// believe to support JavaScript/AJAX rendering.\n// NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n// would have seen the page\" is flaky if we don't treat it as a crawler.\nreturn userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0;};/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */const setTimeoutNonBlocking=function(fn,time){const timeout=setTimeout(fn,time);// eslint-disable-next-line @typescript-eslint/no-explicit-any\nif(typeof timeout==='object'&&timeout['unref']){// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntimeout['unref']();}return timeout;};/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */class AppCheckTokenProvider{constructor(appName_,appCheckProvider){this.appName_=appName_;this.appCheckProvider=appCheckProvider;this.appCheck=appCheckProvider===null||appCheckProvider===void 0?void 0:appCheckProvider.getImmediate({optional:true});if(!this.appCheck){appCheckProvider===null||appCheckProvider===void 0?void 0:appCheckProvider.get().then(appCheck=>this.appCheck=appCheck);}}getToken(forceRefresh){if(!this.appCheck){return new Promise((resolve,reject)=>{// Support delayed initialization of FirebaseAppCheck. This allows our\n// customers to initialize the RTDB SDK before initializing Firebase\n// AppCheck and ensures that all requests are authenticated if a token\n// becomes available before the timoeout below expires.\nsetTimeout(()=>{if(this.appCheck){this.getToken(forceRefresh).then(resolve,reject);}else{resolve(null);}},0);});}return this.appCheck.getToken(forceRefresh);}addTokenChangeListener(listener){var _a;(_a=this.appCheckProvider)===null||_a===void 0?void 0:_a.get().then(appCheck=>appCheck.addTokenListener(listener));}notifyForInvalidToken(){warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" `+'are invalid. This usually indicates your app was not initialized correctly.');}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */class FirebaseAuthTokenProvider{constructor(appName_,firebaseOptions_,authProvider_){this.appName_=appName_;this.firebaseOptions_=firebaseOptions_;this.authProvider_=authProvider_;this.auth_=null;this.auth_=authProvider_.getImmediate({optional:true});if(!this.auth_){authProvider_.onInit(auth=>this.auth_=auth);}}getToken(forceRefresh){if(!this.auth_){return new Promise((resolve,reject)=>{// Support delayed initialization of FirebaseAuth. This allows our\n// customers to initialize the RTDB SDK before initializing Firebase\n// Auth and ensures that all requests are authenticated if a token\n// becomes available before the timoeout below expires.\nsetTimeout(()=>{if(this.auth_){this.getToken(forceRefresh).then(resolve,reject);}else{resolve(null);}},0);});}return this.auth_.getToken(forceRefresh).catch(error=>{// TODO: Need to figure out all the cases this is raised and whether\n// this makes sense.\nif(error&&error.code==='auth/token-not-initialized'){log('Got auth/token-not-initialized error.  Treating as null token.');return null;}else{return Promise.reject(error);}});}addTokenChangeListener(listener){// TODO: We might want to wrap the listener and call it with no args to\n// avoid a leaky abstraction, but that makes removing the listener harder.\nif(this.auth_){this.auth_.addAuthTokenListener(listener);}else{this.authProvider_.get().then(auth=>auth.addAuthTokenListener(listener));}}removeTokenChangeListener(listener){this.authProvider_.get().then(auth=>auth.removeAuthTokenListener(listener));}notifyForInvalidToken(){let errorMessage='Provided authentication credentials for the app named \"'+this.appName_+'\" are invalid. This usually indicates your app was not '+'initialized correctly. ';if('credential'in this.firebaseOptions_){errorMessage+='Make sure the \"credential\" property provided to initializeApp() '+'is authorized to access the specified \"databaseURL\" and is from the correct '+'project.';}else if('serviceAccount'in this.firebaseOptions_){errorMessage+='Make sure the \"serviceAccount\" property provided to initializeApp() '+'is authorized to access the specified \"databaseURL\" and is from the correct '+'project.';}else{errorMessage+='Make sure the \"apiKey\" and \"databaseURL\" properties provided to '+'initializeApp() match the values provided for your app at '+'https://console.firebase.google.com/.';}warn(errorMessage);}}/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */class EmulatorTokenProvider{constructor(accessToken){this.accessToken=accessToken;}getToken(forceRefresh){return Promise.resolve({accessToken:this.accessToken});}addTokenChangeListener(listener){// Invoke the listener immediately to match the behavior in Firebase Auth\n// (see packages/auth/src/auth.js#L1807)\nlistener(this.accessToken);}removeTokenChangeListener(listener){}notifyForInvalidToken(){}}/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */EmulatorTokenProvider.OWNER='owner';/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const PROTOCOL_VERSION='5';const VERSION_PARAM='v';const TRANSPORT_SESSION_PARAM='s';const REFERER_PARAM='r';const FORGE_REF='f';// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nconst FORGE_DOMAIN_RE=/(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;const LAST_SESSION_PARAM='ls';const APPLICATION_ID_PARAM='p';const APP_CHECK_TOKEN_PARAM='ac';const WEBSOCKET='websocket';const LONG_POLLING='long_polling';/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A class that holds metadata about a Repo object\r\n */class RepoInfo{/**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */constructor(host,secure,namespace,webSocketOnly,nodeAdmin=false,persistenceKey='',includeNamespaceInQueryParams=false){this.secure=secure;this.namespace=namespace;this.webSocketOnly=webSocketOnly;this.nodeAdmin=nodeAdmin;this.persistenceKey=persistenceKey;this.includeNamespaceInQueryParams=includeNamespaceInQueryParams;this._host=host.toLowerCase();this._domain=this._host.substr(this._host.indexOf('.')+1);this.internalHost=PersistentStorage.get('host:'+host)||this._host;}isCacheableHost(){return this.internalHost.substr(0,2)==='s-';}isCustomHost(){return this._domain!=='firebaseio.com'&&this._domain!=='firebaseio-demo.com';}get host(){return this._host;}set host(newHost){if(newHost!==this.internalHost){this.internalHost=newHost;if(this.isCacheableHost()){PersistentStorage.set('host:'+this._host,this.internalHost);}}}toString(){let str=this.toURLString();if(this.persistenceKey){str+='<'+this.persistenceKey+'>';}return str;}toURLString(){const protocol=this.secure?'https://':'http://';const query=this.includeNamespaceInQueryParams?`?ns=${this.namespace}`:'';return`${protocol}${this.host}/${query}`;}}function repoInfoNeedsQueryParam(repoInfo){return repoInfo.host!==repoInfo.internalHost||repoInfo.isCustomHost()||repoInfo.includeNamespaceInQueryParams;}/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */function repoInfoConnectionURL(repoInfo,type,params){assert(typeof type==='string','typeof type must == string');assert(typeof params==='object','typeof params must == object');let connURL;if(type===WEBSOCKET){connURL=(repoInfo.secure?'wss://':'ws://')+repoInfo.internalHost+'/.ws?';}else if(type===LONG_POLLING){connURL=(repoInfo.secure?'https://':'http://')+repoInfo.internalHost+'/.lp?';}else{throw new Error('Unknown connection type: '+type);}if(repoInfoNeedsQueryParam(repoInfo)){params['ns']=repoInfo.namespace;}const pairs=[];each(params,(key,value)=>{pairs.push(key+'='+value);});return connURL+pairs.join('&');}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Tracks a collection of stats.\r\n */class StatsCollection{constructor(){this.counters_={};}incrementCounter(name,amount=1){if(!contains(this.counters_,name)){this.counters_[name]=0;}this.counters_[name]+=amount;}get(){return deepCopy(this.counters_);}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const collections={};const reporters={};function statsManagerGetCollection(repoInfo){const hashString=repoInfo.toString();if(!collections[hashString]){collections[hashString]=new StatsCollection();}return collections[hashString];}function statsManagerGetOrCreateReporter(repoInfo,creatorFunction){const hashString=repoInfo.toString();if(!reporters[hashString]){reporters[hashString]=creatorFunction();}return reporters[hashString];}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */class PacketReceiver{/**\r\n     * @param onMessage_\r\n     */constructor(onMessage_){this.onMessage_=onMessage_;this.pendingResponses=[];this.currentResponseNum=0;this.closeAfterResponse=-1;this.onClose=null;}closeAfter(responseNum,callback){this.closeAfterResponse=responseNum;this.onClose=callback;if(this.closeAfterResponse<this.currentResponseNum){this.onClose();this.onClose=null;}}/**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */handleResponse(requestNum,data){this.pendingResponses[requestNum]=data;while(this.pendingResponses[this.currentResponseNum]){const toProcess=this.pendingResponses[this.currentResponseNum];delete this.pendingResponses[this.currentResponseNum];for(let i=0;i<toProcess.length;++i){if(toProcess[i]){exceptionGuard(()=>{this.onMessage_(toProcess[i]);});}}if(this.currentResponseNum===this.closeAfterResponse){if(this.onClose){this.onClose();this.onClose=null;}break;}this.currentResponseNum++;}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // URL query parameters associated with longpolling\nconst FIREBASE_LONGPOLL_START_PARAM='start';const FIREBASE_LONGPOLL_CLOSE_COMMAND='close';const FIREBASE_LONGPOLL_COMMAND_CB_NAME='pLPCommand';const FIREBASE_LONGPOLL_DATA_CB_NAME='pRTLPCB';const FIREBASE_LONGPOLL_ID_PARAM='id';const FIREBASE_LONGPOLL_PW_PARAM='pw';const FIREBASE_LONGPOLL_SERIAL_PARAM='ser';const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM='cb';const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM='seg';const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET='ts';const FIREBASE_LONGPOLL_DATA_PARAM='d';const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM='dframe';//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE=1870;const SEG_HEADER_SIZE=30;//ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE=MAX_URL_DATA_SIZE-SEG_HEADER_SIZE;/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */const KEEPALIVE_REQUEST_INTERVAL=25000;/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */const LP_CONNECT_TIMEOUT=30000;/**\r\n * This class manages a single long-polling connection.\r\n */class BrowserPollConnection{/**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */constructor(connId,repoInfo,applicationId,appCheckToken,authToken,transportSessionId,lastSessionId){this.connId=connId;this.repoInfo=repoInfo;this.applicationId=applicationId;this.appCheckToken=appCheckToken;this.authToken=authToken;this.transportSessionId=transportSessionId;this.lastSessionId=lastSessionId;this.bytesSent=0;this.bytesReceived=0;this.everConnected_=false;this.log_=logWrapper(connId);this.stats_=statsManagerGetCollection(repoInfo);this.urlFn=params=>{// Always add the token if we have one.\nif(this.appCheckToken){params[APP_CHECK_TOKEN_PARAM]=this.appCheckToken;}return repoInfoConnectionURL(repoInfo,LONG_POLLING,params);};}/**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */open(onMessage,onDisconnect){this.curSegmentNum=0;this.onDisconnect_=onDisconnect;this.myPacketOrderer=new PacketReceiver(onMessage);this.isClosed_=false;this.connectTimeoutTimer_=setTimeout(()=>{this.log_('Timed out trying to connect.');// Make sure we clear the host cache\nthis.onClosed_();this.connectTimeoutTimer_=null;// eslint-disable-next-line @typescript-eslint/no-explicit-any\n},Math.floor(LP_CONNECT_TIMEOUT));// Ensure we delay the creation of the iframe until the DOM is loaded.\nexecuteWhenDOMReady(()=>{if(this.isClosed_){return;}//Set up a callback that gets triggered once a connection is set up.\nthis.scriptTagHolder=new FirebaseIFrameScriptHolder((...args)=>{const[command,arg1,arg2,arg3,arg4]=args;this.incrementIncomingBytes_(args);if(!this.scriptTagHolder){return;// we closed the connection.\n}if(this.connectTimeoutTimer_){clearTimeout(this.connectTimeoutTimer_);this.connectTimeoutTimer_=null;}this.everConnected_=true;if(command===FIREBASE_LONGPOLL_START_PARAM){this.id=arg1;this.password=arg2;}else if(command===FIREBASE_LONGPOLL_CLOSE_COMMAND){// Don't clear the host cache. We got a response from the server, so we know it's reachable\nif(arg1){// We aren't expecting any more data (other than what the server's already in the process of sending us\n// through our already open polls), so don't send any more.\nthis.scriptTagHolder.sendNewPolls=false;// arg1 in this case is the last response number sent by the server. We should try to receive\n// all of the responses up to this one before closing\nthis.myPacketOrderer.closeAfter(arg1,()=>{this.onClosed_();});}else{this.onClosed_();}}else{throw new Error('Unrecognized command received: '+command);}},(...args)=>{const[pN,data]=args;this.incrementIncomingBytes_(args);this.myPacketOrderer.handleResponse(pN,data);},()=>{this.onClosed_();},this.urlFn);//Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n//from cache.\nconst urlParams={};urlParams[FIREBASE_LONGPOLL_START_PARAM]='t';urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM]=Math.floor(Math.random()*100000000);if(this.scriptTagHolder.uniqueCallbackIdentifier){urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM]=this.scriptTagHolder.uniqueCallbackIdentifier;}urlParams[VERSION_PARAM]=PROTOCOL_VERSION;if(this.transportSessionId){urlParams[TRANSPORT_SESSION_PARAM]=this.transportSessionId;}if(this.lastSessionId){urlParams[LAST_SESSION_PARAM]=this.lastSessionId;}if(this.applicationId){urlParams[APPLICATION_ID_PARAM]=this.applicationId;}if(this.appCheckToken){urlParams[APP_CHECK_TOKEN_PARAM]=this.appCheckToken;}if(typeof location!=='undefined'&&location.hostname&&FORGE_DOMAIN_RE.test(location.hostname)){urlParams[REFERER_PARAM]=FORGE_REF;}const connectURL=this.urlFn(urlParams);this.log_('Connecting via long-poll to '+connectURL);this.scriptTagHolder.addTag(connectURL,()=>{/* do nothing */});});}/**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */start(){this.scriptTagHolder.startLongPoll(this.id,this.password);this.addDisconnectPingFrame(this.id,this.password);}/**\r\n     * Forces long polling to be considered as a potential transport\r\n     */static forceAllow(){BrowserPollConnection.forceAllow_=true;}/**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */static forceDisallow(){BrowserPollConnection.forceDisallow_=true;}// Static method, use string literal so it can be accessed in a generic way\nstatic isAvailable(){if(isNodeSdk()){return false;}else if(BrowserPollConnection.forceAllow_){return true;}else{// NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n// the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\nreturn!BrowserPollConnection.forceDisallow_&&typeof document!=='undefined'&&document.createElement!=null&&!isChromeExtensionContentScript()&&!isWindowsStoreApp();}}/**\r\n     * No-op for polling\r\n     */markConnectionHealthy(){}/**\r\n     * Stops polling and cleans up the iframe\r\n     */shutdown_(){this.isClosed_=true;if(this.scriptTagHolder){this.scriptTagHolder.close();this.scriptTagHolder=null;}//remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\nif(this.myDisconnFrame){document.body.removeChild(this.myDisconnFrame);this.myDisconnFrame=null;}if(this.connectTimeoutTimer_){clearTimeout(this.connectTimeoutTimer_);this.connectTimeoutTimer_=null;}}/**\r\n     * Triggered when this transport is closed\r\n     */onClosed_(){if(!this.isClosed_){this.log_('Longpoll is closing itself');this.shutdown_();if(this.onDisconnect_){this.onDisconnect_(this.everConnected_);this.onDisconnect_=null;}}}/**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */close(){if(!this.isClosed_){this.log_('Longpoll is being closed.');this.shutdown_();}}/**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */send(data){const dataStr=stringify(data);this.bytesSent+=dataStr.length;this.stats_.incrementCounter('bytes_sent',dataStr.length);//first, lets get the base64-encoded data\nconst base64data=base64Encode(dataStr);//We can only fit a certain amount in each URL, so we need to split this request\n//up into multiple pieces if it doesn't fit in one request.\nconst dataSegs=splitStringBySize(base64data,MAX_PAYLOAD_SIZE);//Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n//of segments so that we can reassemble the packet on the server.\nfor(let i=0;i<dataSegs.length;i++){this.scriptTagHolder.enqueueSegment(this.curSegmentNum,dataSegs.length,dataSegs[i]);this.curSegmentNum++;}}/**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */addDisconnectPingFrame(id,pw){if(isNodeSdk()){return;}this.myDisconnFrame=document.createElement('iframe');const urlParams={};urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM]='t';urlParams[FIREBASE_LONGPOLL_ID_PARAM]=id;urlParams[FIREBASE_LONGPOLL_PW_PARAM]=pw;this.myDisconnFrame.src=this.urlFn(urlParams);this.myDisconnFrame.style.display='none';document.body.appendChild(this.myDisconnFrame);}/**\r\n     * Used to track the bytes received by this client\r\n     */incrementIncomingBytes_(args){// TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\nconst bytesReceived=stringify(args).length;this.bytesReceived+=bytesReceived;this.stats_.incrementCounter('bytes_received',bytesReceived);}}/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/class FirebaseIFrameScriptHolder{/**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */constructor(commandCB,onMessageCB,onDisconnect,urlFn){this.onDisconnect=onDisconnect;this.urlFn=urlFn;//We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n//problems in some browsers.\nthis.outstandingRequests=new Set();//A queue of the pending segments waiting for transmission to the server.\nthis.pendingSegs=[];//A serial number. We use this for two things:\n// 1) A way to ensure the browser doesn't cache responses to polls\n// 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n//    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n//    JSONP code in the order it was added to the iframe.\nthis.currentSerial=Math.floor(Math.random()*100000000);// This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n// incoming data from the server that we're waiting for).\nthis.sendNewPolls=true;if(!isNodeSdk()){//Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n//iframes where we put the long-polling script tags. We have two callbacks:\n//   1) Command Callback - Triggered for control issues, like starting a connection.\n//   2) Message Callback - Triggered when new data arrives.\nthis.uniqueCallbackIdentifier=LUIDGenerator();window[FIREBASE_LONGPOLL_COMMAND_CB_NAME+this.uniqueCallbackIdentifier]=commandCB;window[FIREBASE_LONGPOLL_DATA_CB_NAME+this.uniqueCallbackIdentifier]=onMessageCB;//Create an iframe for us to add script tags to.\nthis.myIFrame=FirebaseIFrameScriptHolder.createIFrame_();// Set the iframe's contents.\nlet script='';// if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n// for ie9, but ie8 needs to do it again in the document itself.\nif(this.myIFrame.src&&this.myIFrame.src.substr(0,'javascript:'.length)==='javascript:'){const currentDomain=document.domain;script='<script>document.domain=\"'+currentDomain+'\";</script>';}const iframeContents='<html><body>'+script+'</body></html>';try{this.myIFrame.doc.open();this.myIFrame.doc.write(iframeContents);this.myIFrame.doc.close();}catch(e){log('frame writing exception');if(e.stack){log(e.stack);}log(e);}}else{this.commandCB=commandCB;this.onMessageCB=onMessageCB;}}/**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */static createIFrame_(){const iframe=document.createElement('iframe');iframe.style.display='none';// This is necessary in order to initialize the document inside the iframe\nif(document.body){document.body.appendChild(iframe);try{// If document.domain has been modified in IE, this will throw an error, and we need to set the\n// domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n// Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\nconst a=iframe.contentWindow.document;if(!a){// Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\nlog('No IE domain setting required');}}catch(e){const domain=document.domain;iframe.src=\"javascript:void((function(){document.open();document.domain='\"+domain+\"';document.close();})())\";}}else{// LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n// never gets hit.\nthrow'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';}// Get the document of the iframe in a browser-specific way.\nif(iframe.contentDocument){iframe.doc=iframe.contentDocument;// Firefox, Opera, Safari\n}else if(iframe.contentWindow){iframe.doc=iframe.contentWindow.document;// Internet Explorer\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n}else if(iframe.document){// eslint-disable-next-line @typescript-eslint/no-explicit-any\niframe.doc=iframe.document;//others?\n}return iframe;}/**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */close(){//Mark this iframe as dead, so no new requests are sent.\nthis.alive=false;if(this.myIFrame){//We have to actually remove all of the html inside this iframe before removing it from the\n//window, or IE will continue loading and executing the script tags we've already added, which\n//can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\nthis.myIFrame.doc.body.innerHTML='';setTimeout(()=>{if(this.myIFrame!==null){document.body.removeChild(this.myIFrame);this.myIFrame=null;}},Math.floor(0));}// Protect from being called recursively.\nconst onDisconnect=this.onDisconnect;if(onDisconnect){this.onDisconnect=null;onDisconnect();}}/**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */startLongPoll(id,pw){this.myID=id;this.myPW=pw;this.alive=true;//send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\nwhile(this.newRequest_()){}}/**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */newRequest_(){// We keep one outstanding request open all the time to receive data, but if we need to send data\n// (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n// close the old request.\nif(this.alive&&this.sendNewPolls&&this.outstandingRequests.size<(this.pendingSegs.length>0?2:1)){//construct our url\nthis.currentSerial++;const urlParams={};urlParams[FIREBASE_LONGPOLL_ID_PARAM]=this.myID;urlParams[FIREBASE_LONGPOLL_PW_PARAM]=this.myPW;urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM]=this.currentSerial;let theURL=this.urlFn(urlParams);//Now add as much data as we can.\nlet curDataString='';let i=0;while(this.pendingSegs.length>0){//first, lets see if the next segment will fit.\nconst nextSeg=this.pendingSegs[0];if(nextSeg.d.length+SEG_HEADER_SIZE+curDataString.length<=MAX_URL_DATA_SIZE){//great, the segment will fit. Lets append it.\nconst theSeg=this.pendingSegs.shift();curDataString=curDataString+'&'+FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM+i+'='+theSeg.seg+'&'+FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET+i+'='+theSeg.ts+'&'+FIREBASE_LONGPOLL_DATA_PARAM+i+'='+theSeg.d;i++;}else{break;}}theURL=theURL+curDataString;this.addLongPollTag_(theURL,this.currentSerial);return true;}else{return false;}}/**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */enqueueSegment(segnum,totalsegs,data){//add this to the queue of segments to send.\nthis.pendingSegs.push({seg:segnum,ts:totalsegs,d:data});//send the data immediately if there isn't already data being transmitted, unless\n//startLongPoll hasn't been called yet.\nif(this.alive){this.newRequest_();}}/**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */addLongPollTag_(url,serial){//remember that we sent this request.\nthis.outstandingRequests.add(serial);const doNewRequest=()=>{this.outstandingRequests.delete(serial);this.newRequest_();};// If this request doesn't return on its own accord (by the server sending us some data), we'll\n// create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\nconst keepaliveTimeout=setTimeout(doNewRequest,Math.floor(KEEPALIVE_REQUEST_INTERVAL));const readyStateCB=()=>{// Request completed.  Cancel the keepalive.\nclearTimeout(keepaliveTimeout);// Trigger a new request so we can continue receiving data.\ndoNewRequest();};this.addTag(url,readyStateCB);}/**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */addTag(url,loadCB){if(isNodeSdk()){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nthis.doNodeLongPoll(url,loadCB);}else{setTimeout(()=>{try{// if we're already closed, don't add this poll\nif(!this.sendNewPolls){return;}const newScript=this.myIFrame.doc.createElement('script');newScript.type='text/javascript';newScript.async=true;newScript.src=url;// eslint-disable-next-line @typescript-eslint/no-explicit-any\nnewScript.onload=newScript.onreadystatechange=function(){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst rstate=newScript.readyState;if(!rstate||rstate==='loaded'||rstate==='complete'){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nnewScript.onload=newScript.onreadystatechange=null;if(newScript.parentNode){newScript.parentNode.removeChild(newScript);}loadCB();}};newScript.onerror=()=>{log('Long-poll script failed to load: '+url);this.sendNewPolls=false;this.close();};this.myIFrame.doc.body.appendChild(newScript);}catch(e){// TODO: we should make this error visible somehow\n}},Math.floor(1));}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const WEBSOCKET_MAX_FRAME_SIZE=16384;const WEBSOCKET_KEEPALIVE_INTERVAL=45000;let WebSocketImpl=null;if(typeof MozWebSocket!=='undefined'){WebSocketImpl=MozWebSocket;}else if(typeof WebSocket!=='undefined'){WebSocketImpl=WebSocket;}/**\r\n * Create a new websocket connection with the given callbacks.\r\n */class WebSocketConnection{/**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */constructor(connId,repoInfo,applicationId,appCheckToken,authToken,transportSessionId,lastSessionId){this.connId=connId;this.applicationId=applicationId;this.appCheckToken=appCheckToken;this.authToken=authToken;this.keepaliveTimer=null;this.frames=null;this.totalFrames=0;this.bytesSent=0;this.bytesReceived=0;this.log_=logWrapper(this.connId);this.stats_=statsManagerGetCollection(repoInfo);this.connURL=WebSocketConnection.connectionURL_(repoInfo,transportSessionId,lastSessionId,appCheckToken);this.nodeAdmin=repoInfo.nodeAdmin;}/**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */static connectionURL_(repoInfo,transportSessionId,lastSessionId,appCheckToken){const urlParams={};urlParams[VERSION_PARAM]=PROTOCOL_VERSION;if(!isNodeSdk()&&typeof location!=='undefined'&&location.hostname&&FORGE_DOMAIN_RE.test(location.hostname)){urlParams[REFERER_PARAM]=FORGE_REF;}if(transportSessionId){urlParams[TRANSPORT_SESSION_PARAM]=transportSessionId;}if(lastSessionId){urlParams[LAST_SESSION_PARAM]=lastSessionId;}if(appCheckToken){urlParams[APP_CHECK_TOKEN_PARAM]=appCheckToken;}return repoInfoConnectionURL(repoInfo,WEBSOCKET,urlParams);}/**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */open(onMessage,onDisconnect){this.onDisconnect=onDisconnect;this.onMessage=onMessage;this.log_('Websocket connecting to '+this.connURL);this.everConnected_=false;// Assume failure until proven otherwise.\nPersistentStorage.set('previous_websocket_failure',true);try{if(isNodeSdk()){const device=this.nodeAdmin?'AdminNode':'Node';// UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\nconst options={headers:{'User-Agent':`Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,'X-Firebase-GMPID':this.applicationId||''}};// If using Node with admin creds, AppCheck-related checks are unnecessary.\n// Note that we send the credentials here even if they aren't admin credentials, which is\n// not a problem.\n// Note that this header is just used to bypass appcheck, and the token should still be sent\n// through the websocket connection once it is established.\nif(this.authToken){options.headers['Authorization']=`Bearer ${this.authToken}`;}if(this.appCheckToken){options.headers['X-Firebase-AppCheck']=this.appCheckToken;}// Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\nconst env=process['env'];const proxy=this.connURL.indexOf('wss://')===0?env['HTTPS_PROXY']||env['https_proxy']:env['HTTP_PROXY']||env['http_proxy'];if(proxy){options['proxy']={origin:proxy};}this.mySock=new WebSocketImpl(this.connURL,[],options);}else{const options={headers:{'X-Firebase-GMPID':this.applicationId||'','X-Firebase-AppCheck':this.appCheckToken||''}};this.mySock=new WebSocketImpl(this.connURL,[],options);}}catch(e){this.log_('Error instantiating WebSocket.');const error=e.message||e.data;if(error){this.log_(error);}this.onClosed_();return;}this.mySock.onopen=()=>{this.log_('Websocket connected.');this.everConnected_=true;};this.mySock.onclose=()=>{this.log_('Websocket connection was disconnected.');this.mySock=null;this.onClosed_();};this.mySock.onmessage=m=>{this.handleIncomingFrame(m);};this.mySock.onerror=e=>{this.log_('WebSocket error.  Closing connection.');// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst error=e.message||e.data;if(error){this.log_(error);}this.onClosed_();};}/**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */start(){}static forceDisallow(){WebSocketConnection.forceDisallow_=true;}static isAvailable(){let isOldAndroid=false;if(typeof navigator!=='undefined'&&navigator.userAgent){const oldAndroidRegex=/Android ([0-9]{0,}\\.[0-9]{0,})/;const oldAndroidMatch=navigator.userAgent.match(oldAndroidRegex);if(oldAndroidMatch&&oldAndroidMatch.length>1){if(parseFloat(oldAndroidMatch[1])<4.4){isOldAndroid=true;}}}return!isOldAndroid&&WebSocketImpl!==null&&!WebSocketConnection.forceDisallow_;}/**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */static previouslyFailed(){// If our persistent storage is actually only in-memory storage,\n// we default to assuming that it previously failed to be safe.\nreturn PersistentStorage.isInMemoryStorage||PersistentStorage.get('previous_websocket_failure')===true;}markConnectionHealthy(){PersistentStorage.remove('previous_websocket_failure');}appendFrame_(data){this.frames.push(data);if(this.frames.length===this.totalFrames){const fullMess=this.frames.join('');this.frames=null;const jsonMess=jsonEval(fullMess);//handle the message\nthis.onMessage(jsonMess);}}/**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */handleNewFrameCount_(frameCount){this.totalFrames=frameCount;this.frames=[];}/**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */extractFrameCount_(data){assert(this.frames===null,'We already have a frame buffer');// TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n// currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\nif(data.length<=6){const frameCount=Number(data);if(!isNaN(frameCount)){this.handleNewFrameCount_(frameCount);return null;}}this.handleNewFrameCount_(1);return data;}/**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */handleIncomingFrame(mess){if(this.mySock===null){return;// Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n}const data=mess['data'];this.bytesReceived+=data.length;this.stats_.incrementCounter('bytes_received',data.length);this.resetKeepAlive();if(this.frames!==null){// we're buffering\nthis.appendFrame_(data);}else{// try to parse out a frame count, otherwise, assume 1 and process it\nconst remainingData=this.extractFrameCount_(data);if(remainingData!==null){this.appendFrame_(remainingData);}}}/**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */send(data){this.resetKeepAlive();const dataStr=stringify(data);this.bytesSent+=dataStr.length;this.stats_.incrementCounter('bytes_sent',dataStr.length);//We can only fit a certain amount in each websocket frame, so we need to split this request\n//up into multiple pieces if it doesn't fit in one request.\nconst dataSegs=splitStringBySize(dataStr,WEBSOCKET_MAX_FRAME_SIZE);//Send the length header\nif(dataSegs.length>1){this.sendString_(String(dataSegs.length));}//Send the actual data in segments.\nfor(let i=0;i<dataSegs.length;i++){this.sendString_(dataSegs[i]);}}shutdown_(){this.isClosed_=true;if(this.keepaliveTimer){clearInterval(this.keepaliveTimer);this.keepaliveTimer=null;}if(this.mySock){this.mySock.close();this.mySock=null;}}onClosed_(){if(!this.isClosed_){this.log_('WebSocket is closing itself');this.shutdown_();// since this is an internal close, trigger the close listener\nif(this.onDisconnect){this.onDisconnect(this.everConnected_);this.onDisconnect=null;}}}/**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */close(){if(!this.isClosed_){this.log_('WebSocket is being closed');this.shutdown_();}}/**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */resetKeepAlive(){clearInterval(this.keepaliveTimer);this.keepaliveTimer=setInterval(()=>{//If there has been no websocket activity for a while, send a no-op\nif(this.mySock){this.sendString_('0');}this.resetKeepAlive();// eslint-disable-next-line @typescript-eslint/no-explicit-any\n},Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));}/**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */sendString_(str){// Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n// calls for some unknown reason.  We treat these as an error and disconnect.\n// See https://app.asana.com/0/58926111402292/68021340250410\ntry{this.mySock.send(str);}catch(e){this.log_('Exception thrown from WebSocket.send():',e.message||e.data,'Closing connection.');setTimeout(this.onClosed_.bind(this),0);}}}/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */WebSocketConnection.responsesRequiredToBeHealthy=2;/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */WebSocketConnection.healthyTimeout=30000;/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */class TransportManager{/**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */constructor(repoInfo){this.initTransports_(repoInfo);}static get ALL_TRANSPORTS(){return[BrowserPollConnection,WebSocketConnection];}initTransports_(repoInfo){const isWebSocketsAvailable=WebSocketConnection&&WebSocketConnection['isAvailable']();let isSkipPollConnection=isWebSocketsAvailable&&!WebSocketConnection.previouslyFailed();if(repoInfo.webSocketOnly){if(!isWebSocketsAvailable){warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");}isSkipPollConnection=true;}if(isSkipPollConnection){this.transports_=[WebSocketConnection];}else{const transports=this.transports_=[];for(const transport of TransportManager.ALL_TRANSPORTS){if(transport&&transport['isAvailable']()){transports.push(transport);}}}}/**\r\n     * @returns The constructor for the initial transport to use\r\n     */initialTransport(){if(this.transports_.length>0){return this.transports_[0];}else{throw new Error('No transports available');}}/**\r\n     * @returns The constructor for the next transport, or null\r\n     */upgradeTransport(){if(this.transports_.length>1){return this.transports_[1];}else{return null;}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT=60000;// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS=5000;// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE=10*1024;const BYTES_RECEIVED_HEALTHY_OVERRIDE=100*1024;const MESSAGE_TYPE='t';const MESSAGE_DATA='d';const CONTROL_SHUTDOWN='s';const CONTROL_RESET='r';const CONTROL_ERROR='e';const CONTROL_PONG='o';const SWITCH_ACK='a';const END_TRANSMISSION='n';const PING='p';const SERVER_HELLO='h';/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */class Connection{/**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */constructor(id,repoInfo_,applicationId_,appCheckToken_,authToken_,onMessage_,onReady_,onDisconnect_,onKill_,lastSessionId){this.id=id;this.repoInfo_=repoInfo_;this.applicationId_=applicationId_;this.appCheckToken_=appCheckToken_;this.authToken_=authToken_;this.onMessage_=onMessage_;this.onReady_=onReady_;this.onDisconnect_=onDisconnect_;this.onKill_=onKill_;this.lastSessionId=lastSessionId;this.connectionCount=0;this.pendingDataMessages=[];this.state_=0/* CONNECTING */;this.log_=logWrapper('c:'+this.id+':');this.transportManager_=new TransportManager(repoInfo_);this.log_('Connection created');this.start_();}/**\r\n     * Starts a connection attempt\r\n     */start_(){const conn=this.transportManager_.initialTransport();this.conn_=new conn(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,null,this.lastSessionId);// For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n// can consider the transport healthy.\nthis.primaryResponsesRequired_=conn['responsesRequiredToBeHealthy']||0;const onMessageReceived=this.connReceiver_(this.conn_);const onConnectionLost=this.disconnReceiver_(this.conn_);this.tx_=this.conn_;this.rx_=this.conn_;this.secondaryConn_=null;this.isHealthy_=false;/*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */setTimeout(()=>{// this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\nthis.conn_&&this.conn_.open(onMessageReceived,onConnectionLost);},Math.floor(0));const healthyTimeoutMS=conn['healthyTimeout']||0;if(healthyTimeoutMS>0){this.healthyTimeout_=setTimeoutNonBlocking(()=>{this.healthyTimeout_=null;if(!this.isHealthy_){if(this.conn_&&this.conn_.bytesReceived>BYTES_RECEIVED_HEALTHY_OVERRIDE){this.log_('Connection exceeded healthy timeout but has received '+this.conn_.bytesReceived+' bytes.  Marking connection healthy.');this.isHealthy_=true;this.conn_.markConnectionHealthy();}else if(this.conn_&&this.conn_.bytesSent>BYTES_SENT_HEALTHY_OVERRIDE){this.log_('Connection exceeded healthy timeout but has sent '+this.conn_.bytesSent+' bytes.  Leaving connection alive.');// NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n// the server.\n}else{this.log_('Closing unhealthy connection after timeout.');this.close();}}// eslint-disable-next-line @typescript-eslint/no-explicit-any\n},Math.floor(healthyTimeoutMS));}}nextTransportId_(){return'c:'+this.id+':'+this.connectionCount++;}disconnReceiver_(conn){return everConnected=>{if(conn===this.conn_){this.onConnectionLost_(everConnected);}else if(conn===this.secondaryConn_){this.log_('Secondary connection lost.');this.onSecondaryConnectionLost_();}else{this.log_('closing an old connection');}};}connReceiver_(conn){return message=>{if(this.state_!==2/* DISCONNECTED */){if(conn===this.rx_){this.onPrimaryMessageReceived_(message);}else if(conn===this.secondaryConn_){this.onSecondaryMessageReceived_(message);}else{this.log_('message on old connection');}}};}/**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */sendRequest(dataMsg){// wrap in a data message envelope and send it on\nconst msg={t:'d',d:dataMsg};this.sendData_(msg);}tryCleanupConnection(){if(this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_){this.log_('cleaning up and promoting a connection: '+this.secondaryConn_.connId);this.conn_=this.secondaryConn_;this.secondaryConn_=null;// the server will shutdown the old connection\n}}onSecondaryControl_(controlData){if(MESSAGE_TYPE in controlData){const cmd=controlData[MESSAGE_TYPE];if(cmd===SWITCH_ACK){this.upgradeIfSecondaryHealthy_();}else if(cmd===CONTROL_RESET){// Most likely the session wasn't valid. Abandon the switch attempt\nthis.log_('Got a reset on secondary, closing it');this.secondaryConn_.close();// If we were already using this connection for something, than we need to fully close\nif(this.tx_===this.secondaryConn_||this.rx_===this.secondaryConn_){this.close();}}else if(cmd===CONTROL_PONG){this.log_('got pong on secondary.');this.secondaryResponsesRequired_--;this.upgradeIfSecondaryHealthy_();}}}onSecondaryMessageReceived_(parsedData){const layer=requireKey('t',parsedData);const data=requireKey('d',parsedData);if(layer==='c'){this.onSecondaryControl_(data);}else if(layer==='d'){// got a data message, but we're still second connection. Need to buffer it up\nthis.pendingDataMessages.push(data);}else{throw new Error('Unknown protocol layer: '+layer);}}upgradeIfSecondaryHealthy_(){if(this.secondaryResponsesRequired_<=0){this.log_('Secondary connection is healthy.');this.isHealthy_=true;this.secondaryConn_.markConnectionHealthy();this.proceedWithUpgrade_();}else{// Send a ping to make sure the connection is healthy.\nthis.log_('sending ping on secondary.');this.secondaryConn_.send({t:'c',d:{t:PING,d:{}}});}}proceedWithUpgrade_(){// tell this connection to consider itself open\nthis.secondaryConn_.start();// send ack\nthis.log_('sending client ack on secondary');this.secondaryConn_.send({t:'c',d:{t:SWITCH_ACK,d:{}}});// send end packet on primary transport, switch to sending on this one\n// can receive on this one, buffer responses until end received on primary transport\nthis.log_('Ending transmission on primary');this.conn_.send({t:'c',d:{t:END_TRANSMISSION,d:{}}});this.tx_=this.secondaryConn_;this.tryCleanupConnection();}onPrimaryMessageReceived_(parsedData){// Must refer to parsedData properties in quotes, so closure doesn't touch them.\nconst layer=requireKey('t',parsedData);const data=requireKey('d',parsedData);if(layer==='c'){this.onControl_(data);}else if(layer==='d'){this.onDataMessage_(data);}}onDataMessage_(message){this.onPrimaryResponse_();// We don't do anything with data messages, just kick them up a level\nthis.onMessage_(message);}onPrimaryResponse_(){if(!this.isHealthy_){this.primaryResponsesRequired_--;if(this.primaryResponsesRequired_<=0){this.log_('Primary connection is healthy.');this.isHealthy_=true;this.conn_.markConnectionHealthy();}}}onControl_(controlData){const cmd=requireKey(MESSAGE_TYPE,controlData);if(MESSAGE_DATA in controlData){const payload=controlData[MESSAGE_DATA];if(cmd===SERVER_HELLO){this.onHandshake_(payload);}else if(cmd===END_TRANSMISSION){this.log_('recvd end transmission on primary');this.rx_=this.secondaryConn_;for(let i=0;i<this.pendingDataMessages.length;++i){this.onDataMessage_(this.pendingDataMessages[i]);}this.pendingDataMessages=[];this.tryCleanupConnection();}else if(cmd===CONTROL_SHUTDOWN){// This was previously the 'onKill' callback passed to the lower-level connection\n// payload in this case is the reason for the shutdown. Generally a human-readable error\nthis.onConnectionShutdown_(payload);}else if(cmd===CONTROL_RESET){// payload in this case is the host we should contact\nthis.onReset_(payload);}else if(cmd===CONTROL_ERROR){error('Server Error: '+payload);}else if(cmd===CONTROL_PONG){this.log_('got pong on primary.');this.onPrimaryResponse_();this.sendPingOnPrimaryIfNecessary_();}else{error('Unknown control packet command: '+cmd);}}}/**\r\n     * @param handshake - The handshake data returned from the server\r\n     */onHandshake_(handshake){const timestamp=handshake.ts;const version=handshake.v;const host=handshake.h;this.sessionId=handshake.s;this.repoInfo_.host=host;// if we've already closed the connection, then don't bother trying to progress further\nif(this.state_===0/* CONNECTING */){this.conn_.start();this.onConnectionEstablished_(this.conn_,timestamp);if(PROTOCOL_VERSION!==version){warn('Protocol version mismatch detected');}// TODO: do we want to upgrade? when? maybe a delay?\nthis.tryStartUpgrade_();}}tryStartUpgrade_(){const conn=this.transportManager_.upgradeTransport();if(conn){this.startUpgrade_(conn);}}startUpgrade_(conn){this.secondaryConn_=new conn(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,this.sessionId);// For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n// can consider the transport healthy.\nthis.secondaryResponsesRequired_=conn['responsesRequiredToBeHealthy']||0;const onMessage=this.connReceiver_(this.secondaryConn_);const onDisconnect=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(onMessage,onDisconnect);// If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\nsetTimeoutNonBlocking(()=>{if(this.secondaryConn_){this.log_('Timed out trying to upgrade.');this.secondaryConn_.close();}},Math.floor(UPGRADE_TIMEOUT));}onReset_(host){this.log_('Reset packet received.  New host: '+host);this.repoInfo_.host=host;// TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n// We don't currently support resets after the connection has already been established\nif(this.state_===1/* CONNECTED */){this.close();}else{// Close whatever connections we have open and start again.\nthis.closeConnections_();this.start_();}}onConnectionEstablished_(conn,timestamp){this.log_('Realtime connection established.');this.conn_=conn;this.state_=1/* CONNECTED */;if(this.onReady_){this.onReady_(timestamp,this.sessionId);this.onReady_=null;}// If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n// send some pings.\nif(this.primaryResponsesRequired_===0){this.log_('Primary connection is healthy.');this.isHealthy_=true;}else{setTimeoutNonBlocking(()=>{this.sendPingOnPrimaryIfNecessary_();},Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));}}sendPingOnPrimaryIfNecessary_(){// If the connection isn't considered healthy yet, we'll send a noop ping packet request.\nif(!this.isHealthy_&&this.state_===1/* CONNECTED */){this.log_('sending ping on primary.');this.sendData_({t:'c',d:{t:PING,d:{}}});}}onSecondaryConnectionLost_(){const conn=this.secondaryConn_;this.secondaryConn_=null;if(this.tx_===conn||this.rx_===conn){// we are relying on this connection already in some capacity. Therefore, a failure is real\nthis.close();}}/**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */onConnectionLost_(everConnected){this.conn_=null;// NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n// called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\nif(!everConnected&&this.state_===0/* CONNECTING */){this.log_('Realtime connection failed.');// Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\nif(this.repoInfo_.isCacheableHost()){PersistentStorage.remove('host:'+this.repoInfo_.host);// reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\nthis.repoInfo_.internalHost=this.repoInfo_.host;}}else if(this.state_===1/* CONNECTED */){this.log_('Realtime connection lost.');}this.close();}onConnectionShutdown_(reason){this.log_('Connection shutdown command received. Shutting down...');if(this.onKill_){this.onKill_(reason);this.onKill_=null;}// We intentionally don't want to fire onDisconnect (kill is a different case),\n// so clear the callback.\nthis.onDisconnect_=null;this.close();}sendData_(data){if(this.state_!==1/* CONNECTED */){throw'Connection is not connected';}else{this.tx_.send(data);}}/**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */close(){if(this.state_!==2/* DISCONNECTED */){this.log_('Closing realtime connection.');this.state_=2/* DISCONNECTED */;this.closeConnections_();if(this.onDisconnect_){this.onDisconnect_();this.onDisconnect_=null;}}}closeConnections_(){this.log_('Shutting down all connections');if(this.conn_){this.conn_.close();this.conn_=null;}if(this.secondaryConn_){this.secondaryConn_.close();this.secondaryConn_=null;}if(this.healthyTimeout_){clearTimeout(this.healthyTimeout_);this.healthyTimeout_=null;}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */class ServerActions{put(pathString,data,onComplete,hash){}merge(pathString,data,onComplete,hash){}/**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */refreshAuthToken(token){}/**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */refreshAppCheckToken(token){}onDisconnectPut(pathString,data,onComplete){}onDisconnectMerge(pathString,data,onComplete){}onDisconnectCancel(pathString,onComplete){}reportStats(stats){}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */class EventEmitter{constructor(allowedEvents_){this.allowedEvents_=allowedEvents_;this.listeners_={};assert(Array.isArray(allowedEvents_)&&allowedEvents_.length>0,'Requires a non-empty array');}/**\r\n     * To be called by derived classes to trigger events.\r\n     */trigger(eventType,...varArgs){if(Array.isArray(this.listeners_[eventType])){// Clone the list, since callbacks could add/remove listeners.\nconst listeners=[...this.listeners_[eventType]];for(let i=0;i<listeners.length;i++){listeners[i].callback.apply(listeners[i].context,varArgs);}}}on(eventType,callback,context){this.validateEventType_(eventType);this.listeners_[eventType]=this.listeners_[eventType]||[];this.listeners_[eventType].push({callback,context});const eventData=this.getInitialEvent(eventType);if(eventData){callback.apply(context,eventData);}}off(eventType,callback,context){this.validateEventType_(eventType);const listeners=this.listeners_[eventType]||[];for(let i=0;i<listeners.length;i++){if(listeners[i].callback===callback&&(!context||context===listeners[i].context)){listeners.splice(i,1);return;}}}validateEventType_(eventType){assert(this.allowedEvents_.find(et=>{return et===eventType;}),'Unknown event: '+eventType);}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */class OnlineMonitor extends EventEmitter{constructor(){super(['online']);this.online_=true;// We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n// https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n// It would seem that the 'online' event does not always fire consistently. So we disable it\n// for Cordova.\nif(typeof window!=='undefined'&&typeof window.addEventListener!=='undefined'&&!isMobileCordova()){window.addEventListener('online',()=>{if(!this.online_){this.online_=true;this.trigger('online',true);}},false);window.addEventListener('offline',()=>{if(this.online_){this.online_=false;this.trigger('online',false);}},false);}}static getInstance(){return new OnlineMonitor();}getInitialEvent(eventType){assert(eventType==='online','Unknown event type: '+eventType);return[this.online_];}currentlyOnline(){return this.online_;}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /** Maximum key depth. */const MAX_PATH_DEPTH=32;/** Maximum number of (UTF8) bytes in a Firebase path. */const MAX_PATH_LENGTH_BYTES=768;/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */class Path{/**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */constructor(pathOrString,pieceNum){if(pieceNum===void 0){this.pieces_=pathOrString.split('/');// Remove empty pieces.\nlet copyTo=0;for(let i=0;i<this.pieces_.length;i++){if(this.pieces_[i].length>0){this.pieces_[copyTo]=this.pieces_[i];copyTo++;}}this.pieces_.length=copyTo;this.pieceNum_=0;}else{this.pieces_=pathOrString;this.pieceNum_=pieceNum;}}toString(){let pathString='';for(let i=this.pieceNum_;i<this.pieces_.length;i++){if(this.pieces_[i]!==''){pathString+='/'+this.pieces_[i];}}return pathString||'/';}}function newEmptyPath(){return new Path('');}function pathGetFront(path){if(path.pieceNum_>=path.pieces_.length){return null;}return path.pieces_[path.pieceNum_];}/**\r\n * @returns The number of segments in this path\r\n */function pathGetLength(path){return path.pieces_.length-path.pieceNum_;}function pathPopFront(path){let pieceNum=path.pieceNum_;if(pieceNum<path.pieces_.length){pieceNum++;}return new Path(path.pieces_,pieceNum);}function pathGetBack(path){if(path.pieceNum_<path.pieces_.length){return path.pieces_[path.pieces_.length-1];}return null;}function pathToUrlEncodedString(path){let pathString='';for(let i=path.pieceNum_;i<path.pieces_.length;i++){if(path.pieces_[i]!==''){pathString+='/'+encodeURIComponent(String(path.pieces_[i]));}}return pathString||'/';}/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */function pathSlice(path,begin=0){return path.pieces_.slice(path.pieceNum_+begin);}function pathParent(path){if(path.pieceNum_>=path.pieces_.length){return null;}const pieces=[];for(let i=path.pieceNum_;i<path.pieces_.length-1;i++){pieces.push(path.pieces_[i]);}return new Path(pieces,0);}function pathChild(path,childPathObj){const pieces=[];for(let i=path.pieceNum_;i<path.pieces_.length;i++){pieces.push(path.pieces_[i]);}if(childPathObj instanceof Path){for(let i=childPathObj.pieceNum_;i<childPathObj.pieces_.length;i++){pieces.push(childPathObj.pieces_[i]);}}else{const childPieces=childPathObj.split('/');for(let i=0;i<childPieces.length;i++){if(childPieces[i].length>0){pieces.push(childPieces[i]);}}}return new Path(pieces,0);}/**\r\n * @returns True if there are no segments in this path\r\n */function pathIsEmpty(path){return path.pieceNum_>=path.pieces_.length;}/**\r\n * @returns The path from outerPath to innerPath\r\n */function newRelativePath(outerPath,innerPath){const outer=pathGetFront(outerPath),inner=pathGetFront(innerPath);if(outer===null){return innerPath;}else if(outer===inner){return newRelativePath(pathPopFront(outerPath),pathPopFront(innerPath));}else{throw new Error('INTERNAL ERROR: innerPath ('+innerPath+') is not within '+'outerPath ('+outerPath+')');}}/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */function pathCompare(left,right){const leftKeys=pathSlice(left,0);const rightKeys=pathSlice(right,0);for(let i=0;i<leftKeys.length&&i<rightKeys.length;i++){const cmp=nameCompare(leftKeys[i],rightKeys[i]);if(cmp!==0){return cmp;}}if(leftKeys.length===rightKeys.length){return 0;}return leftKeys.length<rightKeys.length?-1:1;}/**\r\n * @returns true if paths are the same.\r\n */function pathEquals(path,other){if(pathGetLength(path)!==pathGetLength(other)){return false;}for(let i=path.pieceNum_,j=other.pieceNum_;i<=path.pieces_.length;i++,j++){if(path.pieces_[i]!==other.pieces_[j]){return false;}}return true;}/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */function pathContains(path,other){let i=path.pieceNum_;let j=other.pieceNum_;if(pathGetLength(path)>pathGetLength(other)){return false;}while(i<path.pieces_.length){if(path.pieces_[i]!==other.pieces_[j]){return false;}++i;++j;}return true;}/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */class ValidationPath{/**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */constructor(path,errorPrefix_){this.errorPrefix_=errorPrefix_;this.parts_=pathSlice(path,0);/** Initialize to number of '/' chars needed in path. */this.byteLength_=Math.max(1,this.parts_.length);for(let i=0;i<this.parts_.length;i++){this.byteLength_+=stringLength(this.parts_[i]);}validationPathCheckValid(this);}}function validationPathPush(validationPath,child){// Count the needed '/'\nif(validationPath.parts_.length>0){validationPath.byteLength_+=1;}validationPath.parts_.push(child);validationPath.byteLength_+=stringLength(child);validationPathCheckValid(validationPath);}function validationPathPop(validationPath){const last=validationPath.parts_.pop();validationPath.byteLength_-=stringLength(last);// Un-count the previous '/'\nif(validationPath.parts_.length>0){validationPath.byteLength_-=1;}}function validationPathCheckValid(validationPath){if(validationPath.byteLength_>MAX_PATH_LENGTH_BYTES){throw new Error(validationPath.errorPrefix_+'has a key path longer than '+MAX_PATH_LENGTH_BYTES+' bytes ('+validationPath.byteLength_+').');}if(validationPath.parts_.length>MAX_PATH_DEPTH){throw new Error(validationPath.errorPrefix_+'path specified exceeds the maximum depth that can be written ('+MAX_PATH_DEPTH+') or object contains a cycle '+validationPathToErrorString(validationPath));}}/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */function validationPathToErrorString(validationPath){if(validationPath.parts_.length===0){return'';}return\"in property '\"+validationPath.parts_.join('.')+\"'\";}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class VisibilityMonitor extends EventEmitter{constructor(){super(['visible']);let hidden;let visibilityChange;if(typeof document!=='undefined'&&typeof document.addEventListener!=='undefined'){if(typeof document['hidden']!=='undefined'){// Opera 12.10 and Firefox 18 and later support\nvisibilityChange='visibilitychange';hidden='hidden';}else if(typeof document['mozHidden']!=='undefined'){visibilityChange='mozvisibilitychange';hidden='mozHidden';}else if(typeof document['msHidden']!=='undefined'){visibilityChange='msvisibilitychange';hidden='msHidden';}else if(typeof document['webkitHidden']!=='undefined'){visibilityChange='webkitvisibilitychange';hidden='webkitHidden';}}// Initially, we always assume we are visible. This ensures that in browsers\n// without page visibility support or in cases where we are never visible\n// (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n// reconnects\nthis.visible_=true;if(visibilityChange){document.addEventListener(visibilityChange,()=>{const visible=!document[hidden];if(visible!==this.visible_){this.visible_=visible;this.trigger('visible',visible);}},false);}}static getInstance(){return new VisibilityMonitor();}getInitialEvent(eventType){assert(eventType==='visible','Unknown event type: '+eventType);return[this.visible_];}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const RECONNECT_MIN_DELAY=1000;const RECONNECT_MAX_DELAY_DEFAULT=60*5*1000;// 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT=3*1000;const RECONNECT_MAX_DELAY_FOR_ADMINS=30*1000;// 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER=1.3;const RECONNECT_DELAY_RESET_TIMEOUT=30000;// Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON='server_kill';// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD=3;/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */class PersistentConnection extends ServerActions{/**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */constructor(repoInfo_,applicationId_,onDataUpdate_,onConnectStatus_,onServerInfoUpdate_,authTokenProvider_,appCheckTokenProvider_,authOverride_){super();this.repoInfo_=repoInfo_;this.applicationId_=applicationId_;this.onDataUpdate_=onDataUpdate_;this.onConnectStatus_=onConnectStatus_;this.onServerInfoUpdate_=onServerInfoUpdate_;this.authTokenProvider_=authTokenProvider_;this.appCheckTokenProvider_=appCheckTokenProvider_;this.authOverride_=authOverride_;// Used for diagnostic logging.\nthis.id=PersistentConnection.nextPersistentConnectionId_++;this.log_=logWrapper('p:'+this.id+':');this.interruptReasons_={};this.listens=new Map();this.outstandingPuts_=[];this.outstandingGets_=[];this.outstandingPutCount_=0;this.outstandingGetCount_=0;this.onDisconnectRequestQueue_=[];this.connected_=false;this.reconnectDelay_=RECONNECT_MIN_DELAY;this.maxReconnectDelay_=RECONNECT_MAX_DELAY_DEFAULT;this.securityDebugCallback_=null;this.lastSessionId=null;this.establishConnectionTimer_=null;this.visible_=false;// Before we get connected, we keep a queue of pending messages to send.\nthis.requestCBHash_={};this.requestNumber_=0;this.realtime_=null;this.authToken_=null;this.appCheckToken_=null;this.forceTokenRefresh_=false;this.invalidAuthTokenCount_=0;this.invalidAppCheckTokenCount_=0;this.firstConnection_=true;this.lastConnectionAttemptTime_=null;this.lastConnectionEstablishedTime_=null;if(authOverride_&&!isNodeSdk()){throw new Error('Auth override specified in options, but not supported on non Node.js platforms');}VisibilityMonitor.getInstance().on('visible',this.onVisible_,this);if(repoInfo_.host.indexOf('fblocal')===-1){OnlineMonitor.getInstance().on('online',this.onOnline_,this);}}sendRequest(action,body,onResponse){const curReqNum=++this.requestNumber_;const msg={r:curReqNum,a:action,b:body};this.log_(stringify(msg));assert(this.connected_,\"sendRequest call when we're not connected not allowed.\");this.realtime_.sendRequest(msg);if(onResponse){this.requestCBHash_[curReqNum]=onResponse;}}get(query){this.initConnection_();const deferred=new Deferred();const request={p:query._path.toString(),q:query._queryObject};const outstandingGet={action:'g',request,onComplete:message=>{const payload=message['d'];if(message['s']==='ok'){this.onDataUpdate_(request['p'],payload,/*isMerge*/false,/*tag*/null);deferred.resolve(payload);}else{deferred.reject(payload);}}};this.outstandingGets_.push(outstandingGet);this.outstandingGetCount_++;const index=this.outstandingGets_.length-1;if(!this.connected_){setTimeout(()=>{const get=this.outstandingGets_[index];if(get===undefined||outstandingGet!==get){return;}delete this.outstandingGets_[index];this.outstandingGetCount_--;if(this.outstandingGetCount_===0){this.outstandingGets_=[];}this.log_('get '+index+' timed out on connection');deferred.reject(new Error('Client is offline.'));},GET_CONNECT_TIMEOUT);}if(this.connected_){this.sendGet_(index);}return deferred.promise;}listen(query,currentHashFn,tag,onComplete){this.initConnection_();const queryId=query._queryIdentifier;const pathString=query._path.toString();this.log_('Listen called for '+pathString+' '+queryId);if(!this.listens.has(pathString)){this.listens.set(pathString,new Map());}assert(query._queryParams.isDefault()||!query._queryParams.loadsAllData(),'listen() called for non-default but complete query');assert(!this.listens.get(pathString).has(queryId),'listen() called twice for same path/queryId.');const listenSpec={onComplete,hashFn:currentHashFn,query,tag};this.listens.get(pathString).set(queryId,listenSpec);if(this.connected_){this.sendListen_(listenSpec);}}sendGet_(index){const get=this.outstandingGets_[index];this.sendRequest('g',get.request,message=>{delete this.outstandingGets_[index];this.outstandingGetCount_--;if(this.outstandingGetCount_===0){this.outstandingGets_=[];}if(get.onComplete){get.onComplete(message);}});}sendListen_(listenSpec){const query=listenSpec.query;const pathString=query._path.toString();const queryId=query._queryIdentifier;this.log_('Listen on '+pathString+' for '+queryId);const req={/*path*/p:pathString};const action='q';// Only bother to send query if it's non-default.\nif(listenSpec.tag){req['q']=query._queryObject;req['t']=listenSpec.tag;}req[/*hash*/'h']=listenSpec.hashFn();this.sendRequest(action,req,message=>{const payload=message[/*data*/'d'];const status=message[/*status*/'s'];// print warnings in any case...\nPersistentConnection.warnOnListenWarnings_(payload,query);const currentListenSpec=this.listens.get(pathString)&&this.listens.get(pathString).get(queryId);// only trigger actions if the listen hasn't been removed and readded\nif(currentListenSpec===listenSpec){this.log_('listen response',message);if(status!=='ok'){this.removeListen_(pathString,queryId);}if(listenSpec.onComplete){listenSpec.onComplete(status,payload);}}});}static warnOnListenWarnings_(payload,query){if(payload&&typeof payload==='object'&&contains(payload,'w')){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst warnings=safeGet(payload,'w');if(Array.isArray(warnings)&&~warnings.indexOf('no_index')){const indexSpec='\".indexOn\": \"'+query._queryParams.getIndex().toString()+'\"';const indexPath=query._path.toString();warn(`Using an unspecified index. Your data will be downloaded and `+`filtered on the client. Consider adding ${indexSpec} at `+`${indexPath} to your security rules for better performance.`);}}}refreshAuthToken(token){this.authToken_=token;this.log_('Auth token refreshed');if(this.authToken_){this.tryAuth();}else{//If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n//the credential so we dont become authenticated next time we connect.\nif(this.connected_){this.sendRequest('unauth',{},()=>{});}}this.reduceReconnectDelayIfAdminCredential_(token);}reduceReconnectDelayIfAdminCredential_(credential){// NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n// Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\nconst isFirebaseSecret=credential&&credential.length===40;if(isFirebaseSecret||isAdmin(credential)){this.log_('Admin auth credential detected.  Reducing max reconnect time.');this.maxReconnectDelay_=RECONNECT_MAX_DELAY_FOR_ADMINS;}}refreshAppCheckToken(token){this.appCheckToken_=token;this.log_('App check token refreshed');if(this.appCheckToken_){this.tryAppCheck();}else{//If we're connected we want to let the server know to unauthenticate us.\n//If we're not connected, simply delete the credential so we dont become\n// authenticated next time we connect.\nif(this.connected_){this.sendRequest('unappeck',{},()=>{});}}}/**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */tryAuth(){if(this.connected_&&this.authToken_){const token=this.authToken_;const authMethod=isValidFormat(token)?'auth':'gauth';const requestData={cred:token};if(this.authOverride_===null){requestData['noauth']=true;}else if(typeof this.authOverride_==='object'){requestData['authvar']=this.authOverride_;}this.sendRequest(authMethod,requestData,res=>{const status=res[/*status*/'s'];const data=res[/*data*/'d']||'error';if(this.authToken_===token){if(status==='ok'){this.invalidAuthTokenCount_=0;}else{// Triggers reconnect and force refresh for auth token\nthis.onAuthRevoked_(status,data);}}});}}/**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */tryAppCheck(){if(this.connected_&&this.appCheckToken_){this.sendRequest('appcheck',{'token':this.appCheckToken_},res=>{const status=res[/*status*/'s'];const data=res[/*data*/'d']||'error';if(status==='ok'){this.invalidAppCheckTokenCount_=0;}else{this.onAppCheckRevoked_(status,data);}});}}/**\r\n     * @inheritDoc\r\n     */unlisten(query,tag){const pathString=query._path.toString();const queryId=query._queryIdentifier;this.log_('Unlisten called for '+pathString+' '+queryId);assert(query._queryParams.isDefault()||!query._queryParams.loadsAllData(),'unlisten() called for non-default but complete query');const listen=this.removeListen_(pathString,queryId);if(listen&&this.connected_){this.sendUnlisten_(pathString,queryId,query._queryObject,tag);}}sendUnlisten_(pathString,queryId,queryObj,tag){this.log_('Unlisten on '+pathString+' for '+queryId);const req={/*path*/p:pathString};const action='n';// Only bother sending queryId if it's non-default.\nif(tag){req['q']=queryObj;req['t']=tag;}this.sendRequest(action,req);}onDisconnectPut(pathString,data,onComplete){this.initConnection_();if(this.connected_){this.sendOnDisconnect_('o',pathString,data,onComplete);}else{this.onDisconnectRequestQueue_.push({pathString,action:'o',data,onComplete});}}onDisconnectMerge(pathString,data,onComplete){this.initConnection_();if(this.connected_){this.sendOnDisconnect_('om',pathString,data,onComplete);}else{this.onDisconnectRequestQueue_.push({pathString,action:'om',data,onComplete});}}onDisconnectCancel(pathString,onComplete){this.initConnection_();if(this.connected_){this.sendOnDisconnect_('oc',pathString,null,onComplete);}else{this.onDisconnectRequestQueue_.push({pathString,action:'oc',data:null,onComplete});}}sendOnDisconnect_(action,pathString,data,onComplete){const request={/*path*/p:pathString,/*data*/d:data};this.log_('onDisconnect '+action,request);this.sendRequest(action,request,response=>{if(onComplete){setTimeout(()=>{onComplete(response[/*status*/'s'],response[/* data */'d']);},Math.floor(0));}});}put(pathString,data,onComplete,hash){this.putInternal('p',pathString,data,onComplete,hash);}merge(pathString,data,onComplete,hash){this.putInternal('m',pathString,data,onComplete,hash);}putInternal(action,pathString,data,onComplete,hash){this.initConnection_();const request={/*path*/p:pathString,/*data*/d:data};if(hash!==undefined){request[/*hash*/'h']=hash;}// TODO: Only keep track of the most recent put for a given path?\nthis.outstandingPuts_.push({action,request,onComplete});this.outstandingPutCount_++;const index=this.outstandingPuts_.length-1;if(this.connected_){this.sendPut_(index);}else{this.log_('Buffering put: '+pathString);}}sendPut_(index){const action=this.outstandingPuts_[index].action;const request=this.outstandingPuts_[index].request;const onComplete=this.outstandingPuts_[index].onComplete;this.outstandingPuts_[index].queued=this.connected_;this.sendRequest(action,request,message=>{this.log_(action+' response',message);delete this.outstandingPuts_[index];this.outstandingPutCount_--;// Clean up array occasionally.\nif(this.outstandingPutCount_===0){this.outstandingPuts_=[];}if(onComplete){onComplete(message[/*status*/'s'],message[/* data */'d']);}});}reportStats(stats){// If we're not connected, we just drop the stats.\nif(this.connected_){const request={/*counters*/c:stats};this.log_('reportStats',request);this.sendRequest(/*stats*/'s',request,result=>{const status=result[/*status*/'s'];if(status!=='ok'){const errorReason=result[/* data */'d'];this.log_('reportStats','Error sending stats: '+errorReason);}});}}onDataMessage_(message){if('r'in message){// this is a response\nthis.log_('from server: '+stringify(message));const reqNum=message['r'];const onResponse=this.requestCBHash_[reqNum];if(onResponse){delete this.requestCBHash_[reqNum];onResponse(message[/*body*/'b']);}}else if('error'in message){throw'A server-side error has occurred: '+message['error'];}else if('a'in message){// a and b are action and body, respectively\nthis.onDataPush_(message['a'],message['b']);}}onDataPush_(action,body){this.log_('handleServerMessage',action,body);if(action==='d'){this.onDataUpdate_(body[/*path*/'p'],body[/*data*/'d'],/*isMerge*/false,body['t']);}else if(action==='m'){this.onDataUpdate_(body[/*path*/'p'],body[/*data*/'d'],/*isMerge=*/true,body['t']);}else if(action==='c'){this.onListenRevoked_(body[/*path*/'p'],body[/*query*/'q']);}else if(action==='ac'){this.onAuthRevoked_(body[/*status code*/'s'],body[/* explanation */'d']);}else if(action==='apc'){this.onAppCheckRevoked_(body[/*status code*/'s'],body[/* explanation */'d']);}else if(action==='sd'){this.onSecurityDebugPacket_(body);}else{error('Unrecognized action received from server: '+stringify(action)+'\\nAre you using the latest client?');}}onReady_(timestamp,sessionId){this.log_('connection ready');this.connected_=true;this.lastConnectionEstablishedTime_=new Date().getTime();this.handleTimestamp_(timestamp);this.lastSessionId=sessionId;if(this.firstConnection_){this.sendConnectStats_();}this.restoreState_();this.firstConnection_=false;this.onConnectStatus_(true);}scheduleConnect_(timeout){assert(!this.realtime_,\"Scheduling a connect when we're already connected/ing?\");if(this.establishConnectionTimer_){clearTimeout(this.establishConnectionTimer_);}// NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n// Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\nthis.establishConnectionTimer_=setTimeout(()=>{this.establishConnectionTimer_=null;this.establishConnection_();// eslint-disable-next-line @typescript-eslint/no-explicit-any\n},Math.floor(timeout));}initConnection_(){if(!this.realtime_&&this.firstConnection_){this.scheduleConnect_(0);}}onVisible_(visible){// NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\nif(visible&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_){this.log_('Window became visible.  Reducing delay.');this.reconnectDelay_=RECONNECT_MIN_DELAY;if(!this.realtime_){this.scheduleConnect_(0);}}this.visible_=visible;}onOnline_(online){if(online){this.log_('Browser went online.');this.reconnectDelay_=RECONNECT_MIN_DELAY;if(!this.realtime_){this.scheduleConnect_(0);}}else{this.log_('Browser went offline.  Killing connection.');if(this.realtime_){this.realtime_.close();}}}onRealtimeDisconnect_(){this.log_('data client disconnected');this.connected_=false;this.realtime_=null;// Since we don't know if our sent transactions succeeded or not, we need to cancel them.\nthis.cancelSentTransactions_();// Clear out the pending requests.\nthis.requestCBHash_={};if(this.shouldReconnect_()){if(!this.visible_){this.log_(\"Window isn't visible.  Delaying reconnect.\");this.reconnectDelay_=this.maxReconnectDelay_;this.lastConnectionAttemptTime_=new Date().getTime();}else if(this.lastConnectionEstablishedTime_){// If we've been connected long enough, reset reconnect delay to minimum.\nconst timeSinceLastConnectSucceeded=new Date().getTime()-this.lastConnectionEstablishedTime_;if(timeSinceLastConnectSucceeded>RECONNECT_DELAY_RESET_TIMEOUT){this.reconnectDelay_=RECONNECT_MIN_DELAY;}this.lastConnectionEstablishedTime_=null;}const timeSinceLastConnectAttempt=new Date().getTime()-this.lastConnectionAttemptTime_;let reconnectDelay=Math.max(0,this.reconnectDelay_-timeSinceLastConnectAttempt);reconnectDelay=Math.random()*reconnectDelay;this.log_('Trying to reconnect in '+reconnectDelay+'ms');this.scheduleConnect_(reconnectDelay);// Adjust reconnect delay for next time.\nthis.reconnectDelay_=Math.min(this.maxReconnectDelay_,this.reconnectDelay_*RECONNECT_DELAY_MULTIPLIER);}this.onConnectStatus_(false);}async establishConnection_(){if(this.shouldReconnect_()){this.log_('Making a connection attempt');this.lastConnectionAttemptTime_=new Date().getTime();this.lastConnectionEstablishedTime_=null;const onDataMessage=this.onDataMessage_.bind(this);const onReady=this.onReady_.bind(this);const onDisconnect=this.onRealtimeDisconnect_.bind(this);const connId=this.id+':'+PersistentConnection.nextConnectionId_++;const lastSessionId=this.lastSessionId;let canceled=false;let connection=null;const closeFn=function(){if(connection){connection.close();}else{canceled=true;onDisconnect();}};const sendRequestFn=function(msg){assert(connection,\"sendRequest call when we're not connected not allowed.\");connection.sendRequest(msg);};this.realtime_={close:closeFn,sendRequest:sendRequestFn};const forceRefresh=this.forceTokenRefresh_;this.forceTokenRefresh_=false;try{// First fetch auth and app check token, and establish connection after\n// fetching the token was successful\nconst[authToken,appCheckToken]=await Promise.all([this.authTokenProvider_.getToken(forceRefresh),this.appCheckTokenProvider_.getToken(forceRefresh)]);if(!canceled){log('getToken() completed. Creating connection.');this.authToken_=authToken&&authToken.accessToken;this.appCheckToken_=appCheckToken&&appCheckToken.token;connection=new Connection(connId,this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,onDataMessage,onReady,onDisconnect,/* onKill= */reason=>{warn(reason+' ('+this.repoInfo_.toString()+')');this.interrupt(SERVER_KILL_INTERRUPT_REASON);},lastSessionId);}else{log('getToken() completed but was canceled');}}catch(error){this.log_('Failed to get token: '+error);if(!canceled){if(this.repoInfo_.nodeAdmin){// This may be a critical error for the Admin Node.js SDK, so log a warning.\n// But getToken() may also just have temporarily failed, so we still want to\n// continue retrying.\nwarn(error);}closeFn();}}}}interrupt(reason){log('Interrupting connection for reason: '+reason);this.interruptReasons_[reason]=true;if(this.realtime_){this.realtime_.close();}else{if(this.establishConnectionTimer_){clearTimeout(this.establishConnectionTimer_);this.establishConnectionTimer_=null;}if(this.connected_){this.onRealtimeDisconnect_();}}}resume(reason){log('Resuming connection for reason: '+reason);delete this.interruptReasons_[reason];if(isEmpty(this.interruptReasons_)){this.reconnectDelay_=RECONNECT_MIN_DELAY;if(!this.realtime_){this.scheduleConnect_(0);}}}handleTimestamp_(timestamp){const delta=timestamp-new Date().getTime();this.onServerInfoUpdate_({serverTimeOffset:delta});}cancelSentTransactions_(){for(let i=0;i<this.outstandingPuts_.length;i++){const put=this.outstandingPuts_[i];if(put&&/*hash*/'h'in put.request&&put.queued){if(put.onComplete){put.onComplete('disconnect');}delete this.outstandingPuts_[i];this.outstandingPutCount_--;}}// Clean up array occasionally.\nif(this.outstandingPutCount_===0){this.outstandingPuts_=[];}}onListenRevoked_(pathString,query){// Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\nlet queryId;if(!query){queryId='default';}else{queryId=query.map(q=>ObjectToUniqueKey(q)).join('$');}const listen=this.removeListen_(pathString,queryId);if(listen&&listen.onComplete){listen.onComplete('permission_denied');}}removeListen_(pathString,queryId){const normalizedPathString=new Path(pathString).toString();// normalize path.\nlet listen;if(this.listens.has(normalizedPathString)){const map=this.listens.get(normalizedPathString);listen=map.get(queryId);map.delete(queryId);if(map.size===0){this.listens.delete(normalizedPathString);}}else{// all listens for this path has already been removed\nlisten=undefined;}return listen;}onAuthRevoked_(statusCode,explanation){log('Auth token revoked: '+statusCode+'/'+explanation);this.authToken_=null;this.forceTokenRefresh_=true;this.realtime_.close();if(statusCode==='invalid_token'||statusCode==='permission_denied'){// We'll wait a couple times before logging the warning / increasing the\n// retry period since oauth tokens will report as \"invalid\" if they're\n// just expired. Plus there may be transient issues that resolve themselves.\nthis.invalidAuthTokenCount_++;if(this.invalidAuthTokenCount_>=INVALID_TOKEN_THRESHOLD){// Set a long reconnect delay because recovery is unlikely\nthis.reconnectDelay_=RECONNECT_MAX_DELAY_FOR_ADMINS;// Notify the auth token provider that the token is invalid, which will log\n// a warning\nthis.authTokenProvider_.notifyForInvalidToken();}}}onAppCheckRevoked_(statusCode,explanation){log('App check token revoked: '+statusCode+'/'+explanation);this.appCheckToken_=null;this.forceTokenRefresh_=true;// Note: We don't close the connection as the developer may not have\n// enforcement enabled. The backend closes connections with enforcements.\nif(statusCode==='invalid_token'||statusCode==='permission_denied'){// We'll wait a couple times before logging the warning / increasing the\n// retry period since oauth tokens will report as \"invalid\" if they're\n// just expired. Plus there may be transient issues that resolve themselves.\nthis.invalidAppCheckTokenCount_++;if(this.invalidAppCheckTokenCount_>=INVALID_TOKEN_THRESHOLD){this.appCheckTokenProvider_.notifyForInvalidToken();}}}onSecurityDebugPacket_(body){if(this.securityDebugCallback_){this.securityDebugCallback_(body);}else{if('msg'in body){console.log('FIREBASE: '+body['msg'].replace('\\n','\\nFIREBASE: '));}}}restoreState_(){//Re-authenticate ourselves if we have a credential stored.\nthis.tryAuth();this.tryAppCheck();// Puts depend on having received the corresponding data update from the server before they complete, so we must\n// make sure to send listens before puts.\nfor(const queries of this.listens.values()){for(const listenSpec of queries.values()){this.sendListen_(listenSpec);}}for(let i=0;i<this.outstandingPuts_.length;i++){if(this.outstandingPuts_[i]){this.sendPut_(i);}}while(this.onDisconnectRequestQueue_.length){const request=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(request.action,request.pathString,request.data,request.onComplete);}for(let i=0;i<this.outstandingGets_.length;i++){if(this.outstandingGets_[i]){this.sendGet_(i);}}}/**\r\n     * Sends client stats for first connection\r\n     */sendConnectStats_(){const stats={};let clientName='js';if(isNodeSdk()){if(this.repoInfo_.nodeAdmin){clientName='admin_node';}else{clientName='node';}}stats['sdk.'+clientName+'.'+SDK_VERSION.replace(/\\./g,'-')]=1;if(isMobileCordova()){stats['framework.cordova']=1;}else if(isReactNative()){stats['framework.reactnative']=1;}this.reportStats(stats);}shouldReconnect_(){const online=OnlineMonitor.getInstance().currentlyOnline();return isEmpty(this.interruptReasons_)&&online;}}PersistentConnection.nextPersistentConnectionId_=0;/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */PersistentConnection.nextConnectionId_=0;/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class NamedNode{constructor(name,node){this.name=name;this.node=node;}static Wrap(name,node){return new NamedNode(name,node);}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class Index{/**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */getCompare(){return this.compare.bind(this);}/**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */indexedValueChanged(oldNode,newNode){const oldWrapped=new NamedNode(MIN_NAME,oldNode);const newWrapped=new NamedNode(MIN_NAME,newNode);return this.compare(oldWrapped,newWrapped)!==0;}/**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */minPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nreturn NamedNode.MIN;}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let __EMPTY_NODE;class KeyIndex extends Index{static get __EMPTY_NODE(){return __EMPTY_NODE;}static set __EMPTY_NODE(val){__EMPTY_NODE=val;}compare(a,b){return nameCompare(a.name,b.name);}isDefinedOn(node){// We could probably return true here (since every node has a key), but it's never called\n// so just leaving unimplemented for now.\nthrow assertionError('KeyIndex.isDefinedOn not expected to be called.');}indexedValueChanged(oldNode,newNode){return false;// The key for a node never changes.\n}minPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nreturn NamedNode.MIN;}maxPost(){// TODO: This should really be created once and cached in a static property, but\n// NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\nreturn new NamedNode(MAX_NAME,__EMPTY_NODE);}makePost(indexValue,name){assert(typeof indexValue==='string','KeyIndex indexValue must always be a string.');// We just use empty node, but it'll never be compared, since our comparator only looks at name.\nreturn new NamedNode(indexValue,__EMPTY_NODE);}/**\r\n     * @returns String representation for inclusion in a query spec\r\n     */toString(){return'.key';}}const KEY_INDEX=new KeyIndex();/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * An iterator over an LLRBNode.\r\n */class SortedMapIterator{/**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */constructor(node,startKey,comparator,isReverse_,resultGenerator_=null){this.isReverse_=isReverse_;this.resultGenerator_=resultGenerator_;this.nodeStack_=[];let cmp=1;while(!node.isEmpty()){node=node;cmp=startKey?comparator(node.key,startKey):1;// flip the comparison if we're going in reverse\nif(isReverse_){cmp*=-1;}if(cmp<0){// This node is less than our start key. ignore it\nif(this.isReverse_){node=node.left;}else{node=node.right;}}else if(cmp===0){// This node is exactly equal to our start key. Push it on the stack, but stop iterating;\nthis.nodeStack_.push(node);break;}else{// This node is greater than our start key, add it to the stack and move to the next one\nthis.nodeStack_.push(node);if(this.isReverse_){node=node.right;}else{node=node.left;}}}}getNext(){if(this.nodeStack_.length===0){return null;}let node=this.nodeStack_.pop();let result;if(this.resultGenerator_){result=this.resultGenerator_(node.key,node.value);}else{result={key:node.key,value:node.value};}if(this.isReverse_){node=node.left;while(!node.isEmpty()){this.nodeStack_.push(node);node=node.right;}}else{node=node.right;while(!node.isEmpty()){this.nodeStack_.push(node);node=node.left;}}return result;}hasNext(){return this.nodeStack_.length>0;}peek(){if(this.nodeStack_.length===0){return null;}const node=this.nodeStack_[this.nodeStack_.length-1];if(this.resultGenerator_){return this.resultGenerator_(node.key,node.value);}else{return{key:node.key,value:node.value};}}}/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */class LLRBNode{/**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */constructor(key,value,color,left,right){this.key=key;this.value=value;this.color=color!=null?color:LLRBNode.RED;this.left=left!=null?left:SortedMap.EMPTY_NODE;this.right=right!=null?right:SortedMap.EMPTY_NODE;}/**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */copy(key,value,color,left,right){return new LLRBNode(key!=null?key:this.key,value!=null?value:this.value,color!=null?color:this.color,left!=null?left:this.left,right!=null?right:this.right);}/**\r\n     * @returns The total number of nodes in the tree.\r\n     */count(){return this.left.count()+1+this.right.count();}/**\r\n     * @returns True if the tree is empty.\r\n     */isEmpty(){return false;}/**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */inorderTraversal(action){return this.left.inorderTraversal(action)||!!action(this.key,this.value)||this.right.inorderTraversal(action);}/**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */reverseTraversal(action){return this.right.reverseTraversal(action)||action(this.key,this.value)||this.left.reverseTraversal(action);}/**\r\n     * @returns The minimum node in the tree.\r\n     */min_(){if(this.left.isEmpty()){return this;}else{return this.left.min_();}}/**\r\n     * @returns The maximum key in the tree.\r\n     */minKey(){return this.min_().key;}/**\r\n     * @returns The maximum key in the tree.\r\n     */maxKey(){if(this.right.isEmpty()){return this.key;}else{return this.right.maxKey();}}/**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */insert(key,value,comparator){let n=this;const cmp=comparator(key,n.key);if(cmp<0){n=n.copy(null,null,null,n.left.insert(key,value,comparator),null);}else if(cmp===0){n=n.copy(null,value,null,null,null);}else{n=n.copy(null,null,null,null,n.right.insert(key,value,comparator));}return n.fixUp_();}/**\r\n     * @returns New tree, with the minimum key removed.\r\n     */removeMin_(){if(this.left.isEmpty()){return SortedMap.EMPTY_NODE;}let n=this;if(!n.left.isRed_()&&!n.left.left.isRed_()){n=n.moveRedLeft_();}n=n.copy(null,null,null,n.left.removeMin_(),null);return n.fixUp_();}/**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */remove(key,comparator){let n,smallest;n=this;if(comparator(key,n.key)<0){if(!n.left.isEmpty()&&!n.left.isRed_()&&!n.left.left.isRed_()){n=n.moveRedLeft_();}n=n.copy(null,null,null,n.left.remove(key,comparator),null);}else{if(n.left.isRed_()){n=n.rotateRight_();}if(!n.right.isEmpty()&&!n.right.isRed_()&&!n.right.left.isRed_()){n=n.moveRedRight_();}if(comparator(key,n.key)===0){if(n.right.isEmpty()){return SortedMap.EMPTY_NODE;}else{smallest=n.right.min_();n=n.copy(smallest.key,smallest.value,null,null,n.right.removeMin_());}}n=n.copy(null,null,null,null,n.right.remove(key,comparator));}return n.fixUp_();}/**\r\n     * @returns Whether this is a RED node.\r\n     */isRed_(){return this.color;}/**\r\n     * @returns New tree after performing any needed rotations.\r\n     */fixUp_(){let n=this;if(n.right.isRed_()&&!n.left.isRed_()){n=n.rotateLeft_();}if(n.left.isRed_()&&n.left.left.isRed_()){n=n.rotateRight_();}if(n.left.isRed_()&&n.right.isRed_()){n=n.colorFlip_();}return n;}/**\r\n     * @returns New tree, after moveRedLeft.\r\n     */moveRedLeft_(){let n=this.colorFlip_();if(n.right.left.isRed_()){n=n.copy(null,null,null,null,n.right.rotateRight_());n=n.rotateLeft_();n=n.colorFlip_();}return n;}/**\r\n     * @returns New tree, after moveRedRight.\r\n     */moveRedRight_(){let n=this.colorFlip_();if(n.left.left.isRed_()){n=n.rotateRight_();n=n.colorFlip_();}return n;}/**\r\n     * @returns New tree, after rotateLeft.\r\n     */rotateLeft_(){const nl=this.copy(null,null,LLRBNode.RED,null,this.right.left);return this.right.copy(null,null,this.color,nl,null);}/**\r\n     * @returns New tree, after rotateRight.\r\n     */rotateRight_(){const nr=this.copy(null,null,LLRBNode.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,nr);}/**\r\n     * @returns Newt ree, after colorFlip.\r\n     */colorFlip_(){const left=this.left.copy(null,null,!this.left.color,null,null);const right=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,left,right);}/**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */checkMaxDepth_(){const blackDepth=this.check_();return Math.pow(2.0,blackDepth)<=this.count()+1;}check_(){if(this.isRed_()&&this.left.isRed_()){throw new Error('Red node has red child('+this.key+','+this.value+')');}if(this.right.isRed_()){throw new Error('Right child of ('+this.key+','+this.value+') is red');}const blackDepth=this.left.check_();if(blackDepth!==this.right.check_()){throw new Error('Black depths differ');}else{return blackDepth+(this.isRed_()?0:1);}}}LLRBNode.RED=true;LLRBNode.BLACK=false;/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */class LLRBEmptyNode{/**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */copy(key,value,color,left,right){return this;}/**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */insert(key,value,comparator){return new LLRBNode(key,value,null);}/**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */remove(key,comparator){return this;}/**\r\n     * @returns The total number of nodes in the tree.\r\n     */count(){return 0;}/**\r\n     * @returns True if the tree is empty.\r\n     */isEmpty(){return true;}/**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */inorderTraversal(action){return false;}/**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */reverseTraversal(action){return false;}minKey(){return null;}maxKey(){return null;}check_(){return 0;}/**\r\n     * @returns Whether this node is red.\r\n     */isRed_(){return false;}}/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */class SortedMap{/**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */constructor(comparator_,root_=SortedMap.EMPTY_NODE){this.comparator_=comparator_;this.root_=root_;}/**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */insert(key,value){return new SortedMap(this.comparator_,this.root_.insert(key,value,this.comparator_).copy(null,null,LLRBNode.BLACK,null,null));}/**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */remove(key){return new SortedMap(this.comparator_,this.root_.remove(key,this.comparator_).copy(null,null,LLRBNode.BLACK,null,null));}/**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */get(key){let cmp;let node=this.root_;while(!node.isEmpty()){cmp=this.comparator_(key,node.key);if(cmp===0){return node.value;}else if(cmp<0){node=node.left;}else if(cmp>0){node=node.right;}}return null;}/**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */getPredecessorKey(key){let cmp,node=this.root_,rightParent=null;while(!node.isEmpty()){cmp=this.comparator_(key,node.key);if(cmp===0){if(!node.left.isEmpty()){node=node.left;while(!node.right.isEmpty()){node=node.right;}return node.key;}else if(rightParent){return rightParent.key;}else{return null;// first item.\n}}else if(cmp<0){node=node.left;}else if(cmp>0){rightParent=node;node=node.right;}}throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');}/**\r\n     * @returns True if the map is empty.\r\n     */isEmpty(){return this.root_.isEmpty();}/**\r\n     * @returns The total number of nodes in the map.\r\n     */count(){return this.root_.count();}/**\r\n     * @returns The minimum key in the map.\r\n     */minKey(){return this.root_.minKey();}/**\r\n     * @returns The maximum key in the map.\r\n     */maxKey(){return this.root_.maxKey();}/**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */inorderTraversal(action){return this.root_.inorderTraversal(action);}/**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */reverseTraversal(action){return this.root_.reverseTraversal(action);}/**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */getIterator(resultGenerator){return new SortedMapIterator(this.root_,null,this.comparator_,false,resultGenerator);}getIteratorFrom(key,resultGenerator){return new SortedMapIterator(this.root_,key,this.comparator_,false,resultGenerator);}getReverseIteratorFrom(key,resultGenerator){return new SortedMapIterator(this.root_,key,this.comparator_,true,resultGenerator);}getReverseIterator(resultGenerator){return new SortedMapIterator(this.root_,null,this.comparator_,true,resultGenerator);}}/**\r\n * Always use the same empty node, to reduce memory.\r\n */SortedMap.EMPTY_NODE=new LLRBEmptyNode();/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */function NAME_ONLY_COMPARATOR(left,right){return nameCompare(left.name,right.name);}function NAME_COMPARATOR(left,right){return nameCompare(left,right);}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let MAX_NODE$2;function setMaxNode$1(val){MAX_NODE$2=val;}const priorityHashText=function(priority){if(typeof priority==='number'){return'number:'+doubleToIEEE754String(priority);}else{return'string:'+priority;}};/**\r\n * Validates that a priority snapshot Node is valid.\r\n */const validatePriorityNode=function(priorityNode){if(priorityNode.isLeafNode()){const val=priorityNode.val();assert(typeof val==='string'||typeof val==='number'||typeof val==='object'&&contains(val,'.sv'),'Priority must be a string or number.');}else{assert(priorityNode===MAX_NODE$2||priorityNode.isEmpty(),'priority of unexpected type.');}// Don't call getPriority() on MAX_NODE to avoid hitting assertion.\nassert(priorityNode===MAX_NODE$2||priorityNode.getPriority().isEmpty(),\"Priority nodes can't have a priority of their own.\");};/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let __childrenNodeConstructor;/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */class LeafNode{/**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */constructor(value_,priorityNode_=LeafNode.__childrenNodeConstructor.EMPTY_NODE){this.value_=value_;this.priorityNode_=priorityNode_;this.lazyHash_=null;assert(this.value_!==undefined&&this.value_!==null,\"LeafNode shouldn't be created with null/undefined value.\");validatePriorityNode(this.priorityNode_);}static set __childrenNodeConstructor(val){__childrenNodeConstructor=val;}static get __childrenNodeConstructor(){return __childrenNodeConstructor;}/** @inheritDoc */isLeafNode(){return true;}/** @inheritDoc */getPriority(){return this.priorityNode_;}/** @inheritDoc */updatePriority(newPriorityNode){return new LeafNode(this.value_,newPriorityNode);}/** @inheritDoc */getImmediateChild(childName){// Hack to treat priority as a regular child\nif(childName==='.priority'){return this.priorityNode_;}else{return LeafNode.__childrenNodeConstructor.EMPTY_NODE;}}/** @inheritDoc */getChild(path){if(pathIsEmpty(path)){return this;}else if(pathGetFront(path)==='.priority'){return this.priorityNode_;}else{return LeafNode.__childrenNodeConstructor.EMPTY_NODE;}}hasChild(){return false;}/** @inheritDoc */getPredecessorChildName(childName,childNode){return null;}/** @inheritDoc */updateImmediateChild(childName,newChildNode){if(childName==='.priority'){return this.updatePriority(newChildNode);}else if(newChildNode.isEmpty()&&childName!=='.priority'){return this;}else{return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName,newChildNode).updatePriority(this.priorityNode_);}}/** @inheritDoc */updateChild(path,newChildNode){const front=pathGetFront(path);if(front===null){return newChildNode;}else if(newChildNode.isEmpty()&&front!=='.priority'){return this;}else{assert(front!=='.priority'||pathGetLength(path)===1,'.priority must be the last token in a path');return this.updateImmediateChild(front,LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path),newChildNode));}}/** @inheritDoc */isEmpty(){return false;}/** @inheritDoc */numChildren(){return 0;}/** @inheritDoc */forEachChild(index,action){return false;}val(exportFormat){if(exportFormat&&!this.getPriority().isEmpty()){return{'.value':this.getValue(),'.priority':this.getPriority().val()};}else{return this.getValue();}}/** @inheritDoc */hash(){if(this.lazyHash_===null){let toHash='';if(!this.priorityNode_.isEmpty()){toHash+='priority:'+priorityHashText(this.priorityNode_.val())+':';}const type=typeof this.value_;toHash+=type+':';if(type==='number'){toHash+=doubleToIEEE754String(this.value_);}else{toHash+=this.value_;}this.lazyHash_=sha1(toHash);}return this.lazyHash_;}/**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */getValue(){return this.value_;}compareTo(other){if(other===LeafNode.__childrenNodeConstructor.EMPTY_NODE){return 1;}else if(other instanceof LeafNode.__childrenNodeConstructor){return-1;}else{assert(other.isLeafNode(),'Unknown node type');return this.compareToLeafNode_(other);}}/**\r\n     * Comparison specifically for two leaf nodes\r\n     */compareToLeafNode_(otherLeaf){const otherLeafType=typeof otherLeaf.value_;const thisLeafType=typeof this.value_;const otherIndex=LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);const thisIndex=LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);assert(otherIndex>=0,'Unknown leaf type: '+otherLeafType);assert(thisIndex>=0,'Unknown leaf type: '+thisLeafType);if(otherIndex===thisIndex){// Same type, compare values\nif(thisLeafType==='object'){// Deferred value nodes are all equal, but we should also never get to this point...\nreturn 0;}else{// Note that this works because true > false, all others are number or string comparisons\nif(this.value_<otherLeaf.value_){return-1;}else if(this.value_===otherLeaf.value_){return 0;}else{return 1;}}}else{return thisIndex-otherIndex;}}withIndex(){return this;}isIndexed(){return true;}equals(other){if(other===this){return true;}else if(other.isLeafNode()){const otherLeaf=other;return this.value_===otherLeaf.value_&&this.priorityNode_.equals(otherLeaf.priorityNode_);}else{return false;}}}/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */LeafNode.VALUE_TYPE_ORDER=['object','boolean','number','string'];/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let nodeFromJSON$1;let MAX_NODE$1;function setNodeFromJSON(val){nodeFromJSON$1=val;}function setMaxNode(val){MAX_NODE$1=val;}class PriorityIndex extends Index{compare(a,b){const aPriority=a.node.getPriority();const bPriority=b.node.getPriority();const indexCmp=aPriority.compareTo(bPriority);if(indexCmp===0){return nameCompare(a.name,b.name);}else{return indexCmp;}}isDefinedOn(node){return!node.getPriority().isEmpty();}indexedValueChanged(oldNode,newNode){return!oldNode.getPriority().equals(newNode.getPriority());}minPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nreturn NamedNode.MIN;}maxPost(){return new NamedNode(MAX_NAME,new LeafNode('[PRIORITY-POST]',MAX_NODE$1));}makePost(indexValue,name){const priorityNode=nodeFromJSON$1(indexValue);return new NamedNode(name,new LeafNode('[PRIORITY-POST]',priorityNode));}/**\r\n     * @returns String representation for inclusion in a query spec\r\n     */toString(){return'.priority';}}const PRIORITY_INDEX=new PriorityIndex();/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const LOG_2=Math.log(2);class Base12Num{constructor(length){const logBase2=num=>// eslint-disable-next-line @typescript-eslint/no-explicit-any\nparseInt(Math.log(num)/LOG_2,10);const bitMask=bits=>parseInt(Array(bits+1).join('1'),2);this.count=logBase2(length+1);this.current_=this.count-1;const mask=bitMask(this.count);this.bits_=length+1&mask;}nextBitIsOne(){//noinspection JSBitwiseOperatorUsage\nconst result=!(this.bits_&0x1<<this.current_);this.current_--;return result;}}/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */const buildChildSet=function(childList,cmp,keyFn,mapSortFn){childList.sort(cmp);const buildBalancedTree=function(low,high){const length=high-low;let namedNode;let key;if(length===0){return null;}else if(length===1){namedNode=childList[low];key=keyFn?keyFn(namedNode):namedNode;return new LLRBNode(key,namedNode.node,LLRBNode.BLACK,null,null);}else{// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst middle=parseInt(length/2,10)+low;const left=buildBalancedTree(low,middle);const right=buildBalancedTree(middle+1,high);namedNode=childList[middle];key=keyFn?keyFn(namedNode):namedNode;return new LLRBNode(key,namedNode.node,LLRBNode.BLACK,left,right);}};const buildFrom12Array=function(base12){let node=null;let root=null;let index=childList.length;const buildPennant=function(chunkSize,color){const low=index-chunkSize;const high=index;index-=chunkSize;const childTree=buildBalancedTree(low+1,high);const namedNode=childList[low];const key=keyFn?keyFn(namedNode):namedNode;attachPennant(new LLRBNode(key,namedNode.node,color,null,childTree));};const attachPennant=function(pennant){if(node){node.left=pennant;node=pennant;}else{root=pennant;node=pennant;}};for(let i=0;i<base12.count;++i){const isOne=base12.nextBitIsOne();// The number of nodes taken in each slice is 2^(arr.length - (i + 1))\nconst chunkSize=Math.pow(2,base12.count-(i+1));if(isOne){buildPennant(chunkSize,LLRBNode.BLACK);}else{// current == 2\nbuildPennant(chunkSize,LLRBNode.BLACK);buildPennant(chunkSize,LLRBNode.RED);}}return root;};const base12=new Base12Num(childList.length);const root=buildFrom12Array(base12);// eslint-disable-next-line @typescript-eslint/no-explicit-any\nreturn new SortedMap(mapSortFn||cmp,root);};/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let _defaultIndexMap;const fallbackObject={};class IndexMap{constructor(indexes_,indexSet_){this.indexes_=indexes_;this.indexSet_=indexSet_;}/**\r\n     * The default IndexMap for nodes without a priority\r\n     */static get Default(){assert(fallbackObject&&PRIORITY_INDEX,'ChildrenNode.ts has not been loaded');_defaultIndexMap=_defaultIndexMap||new IndexMap({'.priority':fallbackObject},{'.priority':PRIORITY_INDEX});return _defaultIndexMap;}get(indexKey){const sortedMap=safeGet(this.indexes_,indexKey);if(!sortedMap){throw new Error('No index defined for '+indexKey);}if(sortedMap instanceof SortedMap){return sortedMap;}else{// The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n// regular child map\nreturn null;}}hasIndex(indexDefinition){return contains(this.indexSet_,indexDefinition.toString());}addIndex(indexDefinition,existingChildren){assert(indexDefinition!==KEY_INDEX,\"KeyIndex always exists and isn't meant to be added to the IndexMap.\");const childList=[];let sawIndexedValue=false;const iter=existingChildren.getIterator(NamedNode.Wrap);let next=iter.getNext();while(next){sawIndexedValue=sawIndexedValue||indexDefinition.isDefinedOn(next.node);childList.push(next);next=iter.getNext();}let newIndex;if(sawIndexedValue){newIndex=buildChildSet(childList,indexDefinition.getCompare());}else{newIndex=fallbackObject;}const indexName=indexDefinition.toString();const newIndexSet=Object.assign({},this.indexSet_);newIndexSet[indexName]=indexDefinition;const newIndexes=Object.assign({},this.indexes_);newIndexes[indexName]=newIndex;return new IndexMap(newIndexes,newIndexSet);}/**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */addToIndexes(namedNode,existingChildren){const newIndexes=map(this.indexes_,(indexedChildren,indexName)=>{const index=safeGet(this.indexSet_,indexName);assert(index,'Missing index implementation for '+indexName);if(indexedChildren===fallbackObject){// Check to see if we need to index everything\nif(index.isDefinedOn(namedNode.node)){// We need to build this index\nconst childList=[];const iter=existingChildren.getIterator(NamedNode.Wrap);let next=iter.getNext();while(next){if(next.name!==namedNode.name){childList.push(next);}next=iter.getNext();}childList.push(namedNode);return buildChildSet(childList,index.getCompare());}else{// No change, this remains a fallback\nreturn fallbackObject;}}else{const existingSnap=existingChildren.get(namedNode.name);let newChildren=indexedChildren;if(existingSnap){newChildren=newChildren.remove(new NamedNode(namedNode.name,existingSnap));}return newChildren.insert(namedNode,namedNode.node);}});return new IndexMap(newIndexes,this.indexSet_);}/**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */removeFromIndexes(namedNode,existingChildren){const newIndexes=map(this.indexes_,indexedChildren=>{if(indexedChildren===fallbackObject){// This is the fallback. Just return it, nothing to do in this case\nreturn indexedChildren;}else{const existingSnap=existingChildren.get(namedNode.name);if(existingSnap){return indexedChildren.remove(new NamedNode(namedNode.name,existingSnap));}else{// No record of this child\nreturn indexedChildren;}}});return new IndexMap(newIndexes,this.indexSet_);}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // TODO: For memory savings, don't store priorityNode_ if it's empty.\nlet EMPTY_NODE;/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */class ChildrenNode{/**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */constructor(children_,priorityNode_,indexMap_){this.children_=children_;this.priorityNode_=priorityNode_;this.indexMap_=indexMap_;this.lazyHash_=null;/**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */if(this.priorityNode_){validatePriorityNode(this.priorityNode_);}if(this.children_.isEmpty()){assert(!this.priorityNode_||this.priorityNode_.isEmpty(),'An empty node cannot have a priority');}}static get EMPTY_NODE(){return EMPTY_NODE||(EMPTY_NODE=new ChildrenNode(new SortedMap(NAME_COMPARATOR),null,IndexMap.Default));}/** @inheritDoc */isLeafNode(){return false;}/** @inheritDoc */getPriority(){return this.priorityNode_||EMPTY_NODE;}/** @inheritDoc */updatePriority(newPriorityNode){if(this.children_.isEmpty()){// Don't allow priorities on empty nodes\nreturn this;}else{return new ChildrenNode(this.children_,newPriorityNode,this.indexMap_);}}/** @inheritDoc */getImmediateChild(childName){// Hack to treat priority as a regular child\nif(childName==='.priority'){return this.getPriority();}else{const child=this.children_.get(childName);return child===null?EMPTY_NODE:child;}}/** @inheritDoc */getChild(path){const front=pathGetFront(path);if(front===null){return this;}return this.getImmediateChild(front).getChild(pathPopFront(path));}/** @inheritDoc */hasChild(childName){return this.children_.get(childName)!==null;}/** @inheritDoc */updateImmediateChild(childName,newChildNode){assert(newChildNode,'We should always be passing snapshot nodes');if(childName==='.priority'){return this.updatePriority(newChildNode);}else{const namedNode=new NamedNode(childName,newChildNode);let newChildren,newIndexMap;if(newChildNode.isEmpty()){newChildren=this.children_.remove(childName);newIndexMap=this.indexMap_.removeFromIndexes(namedNode,this.children_);}else{newChildren=this.children_.insert(childName,newChildNode);newIndexMap=this.indexMap_.addToIndexes(namedNode,this.children_);}const newPriority=newChildren.isEmpty()?EMPTY_NODE:this.priorityNode_;return new ChildrenNode(newChildren,newPriority,newIndexMap);}}/** @inheritDoc */updateChild(path,newChildNode){const front=pathGetFront(path);if(front===null){return newChildNode;}else{assert(pathGetFront(path)!=='.priority'||pathGetLength(path)===1,'.priority must be the last token in a path');const newImmediateChild=this.getImmediateChild(front).updateChild(pathPopFront(path),newChildNode);return this.updateImmediateChild(front,newImmediateChild);}}/** @inheritDoc */isEmpty(){return this.children_.isEmpty();}/** @inheritDoc */numChildren(){return this.children_.count();}/** @inheritDoc */val(exportFormat){if(this.isEmpty()){return null;}const obj={};let numKeys=0,maxKey=0,allIntegerKeys=true;this.forEachChild(PRIORITY_INDEX,(key,childNode)=>{obj[key]=childNode.val(exportFormat);numKeys++;if(allIntegerKeys&&ChildrenNode.INTEGER_REGEXP_.test(key)){maxKey=Math.max(maxKey,Number(key));}else{allIntegerKeys=false;}});if(!exportFormat&&allIntegerKeys&&maxKey<2*numKeys){// convert to array.\nconst array=[];// eslint-disable-next-line guard-for-in\nfor(const key in obj){array[key]=obj[key];}return array;}else{if(exportFormat&&!this.getPriority().isEmpty()){obj['.priority']=this.getPriority().val();}return obj;}}/** @inheritDoc */hash(){if(this.lazyHash_===null){let toHash='';if(!this.getPriority().isEmpty()){toHash+='priority:'+priorityHashText(this.getPriority().val())+':';}this.forEachChild(PRIORITY_INDEX,(key,childNode)=>{const childHash=childNode.hash();if(childHash!==''){toHash+=':'+key+':'+childHash;}});this.lazyHash_=toHash===''?'':sha1(toHash);}return this.lazyHash_;}/** @inheritDoc */getPredecessorChildName(childName,childNode,index){const idx=this.resolveIndex_(index);if(idx){const predecessor=idx.getPredecessorKey(new NamedNode(childName,childNode));return predecessor?predecessor.name:null;}else{return this.children_.getPredecessorKey(childName);}}getFirstChildName(indexDefinition){const idx=this.resolveIndex_(indexDefinition);if(idx){const minKey=idx.minKey();return minKey&&minKey.name;}else{return this.children_.minKey();}}getFirstChild(indexDefinition){const minKey=this.getFirstChildName(indexDefinition);if(minKey){return new NamedNode(minKey,this.children_.get(minKey));}else{return null;}}/**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */getLastChildName(indexDefinition){const idx=this.resolveIndex_(indexDefinition);if(idx){const maxKey=idx.maxKey();return maxKey&&maxKey.name;}else{return this.children_.maxKey();}}getLastChild(indexDefinition){const maxKey=this.getLastChildName(indexDefinition);if(maxKey){return new NamedNode(maxKey,this.children_.get(maxKey));}else{return null;}}forEachChild(index,action){const idx=this.resolveIndex_(index);if(idx){return idx.inorderTraversal(wrappedNode=>{return action(wrappedNode.name,wrappedNode.node);});}else{return this.children_.inorderTraversal(action);}}getIterator(indexDefinition){return this.getIteratorFrom(indexDefinition.minPost(),indexDefinition);}getIteratorFrom(startPost,indexDefinition){const idx=this.resolveIndex_(indexDefinition);if(idx){return idx.getIteratorFrom(startPost,key=>key);}else{const iterator=this.children_.getIteratorFrom(startPost.name,NamedNode.Wrap);let next=iterator.peek();while(next!=null&&indexDefinition.compare(next,startPost)<0){iterator.getNext();next=iterator.peek();}return iterator;}}getReverseIterator(indexDefinition){return this.getReverseIteratorFrom(indexDefinition.maxPost(),indexDefinition);}getReverseIteratorFrom(endPost,indexDefinition){const idx=this.resolveIndex_(indexDefinition);if(idx){return idx.getReverseIteratorFrom(endPost,key=>{return key;});}else{const iterator=this.children_.getReverseIteratorFrom(endPost.name,NamedNode.Wrap);let next=iterator.peek();while(next!=null&&indexDefinition.compare(next,endPost)>0){iterator.getNext();next=iterator.peek();}return iterator;}}compareTo(other){if(this.isEmpty()){if(other.isEmpty()){return 0;}else{return-1;}}else if(other.isLeafNode()||other.isEmpty()){return 1;}else if(other===MAX_NODE){return-1;}else{// Must be another node with children.\nreturn 0;}}withIndex(indexDefinition){if(indexDefinition===KEY_INDEX||this.indexMap_.hasIndex(indexDefinition)){return this;}else{const newIndexMap=this.indexMap_.addIndex(indexDefinition,this.children_);return new ChildrenNode(this.children_,this.priorityNode_,newIndexMap);}}isIndexed(index){return index===KEY_INDEX||this.indexMap_.hasIndex(index);}equals(other){if(other===this){return true;}else if(other.isLeafNode()){return false;}else{const otherChildrenNode=other;if(!this.getPriority().equals(otherChildrenNode.getPriority())){return false;}else if(this.children_.count()===otherChildrenNode.children_.count()){const thisIter=this.getIterator(PRIORITY_INDEX);const otherIter=otherChildrenNode.getIterator(PRIORITY_INDEX);let thisCurrent=thisIter.getNext();let otherCurrent=otherIter.getNext();while(thisCurrent&&otherCurrent){if(thisCurrent.name!==otherCurrent.name||!thisCurrent.node.equals(otherCurrent.node)){return false;}thisCurrent=thisIter.getNext();otherCurrent=otherIter.getNext();}return thisCurrent===null&&otherCurrent===null;}else{return false;}}}/**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */resolveIndex_(indexDefinition){if(indexDefinition===KEY_INDEX){return null;}else{return this.indexMap_.get(indexDefinition.toString());}}}ChildrenNode.INTEGER_REGEXP_=/^(0|[1-9]\\d*)$/;class MaxNode extends ChildrenNode{constructor(){super(new SortedMap(NAME_COMPARATOR),ChildrenNode.EMPTY_NODE,IndexMap.Default);}compareTo(other){if(other===this){return 0;}else{return 1;}}equals(other){// Not that we every compare it, but MAX_NODE is only ever equal to itself\nreturn other===this;}getPriority(){return this;}getImmediateChild(childName){return ChildrenNode.EMPTY_NODE;}isEmpty(){return false;}}/**\r\n * Marker that will sort higher than any other snapshot.\r\n */const MAX_NODE=new MaxNode();Object.defineProperties(NamedNode,{MIN:{value:new NamedNode(MIN_NAME,ChildrenNode.EMPTY_NODE)},MAX:{value:new NamedNode(MAX_NAME,MAX_NODE)}});/**\r\n * Reference Extensions\r\n */KeyIndex.__EMPTY_NODE=ChildrenNode.EMPTY_NODE;LeafNode.__childrenNodeConstructor=ChildrenNode;setMaxNode$1(MAX_NODE);setMaxNode(MAX_NODE);/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const USE_HINZE=true;/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */function nodeFromJSON(json,priority=null){if(json===null){return ChildrenNode.EMPTY_NODE;}if(typeof json==='object'&&'.priority'in json){priority=json['.priority'];}assert(priority===null||typeof priority==='string'||typeof priority==='number'||typeof priority==='object'&&'.sv'in priority,'Invalid priority type found: '+typeof priority);if(typeof json==='object'&&'.value'in json&&json['.value']!==null){json=json['.value'];}// Valid leaf nodes include non-objects or server-value wrapper objects\nif(typeof json!=='object'||'.sv'in json){const jsonLeaf=json;return new LeafNode(jsonLeaf,nodeFromJSON(priority));}if(!(json instanceof Array)&&USE_HINZE){const children=[];let childrenHavePriority=false;const hinzeJsonObj=json;each(hinzeJsonObj,(key,child)=>{if(key.substring(0,1)!=='.'){// Ignore metadata nodes\nconst childNode=nodeFromJSON(child);if(!childNode.isEmpty()){childrenHavePriority=childrenHavePriority||!childNode.getPriority().isEmpty();children.push(new NamedNode(key,childNode));}}});if(children.length===0){return ChildrenNode.EMPTY_NODE;}const childSet=buildChildSet(children,NAME_ONLY_COMPARATOR,namedNode=>namedNode.name,NAME_COMPARATOR);if(childrenHavePriority){const sortedChildSet=buildChildSet(children,PRIORITY_INDEX.getCompare());return new ChildrenNode(childSet,nodeFromJSON(priority),new IndexMap({'.priority':sortedChildSet},{'.priority':PRIORITY_INDEX}));}else{return new ChildrenNode(childSet,nodeFromJSON(priority),IndexMap.Default);}}else{let node=ChildrenNode.EMPTY_NODE;each(json,(key,childData)=>{if(contains(json,key)){if(key.substring(0,1)!=='.'){// ignore metadata nodes.\nconst childNode=nodeFromJSON(childData);if(childNode.isLeafNode()||!childNode.isEmpty()){node=node.updateImmediateChild(key,childNode);}}}});return node.updatePriority(nodeFromJSON(priority));}}setNodeFromJSON(nodeFromJSON);/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class PathIndex extends Index{constructor(indexPath_){super();this.indexPath_=indexPath_;assert(!pathIsEmpty(indexPath_)&&pathGetFront(indexPath_)!=='.priority',\"Can't create PathIndex with empty path or .priority key\");}extractChild(snap){return snap.getChild(this.indexPath_);}isDefinedOn(node){return!node.getChild(this.indexPath_).isEmpty();}compare(a,b){const aChild=this.extractChild(a.node);const bChild=this.extractChild(b.node);const indexCmp=aChild.compareTo(bChild);if(indexCmp===0){return nameCompare(a.name,b.name);}else{return indexCmp;}}makePost(indexValue,name){const valueNode=nodeFromJSON(indexValue);const node=ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_,valueNode);return new NamedNode(name,node);}maxPost(){const node=ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_,MAX_NODE);return new NamedNode(MAX_NAME,node);}toString(){return pathSlice(this.indexPath_,0).join('/');}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class ValueIndex extends Index{compare(a,b){const indexCmp=a.node.compareTo(b.node);if(indexCmp===0){return nameCompare(a.name,b.name);}else{return indexCmp;}}isDefinedOn(node){return true;}indexedValueChanged(oldNode,newNode){return!oldNode.equals(newNode);}minPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nreturn NamedNode.MIN;}maxPost(){// eslint-disable-next-line @typescript-eslint/no-explicit-any\nreturn NamedNode.MAX;}makePost(indexValue,name){const valueNode=nodeFromJSON(indexValue);return new NamedNode(name,valueNode);}/**\r\n     * @returns String representation for inclusion in a query spec\r\n     */toString(){return'.value';}}const VALUE_INDEX=new ValueIndex();/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS='-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';const MIN_PUSH_CHAR='-';const MAX_PUSH_CHAR='z';const MAX_KEY_LEN=786;/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */const nextPushId=function(){// Timestamp of last push, used to prevent local collisions if you push twice\n// in one ms.\nlet lastPushTime=0;// We generate 72-bits of randomness which get turned into 12 characters and\n// appended to the timestamp to prevent collisions with other clients. We\n// store the last characters we generated because in the event of a collision,\n// we'll use those same characters except \"incremented\" by one.\nconst lastRandChars=[];return function(now){const duplicateTime=now===lastPushTime;lastPushTime=now;let i;const timeStampChars=new Array(8);for(i=7;i>=0;i--){timeStampChars[i]=PUSH_CHARS.charAt(now%64);// NOTE: Can't use << here because javascript will convert to int and lose\n// the upper bits.\nnow=Math.floor(now/64);}assert(now===0,'Cannot push at time == 0');let id=timeStampChars.join('');if(!duplicateTime){for(i=0;i<12;i++){lastRandChars[i]=Math.floor(Math.random()*64);}}else{// If the timestamp hasn't changed since last push, use the same random\n// number, except incremented by 1.\nfor(i=11;i>=0&&lastRandChars[i]===63;i--){lastRandChars[i]=0;}lastRandChars[i]++;}for(i=0;i<12;i++){id+=PUSH_CHARS.charAt(lastRandChars[i]);}assert(id.length===20,'nextPushId: Length should be 20.');return id;};}();const successor=function(key){if(key===''+INTEGER_32_MAX){// See https://firebase.google.com/docs/database/web/lists-of-data#data-order\nreturn MIN_PUSH_CHAR;}const keyAsInt=tryParseInt(key);if(keyAsInt!=null){return''+(keyAsInt+1);}const next=new Array(key.length);for(let i=0;i<next.length;i++){next[i]=key.charAt(i);}if(next.length<MAX_KEY_LEN){next.push(MIN_PUSH_CHAR);return next.join('');}let i=next.length-1;while(i>=0&&next[i]===MAX_PUSH_CHAR){i--;}// `successor` was called on the largest possible key, so return the\n// MAX_NAME, which sorts larger than all keys.\nif(i===-1){return MAX_NAME;}const source=next[i];const sourcePlusOne=PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source)+1);next[i]=sourcePlusOne;return next.slice(0,i+1).join('');};// `key` is assumed to be non-empty.\nconst predecessor=function(key){if(key===''+INTEGER_32_MIN){return MIN_NAME;}const keyAsInt=tryParseInt(key);if(keyAsInt!=null){return''+(keyAsInt-1);}const next=new Array(key.length);for(let i=0;i<next.length;i++){next[i]=key.charAt(i);}// If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n// smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n// than that, `predecessor(predecessor(key))`, is\n//\n// `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n//   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n//\n// analogous to increment/decrement for base-10 integers.\n//\n// This works because lexigographic comparison works character-by-character,\n// using length as a tie-breaker if one key is a prefix of the other.\nif(next[next.length-1]===MIN_PUSH_CHAR){if(next.length===1){// See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\nreturn''+INTEGER_32_MAX;}delete next[next.length-1];return next.join('');}// Replace the last character with it's immediate predecessor, and\n// fill the suffix of the key with MAX_PUSH_CHAR. This is the\n// lexicographically largest possible key smaller than `key`.\nnext[next.length-1]=PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length-1])-1);return next.join('')+MAX_PUSH_CHAR.repeat(MAX_KEY_LEN-next.length);};/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */function changeValue(snapshotNode){return{type:\"value\"/* VALUE */,snapshotNode};}function changeChildAdded(childName,snapshotNode){return{type:\"child_added\"/* CHILD_ADDED */,snapshotNode,childName};}function changeChildRemoved(childName,snapshotNode){return{type:\"child_removed\"/* CHILD_REMOVED */,snapshotNode,childName};}function changeChildChanged(childName,snapshotNode,oldSnap){return{type:\"child_changed\"/* CHILD_CHANGED */,snapshotNode,childName,oldSnap};}function changeChildMoved(childName,snapshotNode){return{type:\"child_moved\"/* CHILD_MOVED */,snapshotNode,childName};}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */class IndexedFilter{constructor(index_){this.index_=index_;}updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator){assert(snap.isIndexed(this.index_),'A node must be indexed if only a child is updated');const oldChild=snap.getImmediateChild(key);// Check if anything actually changed.\nif(oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))){// There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n// In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n// to avoid treating these cases as \"nothing changed.\"\nif(oldChild.isEmpty()===newChild.isEmpty()){// Nothing changed.\n// This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n//assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\nreturn snap;}}if(optChangeAccumulator!=null){if(newChild.isEmpty()){if(snap.hasChild(key)){optChangeAccumulator.trackChildChange(changeChildRemoved(key,oldChild));}else{assert(snap.isLeafNode(),'A child remove without an old child only makes sense on a leaf node');}}else if(oldChild.isEmpty()){optChangeAccumulator.trackChildChange(changeChildAdded(key,newChild));}else{optChangeAccumulator.trackChildChange(changeChildChanged(key,newChild,oldChild));}}if(snap.isLeafNode()&&newChild.isEmpty()){return snap;}else{// Make sure the node is indexed\nreturn snap.updateImmediateChild(key,newChild).withIndex(this.index_);}}updateFullNode(oldSnap,newSnap,optChangeAccumulator){if(optChangeAccumulator!=null){if(!oldSnap.isLeafNode()){oldSnap.forEachChild(PRIORITY_INDEX,(key,childNode)=>{if(!newSnap.hasChild(key)){optChangeAccumulator.trackChildChange(changeChildRemoved(key,childNode));}});}if(!newSnap.isLeafNode()){newSnap.forEachChild(PRIORITY_INDEX,(key,childNode)=>{if(oldSnap.hasChild(key)){const oldChild=oldSnap.getImmediateChild(key);if(!oldChild.equals(childNode)){optChangeAccumulator.trackChildChange(changeChildChanged(key,childNode,oldChild));}}else{optChangeAccumulator.trackChildChange(changeChildAdded(key,childNode));}});}}return newSnap.withIndex(this.index_);}updatePriority(oldSnap,newPriority){if(oldSnap.isEmpty()){return ChildrenNode.EMPTY_NODE;}else{return oldSnap.updatePriority(newPriority);}}filtersNodes(){return false;}getIndexedFilter(){return this;}getIndex(){return this.index_;}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */class RangedFilter{constructor(params){this.indexedFilter_=new IndexedFilter(params.getIndex());this.index_=params.getIndex();this.startPost_=RangedFilter.getStartPost_(params);this.endPost_=RangedFilter.getEndPost_(params);}getStartPost(){return this.startPost_;}getEndPost(){return this.endPost_;}matches(node){return this.index_.compare(this.getStartPost(),node)<=0&&this.index_.compare(node,this.getEndPost())<=0;}updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator){if(!this.matches(new NamedNode(key,newChild))){newChild=ChildrenNode.EMPTY_NODE;}return this.indexedFilter_.updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator);}updateFullNode(oldSnap,newSnap,optChangeAccumulator){if(newSnap.isLeafNode()){// Make sure we have a children node with the correct index, not a leaf node;\nnewSnap=ChildrenNode.EMPTY_NODE;}let filtered=newSnap.withIndex(this.index_);// Don't support priorities on queries\nfiltered=filtered.updatePriority(ChildrenNode.EMPTY_NODE);const self=this;newSnap.forEachChild(PRIORITY_INDEX,(key,childNode)=>{if(!self.matches(new NamedNode(key,childNode))){filtered=filtered.updateImmediateChild(key,ChildrenNode.EMPTY_NODE);}});return this.indexedFilter_.updateFullNode(oldSnap,filtered,optChangeAccumulator);}updatePriority(oldSnap,newPriority){// Don't support priorities on queries\nreturn oldSnap;}filtersNodes(){return true;}getIndexedFilter(){return this.indexedFilter_;}getIndex(){return this.index_;}static getStartPost_(params){if(params.hasStart()){const startName=params.getIndexStartName();return params.getIndex().makePost(params.getIndexStartValue(),startName);}else{return params.getIndex().minPost();}}static getEndPost_(params){if(params.hasEnd()){const endName=params.getIndexEndName();return params.getIndex().makePost(params.getIndexEndValue(),endName);}else{return params.getIndex().maxPost();}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */class LimitedFilter{constructor(params){this.rangedFilter_=new RangedFilter(params);this.index_=params.getIndex();this.limit_=params.getLimit();this.reverse_=!params.isViewFromLeft();}updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator){if(!this.rangedFilter_.matches(new NamedNode(key,newChild))){newChild=ChildrenNode.EMPTY_NODE;}if(snap.getImmediateChild(key).equals(newChild)){// No change\nreturn snap;}else if(snap.numChildren()<this.limit_){return this.rangedFilter_.getIndexedFilter().updateChild(snap,key,newChild,affectedPath,source,optChangeAccumulator);}else{return this.fullLimitUpdateChild_(snap,key,newChild,source,optChangeAccumulator);}}updateFullNode(oldSnap,newSnap,optChangeAccumulator){let filtered;if(newSnap.isLeafNode()||newSnap.isEmpty()){// Make sure we have a children node with the correct index, not a leaf node;\nfiltered=ChildrenNode.EMPTY_NODE.withIndex(this.index_);}else{if(this.limit_*2<newSnap.numChildren()&&newSnap.isIndexed(this.index_)){// Easier to build up a snapshot, since what we're given has more than twice the elements we want\nfiltered=ChildrenNode.EMPTY_NODE.withIndex(this.index_);// anchor to the startPost, endPost, or last element as appropriate\nlet iterator;if(this.reverse_){iterator=newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_);}else{iterator=newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);}let count=0;while(iterator.hasNext()&&count<this.limit_){const next=iterator.getNext();let inRange;if(this.reverse_){inRange=this.index_.compare(this.rangedFilter_.getStartPost(),next)<=0;}else{inRange=this.index_.compare(next,this.rangedFilter_.getEndPost())<=0;}if(inRange){filtered=filtered.updateImmediateChild(next.name,next.node);count++;}else{// if we have reached the end post, we cannot keep adding elemments\nbreak;}}}else{// The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\nfiltered=newSnap.withIndex(this.index_);// Don't support priorities on queries\nfiltered=filtered.updatePriority(ChildrenNode.EMPTY_NODE);let startPost;let endPost;let cmp;let iterator;if(this.reverse_){iterator=filtered.getReverseIterator(this.index_);startPost=this.rangedFilter_.getEndPost();endPost=this.rangedFilter_.getStartPost();const indexCompare=this.index_.getCompare();cmp=(a,b)=>indexCompare(b,a);}else{iterator=filtered.getIterator(this.index_);startPost=this.rangedFilter_.getStartPost();endPost=this.rangedFilter_.getEndPost();cmp=this.index_.getCompare();}let count=0;let foundStartPost=false;while(iterator.hasNext()){const next=iterator.getNext();if(!foundStartPost&&cmp(startPost,next)<=0){// start adding\nfoundStartPost=true;}const inRange=foundStartPost&&count<this.limit_&&cmp(next,endPost)<=0;if(inRange){count++;}else{filtered=filtered.updateImmediateChild(next.name,ChildrenNode.EMPTY_NODE);}}}}return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap,filtered,optChangeAccumulator);}updatePriority(oldSnap,newPriority){// Don't support priorities on queries\nreturn oldSnap;}filtersNodes(){return true;}getIndexedFilter(){return this.rangedFilter_.getIndexedFilter();}getIndex(){return this.index_;}fullLimitUpdateChild_(snap,childKey,childSnap,source,changeAccumulator){// TODO: rename all cache stuff etc to general snap terminology\nlet cmp;if(this.reverse_){const indexCmp=this.index_.getCompare();cmp=(a,b)=>indexCmp(b,a);}else{cmp=this.index_.getCompare();}const oldEventCache=snap;assert(oldEventCache.numChildren()===this.limit_,'');const newChildNamedNode=new NamedNode(childKey,childSnap);const windowBoundary=this.reverse_?oldEventCache.getFirstChild(this.index_):oldEventCache.getLastChild(this.index_);const inRange=this.rangedFilter_.matches(newChildNamedNode);if(oldEventCache.hasChild(childKey)){const oldChildSnap=oldEventCache.getImmediateChild(childKey);let nextChild=source.getChildAfterChild(this.index_,windowBoundary,this.reverse_);while(nextChild!=null&&(nextChild.name===childKey||oldEventCache.hasChild(nextChild.name))){// There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n// been applied to the limited filter yet. Ignore this next child which will be updated later in\n// the limited filter...\nnextChild=source.getChildAfterChild(this.index_,nextChild,this.reverse_);}const compareNext=nextChild==null?1:cmp(nextChild,newChildNamedNode);const remainsInWindow=inRange&&!childSnap.isEmpty()&&compareNext>=0;if(remainsInWindow){if(changeAccumulator!=null){changeAccumulator.trackChildChange(changeChildChanged(childKey,childSnap,oldChildSnap));}return oldEventCache.updateImmediateChild(childKey,childSnap);}else{if(changeAccumulator!=null){changeAccumulator.trackChildChange(changeChildRemoved(childKey,oldChildSnap));}const newEventCache=oldEventCache.updateImmediateChild(childKey,ChildrenNode.EMPTY_NODE);const nextChildInRange=nextChild!=null&&this.rangedFilter_.matches(nextChild);if(nextChildInRange){if(changeAccumulator!=null){changeAccumulator.trackChildChange(changeChildAdded(nextChild.name,nextChild.node));}return newEventCache.updateImmediateChild(nextChild.name,nextChild.node);}else{return newEventCache;}}}else if(childSnap.isEmpty()){// we're deleting a node, but it was not in the window, so ignore it\nreturn snap;}else if(inRange){if(cmp(windowBoundary,newChildNamedNode)>=0){if(changeAccumulator!=null){changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name,windowBoundary.node));changeAccumulator.trackChildChange(changeChildAdded(childKey,childSnap));}return oldEventCache.updateImmediateChild(childKey,childSnap).updateImmediateChild(windowBoundary.name,ChildrenNode.EMPTY_NODE);}else{return snap;}}else{return snap;}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */class QueryParams{constructor(){this.limitSet_=false;this.startSet_=false;this.startNameSet_=false;this.startAfterSet_=false;this.endSet_=false;this.endNameSet_=false;this.endBeforeSet_=false;this.limit_=0;this.viewFrom_='';this.indexStartValue_=null;this.indexStartName_='';this.indexEndValue_=null;this.indexEndName_='';this.index_=PRIORITY_INDEX;}hasStart(){return this.startSet_;}hasStartAfter(){return this.startAfterSet_;}hasEndBefore(){return this.endBeforeSet_;}/**\r\n     * @returns True if it would return from left.\r\n     */isViewFromLeft(){if(this.viewFrom_===''){// limit(), rather than limitToFirst or limitToLast was called.\n// This means that only one of startSet_ and endSet_ is true. Use them\n// to calculate which side of the view to anchor to. If neither is set,\n// anchor to the end.\nreturn this.startSet_;}else{return this.viewFrom_===\"l\"/* VIEW_FROM_LEFT */;}}/**\r\n     * Only valid to call if hasStart() returns true\r\n     */getIndexStartValue(){assert(this.startSet_,'Only valid if start has been set');return this.indexStartValue_;}/**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */getIndexStartName(){assert(this.startSet_,'Only valid if start has been set');if(this.startNameSet_){return this.indexStartName_;}else{return MIN_NAME;}}hasEnd(){return this.endSet_;}/**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */getIndexEndValue(){assert(this.endSet_,'Only valid if end has been set');return this.indexEndValue_;}/**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */getIndexEndName(){assert(this.endSet_,'Only valid if end has been set');if(this.endNameSet_){return this.indexEndName_;}else{return MAX_NAME;}}hasLimit(){return this.limitSet_;}/**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */hasAnchoredLimit(){return this.limitSet_&&this.viewFrom_!=='';}/**\r\n     * Only valid to call if hasLimit() returns true\r\n     */getLimit(){assert(this.limitSet_,'Only valid if limit has been set');return this.limit_;}getIndex(){return this.index_;}loadsAllData(){return!(this.startSet_||this.endSet_||this.limitSet_);}isDefault(){return this.loadsAllData()&&this.index_===PRIORITY_INDEX;}copy(){const copy=new QueryParams();copy.limitSet_=this.limitSet_;copy.limit_=this.limit_;copy.startSet_=this.startSet_;copy.indexStartValue_=this.indexStartValue_;copy.startNameSet_=this.startNameSet_;copy.indexStartName_=this.indexStartName_;copy.endSet_=this.endSet_;copy.indexEndValue_=this.indexEndValue_;copy.endNameSet_=this.endNameSet_;copy.indexEndName_=this.indexEndName_;copy.index_=this.index_;copy.viewFrom_=this.viewFrom_;return copy;}}function queryParamsGetNodeFilter(queryParams){if(queryParams.loadsAllData()){return new IndexedFilter(queryParams.getIndex());}else if(queryParams.hasLimit()){return new LimitedFilter(queryParams);}else{return new RangedFilter(queryParams);}}function queryParamsLimitToFirst(queryParams,newLimit){const newParams=queryParams.copy();newParams.limitSet_=true;newParams.limit_=newLimit;newParams.viewFrom_=\"l\"/* VIEW_FROM_LEFT */;return newParams;}function queryParamsLimitToLast(queryParams,newLimit){const newParams=queryParams.copy();newParams.limitSet_=true;newParams.limit_=newLimit;newParams.viewFrom_=\"r\"/* VIEW_FROM_RIGHT */;return newParams;}function queryParamsStartAt(queryParams,indexValue,key){const newParams=queryParams.copy();newParams.startSet_=true;if(indexValue===undefined){indexValue=null;}newParams.indexStartValue_=indexValue;if(key!=null){newParams.startNameSet_=true;newParams.indexStartName_=key;}else{newParams.startNameSet_=false;newParams.indexStartName_='';}return newParams;}function queryParamsStartAfter(queryParams,indexValue,key){let params;if(queryParams.index_===KEY_INDEX){if(typeof indexValue==='string'){indexValue=successor(indexValue);}params=queryParamsStartAt(queryParams,indexValue,key);}else{let childKey;if(key==null){childKey=MAX_NAME;}else{childKey=successor(key);}params=queryParamsStartAt(queryParams,indexValue,childKey);}params.startAfterSet_=true;return params;}function queryParamsEndAt(queryParams,indexValue,key){const newParams=queryParams.copy();newParams.endSet_=true;if(indexValue===undefined){indexValue=null;}newParams.indexEndValue_=indexValue;if(key!==undefined){newParams.endNameSet_=true;newParams.indexEndName_=key;}else{newParams.endNameSet_=false;newParams.indexEndName_='';}return newParams;}function queryParamsEndBefore(queryParams,indexValue,key){let childKey;let params;if(queryParams.index_===KEY_INDEX){if(typeof indexValue==='string'){indexValue=predecessor(indexValue);}params=queryParamsEndAt(queryParams,indexValue,key);}else{if(key==null){childKey=MIN_NAME;}else{childKey=predecessor(key);}params=queryParamsEndAt(queryParams,indexValue,childKey);}params.endBeforeSet_=true;return params;}function queryParamsOrderBy(queryParams,index){const newParams=queryParams.copy();newParams.index_=index;return newParams;}/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */function queryParamsToRestQueryStringParameters(queryParams){const qs={};if(queryParams.isDefault()){return qs;}let orderBy;if(queryParams.index_===PRIORITY_INDEX){orderBy=\"$priority\"/* PRIORITY_INDEX */;}else if(queryParams.index_===VALUE_INDEX){orderBy=\"$value\"/* VALUE_INDEX */;}else if(queryParams.index_===KEY_INDEX){orderBy=\"$key\"/* KEY_INDEX */;}else{assert(queryParams.index_ instanceof PathIndex,'Unrecognized index type!');orderBy=queryParams.index_.toString();}qs[\"orderBy\"/* ORDER_BY */]=stringify(orderBy);if(queryParams.startSet_){qs[\"startAt\"/* START_AT */]=stringify(queryParams.indexStartValue_);if(queryParams.startNameSet_){qs[\"startAt\"/* START_AT */]+=','+stringify(queryParams.indexStartName_);}}if(queryParams.endSet_){qs[\"endAt\"/* END_AT */]=stringify(queryParams.indexEndValue_);if(queryParams.endNameSet_){qs[\"endAt\"/* END_AT */]+=','+stringify(queryParams.indexEndName_);}}if(queryParams.limitSet_){if(queryParams.isViewFromLeft()){qs[\"limitToFirst\"/* LIMIT_TO_FIRST */]=queryParams.limit_;}else{qs[\"limitToLast\"/* LIMIT_TO_LAST */]=queryParams.limit_;}}return qs;}function queryParamsGetQueryObject(queryParams){const obj={};if(queryParams.startSet_){obj[\"sp\"/* INDEX_START_VALUE */]=queryParams.indexStartValue_;if(queryParams.startNameSet_){obj[\"sn\"/* INDEX_START_NAME */]=queryParams.indexStartName_;}}if(queryParams.endSet_){obj[\"ep\"/* INDEX_END_VALUE */]=queryParams.indexEndValue_;if(queryParams.endNameSet_){obj[\"en\"/* INDEX_END_NAME */]=queryParams.indexEndName_;}}if(queryParams.limitSet_){obj[\"l\"/* LIMIT */]=queryParams.limit_;let viewFrom=queryParams.viewFrom_;if(viewFrom===''){if(queryParams.isViewFromLeft()){viewFrom=\"l\"/* VIEW_FROM_LEFT */;}else{viewFrom=\"r\"/* VIEW_FROM_RIGHT */;}}obj[\"vf\"/* VIEW_FROM */]=viewFrom;}// For now, priority index is the default, so we only specify if it's some other index\nif(queryParams.index_!==PRIORITY_INDEX){obj[\"i\"/* INDEX */]=queryParams.index_.toString();}return obj;}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */class ReadonlyRestClient extends ServerActions{/**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */constructor(repoInfo_,onDataUpdate_,authTokenProvider_,appCheckTokenProvider_){super();this.repoInfo_=repoInfo_;this.onDataUpdate_=onDataUpdate_;this.authTokenProvider_=authTokenProvider_;this.appCheckTokenProvider_=appCheckTokenProvider_;/** @private {function(...[*])} */this.log_=logWrapper('p:rest:');/**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */this.listens_={};}reportStats(stats){throw new Error('Method not implemented.');}static getListenId_(query,tag){if(tag!==undefined){return'tag$'+tag;}else{assert(query._queryParams.isDefault(),\"should have a tag if it's not a default query.\");return query._path.toString();}}/** @inheritDoc */listen(query,currentHashFn,tag,onComplete){const pathString=query._path.toString();this.log_('Listen called for '+pathString+' '+query._queryIdentifier);// Mark this listener so we can tell if it's removed.\nconst listenId=ReadonlyRestClient.getListenId_(query,tag);const thisListen={};this.listens_[listenId]=thisListen;const queryStringParameters=queryParamsToRestQueryStringParameters(query._queryParams);this.restRequest_(pathString+'.json',queryStringParameters,(error,result)=>{let data=result;if(error===404){data=null;error=null;}if(error===null){this.onDataUpdate_(pathString,data,/*isMerge=*/false,tag);}if(safeGet(this.listens_,listenId)===thisListen){let status;if(!error){status='ok';}else if(error===401){status='permission_denied';}else{status='rest_error:'+error;}onComplete(status,null);}});}/** @inheritDoc */unlisten(query,tag){const listenId=ReadonlyRestClient.getListenId_(query,tag);delete this.listens_[listenId];}get(query){const queryStringParameters=queryParamsToRestQueryStringParameters(query._queryParams);const pathString=query._path.toString();const deferred=new Deferred();this.restRequest_(pathString+'.json',queryStringParameters,(error,result)=>{let data=result;if(error===404){data=null;error=null;}if(error===null){this.onDataUpdate_(pathString,data,/*isMerge=*/false,/*tag=*/null);deferred.resolve(data);}else{deferred.reject(new Error(data));}});return deferred.promise;}/** @inheritDoc */refreshAuthToken(token){// no-op since we just always call getToken.\n}/**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */restRequest_(pathString,queryStringParameters={},callback){queryStringParameters['format']='export';return Promise.all([this.authTokenProvider_.getToken(/*forceRefresh=*/false),this.appCheckTokenProvider_.getToken(/*forceRefresh=*/false)]).then(([authToken,appCheckToken])=>{if(authToken&&authToken.accessToken){queryStringParameters['auth']=authToken.accessToken;}if(appCheckToken&&appCheckToken.token){queryStringParameters['ac']=appCheckToken.token;}const url=(this.repoInfo_.secure?'https://':'http://')+this.repoInfo_.host+pathString+'?'+'ns='+this.repoInfo_.namespace+querystring(queryStringParameters);this.log_('Sending REST request for '+url);const xhr=new XMLHttpRequest();xhr.onreadystatechange=()=>{if(callback&&xhr.readyState===4){this.log_('REST Response for '+url+' received. status:',xhr.status,'response:',xhr.responseText);let res=null;if(xhr.status>=200&&xhr.status<300){try{res=jsonEval(xhr.responseText);}catch(e){warn('Failed to parse JSON response for '+url+': '+xhr.responseText);}callback(null,res);}else{// 401 and 404 are expected.\nif(xhr.status!==401&&xhr.status!==404){warn('Got unsuccessful REST response for '+url+' Status: '+xhr.status);}callback(xhr.status);}callback=null;}};xhr.open('GET',url,/*asynchronous=*/true);xhr.send();});}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */class SnapshotHolder{constructor(){this.rootNode_=ChildrenNode.EMPTY_NODE;}getNode(path){return this.rootNode_.getChild(path);}updateSnapshot(path,newSnapshotNode){this.rootNode_=this.rootNode_.updateChild(path,newSnapshotNode);}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */function newSparseSnapshotTree(){return{value:null,children:new Map()};}/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */function sparseSnapshotTreeRemember(sparseSnapshotTree,path,data){if(pathIsEmpty(path)){sparseSnapshotTree.value=data;sparseSnapshotTree.children.clear();}else if(sparseSnapshotTree.value!==null){sparseSnapshotTree.value=sparseSnapshotTree.value.updateChild(path,data);}else{const childKey=pathGetFront(path);if(!sparseSnapshotTree.children.has(childKey)){sparseSnapshotTree.children.set(childKey,newSparseSnapshotTree());}const child=sparseSnapshotTree.children.get(childKey);path=pathPopFront(path);sparseSnapshotTreeRemember(child,path,data);}}/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */function sparseSnapshotTreeForget(sparseSnapshotTree,path){if(pathIsEmpty(path)){sparseSnapshotTree.value=null;sparseSnapshotTree.children.clear();return true;}else{if(sparseSnapshotTree.value!==null){if(sparseSnapshotTree.value.isLeafNode()){// We're trying to forget a node that doesn't exist\nreturn false;}else{const value=sparseSnapshotTree.value;sparseSnapshotTree.value=null;value.forEachChild(PRIORITY_INDEX,(key,tree)=>{sparseSnapshotTreeRemember(sparseSnapshotTree,new Path(key),tree);});return sparseSnapshotTreeForget(sparseSnapshotTree,path);}}else if(sparseSnapshotTree.children.size>0){const childKey=pathGetFront(path);path=pathPopFront(path);if(sparseSnapshotTree.children.has(childKey)){const safeToRemove=sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey),path);if(safeToRemove){sparseSnapshotTree.children.delete(childKey);}}return sparseSnapshotTree.children.size===0;}else{return true;}}}/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */function sparseSnapshotTreeForEachTree(sparseSnapshotTree,prefixPath,func){if(sparseSnapshotTree.value!==null){func(prefixPath,sparseSnapshotTree.value);}else{sparseSnapshotTreeForEachChild(sparseSnapshotTree,(key,tree)=>{const path=new Path(prefixPath.toString()+'/'+key);sparseSnapshotTreeForEachTree(tree,path,func);});}}/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */function sparseSnapshotTreeForEachChild(sparseSnapshotTree,func){sparseSnapshotTree.children.forEach((tree,key)=>{func(key,tree);});}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */class StatsListener{constructor(collection_){this.collection_=collection_;this.last_=null;}get(){const newStats=this.collection_.get();const delta=Object.assign({},newStats);if(this.last_){each(this.last_,(stat,value)=>{delta[stat]=delta[stat]-value;});}this.last_=newStats;return delta;}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ // Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME=10*1000;const FIRST_STATS_MAX_TIME=30*1000;// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL=5*60*1000;class StatsReporter{constructor(collection,server_){this.server_=server_;this.statsToReport_={};this.statsListener_=new StatsListener(collection);const timeout=FIRST_STATS_MIN_TIME+(FIRST_STATS_MAX_TIME-FIRST_STATS_MIN_TIME)*Math.random();setTimeoutNonBlocking(this.reportStats_.bind(this),Math.floor(timeout));}reportStats_(){const stats=this.statsListener_.get();const reportedStats={};let haveStatsToReport=false;each(stats,(stat,value)=>{if(value>0&&contains(this.statsToReport_,stat)){reportedStats[stat]=value;haveStatsToReport=true;}});if(haveStatsToReport){this.server_.reportStats(reportedStats);}// queue our next run.\nsetTimeoutNonBlocking(this.reportStats_.bind(this),Math.floor(Math.random()*2*REPORT_STATS_INTERVAL));}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n *\r\n * @enum\r\n */var OperationType;(function(OperationType){OperationType[OperationType[\"OVERWRITE\"]=0]=\"OVERWRITE\";OperationType[OperationType[\"MERGE\"]=1]=\"MERGE\";OperationType[OperationType[\"ACK_USER_WRITE\"]=2]=\"ACK_USER_WRITE\";OperationType[OperationType[\"LISTEN_COMPLETE\"]=3]=\"LISTEN_COMPLETE\";})(OperationType||(OperationType={}));function newOperationSourceUser(){return{fromUser:true,fromServer:false,queryId:null,tagged:false};}function newOperationSourceServer(){return{fromUser:false,fromServer:true,queryId:null,tagged:false};}function newOperationSourceServerTaggedQuery(queryId){return{fromUser:false,fromServer:true,queryId,tagged:true};}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class AckUserWrite{/**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */constructor(/** @inheritDoc */path,/** @inheritDoc */affectedTree,/** @inheritDoc */revert){this.path=path;this.affectedTree=affectedTree;this.revert=revert;/** @inheritDoc */this.type=OperationType.ACK_USER_WRITE;/** @inheritDoc */this.source=newOperationSourceUser();}operationForChild(childName){if(!pathIsEmpty(this.path)){assert(pathGetFront(this.path)===childName,'operationForChild called for unrelated child.');return new AckUserWrite(pathPopFront(this.path),this.affectedTree,this.revert);}else if(this.affectedTree.value!=null){assert(this.affectedTree.children.isEmpty(),'affectedTree should not have overlapping affected paths.');// All child locations are affected as well; just return same operation.\nreturn this;}else{const childTree=this.affectedTree.subtree(new Path(childName));return new AckUserWrite(newEmptyPath(),childTree,this.revert);}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class ListenComplete{constructor(source,path){this.source=source;this.path=path;/** @inheritDoc */this.type=OperationType.LISTEN_COMPLETE;}operationForChild(childName){if(pathIsEmpty(this.path)){return new ListenComplete(this.source,newEmptyPath());}else{return new ListenComplete(this.source,pathPopFront(this.path));}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class Overwrite{constructor(source,path,snap){this.source=source;this.path=path;this.snap=snap;/** @inheritDoc */this.type=OperationType.OVERWRITE;}operationForChild(childName){if(pathIsEmpty(this.path)){return new Overwrite(this.source,newEmptyPath(),this.snap.getImmediateChild(childName));}else{return new Overwrite(this.source,pathPopFront(this.path),this.snap);}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class Merge{constructor(/** @inheritDoc */source,/** @inheritDoc */path,/** @inheritDoc */children){this.source=source;this.path=path;this.children=children;/** @inheritDoc */this.type=OperationType.MERGE;}operationForChild(childName){if(pathIsEmpty(this.path)){const childTree=this.children.subtree(new Path(childName));if(childTree.isEmpty()){// This child is unaffected\nreturn null;}else if(childTree.value){// We have a snapshot for the child in question.  This becomes an overwrite of the child.\nreturn new Overwrite(this.source,newEmptyPath(),childTree.value);}else{// This is a merge at a deeper level\nreturn new Merge(this.source,newEmptyPath(),childTree);}}else{assert(pathGetFront(this.path)===childName,\"Can't get a merge for a child not on the path of the operation\");return new Merge(this.source,pathPopFront(this.path),this.children);}}toString(){return'Operation('+this.path+': '+this.source.toString()+' merge: '+this.children.toString()+')';}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */class CacheNode{constructor(node_,fullyInitialized_,filtered_){this.node_=node_;this.fullyInitialized_=fullyInitialized_;this.filtered_=filtered_;}/**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */isFullyInitialized(){return this.fullyInitialized_;}/**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */isFiltered(){return this.filtered_;}isCompleteForPath(path){if(pathIsEmpty(path)){return this.isFullyInitialized()&&!this.filtered_;}const childKey=pathGetFront(path);return this.isCompleteForChild(childKey);}isCompleteForChild(key){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(key);}getNode(){return this.node_;}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */class EventGenerator{constructor(query_){this.query_=query_;this.index_=this.query_._queryParams.getIndex();}}/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */function eventGeneratorGenerateEventsForChanges(eventGenerator,changes,eventCache,eventRegistrations){const events=[];const moves=[];changes.forEach(change=>{if(change.type===\"child_changed\"/* CHILD_CHANGED */&&eventGenerator.index_.indexedValueChanged(change.oldSnap,change.snapshotNode)){moves.push(changeChildMoved(change.childName,change.snapshotNode));}});eventGeneratorGenerateEventsForType(eventGenerator,events,\"child_removed\"/* CHILD_REMOVED */,changes,eventRegistrations,eventCache);eventGeneratorGenerateEventsForType(eventGenerator,events,\"child_added\"/* CHILD_ADDED */,changes,eventRegistrations,eventCache);eventGeneratorGenerateEventsForType(eventGenerator,events,\"child_moved\"/* CHILD_MOVED */,moves,eventRegistrations,eventCache);eventGeneratorGenerateEventsForType(eventGenerator,events,\"child_changed\"/* CHILD_CHANGED */,changes,eventRegistrations,eventCache);eventGeneratorGenerateEventsForType(eventGenerator,events,\"value\"/* VALUE */,changes,eventRegistrations,eventCache);return events;}/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */function eventGeneratorGenerateEventsForType(eventGenerator,events,eventType,changes,registrations,eventCache){const filteredChanges=changes.filter(change=>change.type===eventType);filteredChanges.sort((a,b)=>eventGeneratorCompareChanges(eventGenerator,a,b));filteredChanges.forEach(change=>{const materializedChange=eventGeneratorMaterializeSingleChange(eventGenerator,change,eventCache);registrations.forEach(registration=>{if(registration.respondsTo(change.type)){events.push(registration.createEvent(materializedChange,eventGenerator.query_));}});});}function eventGeneratorMaterializeSingleChange(eventGenerator,change,eventCache){if(change.type==='value'||change.type==='child_removed'){return change;}else{change.prevName=eventCache.getPredecessorChildName(change.childName,change.snapshotNode,eventGenerator.index_);return change;}}function eventGeneratorCompareChanges(eventGenerator,a,b){if(a.childName==null||b.childName==null){throw assertionError('Should only compare child_ events.');}const aWrapped=new NamedNode(a.childName,a.snapshotNode);const bWrapped=new NamedNode(b.childName,b.snapshotNode);return eventGenerator.index_.compare(aWrapped,bWrapped);}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */function newViewCache(eventCache,serverCache){return{eventCache,serverCache};}function viewCacheUpdateEventSnap(viewCache,eventSnap,complete,filtered){return newViewCache(new CacheNode(eventSnap,complete,filtered),viewCache.serverCache);}function viewCacheUpdateServerSnap(viewCache,serverSnap,complete,filtered){return newViewCache(viewCache.eventCache,new CacheNode(serverSnap,complete,filtered));}function viewCacheGetCompleteEventSnap(viewCache){return viewCache.eventCache.isFullyInitialized()?viewCache.eventCache.getNode():null;}function viewCacheGetCompleteServerSnap(viewCache){return viewCache.serverCache.isFullyInitialized()?viewCache.serverCache.getNode():null;}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let emptyChildrenSingleton;/**\r\n * Singleton empty children collection.\r\n *\r\n */const EmptyChildren=()=>{if(!emptyChildrenSingleton){emptyChildrenSingleton=new SortedMap(stringCompare);}return emptyChildrenSingleton;};/**\r\n * A tree with immutable elements.\r\n */class ImmutableTree{constructor(value,children=EmptyChildren()){this.value=value;this.children=children;}static fromObject(obj){let tree=new ImmutableTree(null);each(obj,(childPath,childSnap)=>{tree=tree.set(new Path(childPath),childSnap);});return tree;}/**\r\n     * True if the value is empty and there are no children\r\n     */isEmpty(){return this.value===null&&this.children.isEmpty();}/**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */findRootMostMatchingPathAndValue(relativePath,predicate){if(this.value!=null&&predicate(this.value)){return{path:newEmptyPath(),value:this.value};}else{if(pathIsEmpty(relativePath)){return null;}else{const front=pathGetFront(relativePath);const child=this.children.get(front);if(child!==null){const childExistingPathAndValue=child.findRootMostMatchingPathAndValue(pathPopFront(relativePath),predicate);if(childExistingPathAndValue!=null){const fullPath=pathChild(new Path(front),childExistingPathAndValue.path);return{path:fullPath,value:childExistingPathAndValue.value};}else{return null;}}else{return null;}}}}/**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */findRootMostValueAndPath(relativePath){return this.findRootMostMatchingPathAndValue(relativePath,()=>true);}/**\r\n     * @returns The subtree at the given path\r\n     */subtree(relativePath){if(pathIsEmpty(relativePath)){return this;}else{const front=pathGetFront(relativePath);const childTree=this.children.get(front);if(childTree!==null){return childTree.subtree(pathPopFront(relativePath));}else{return new ImmutableTree(null);}}}/**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */set(relativePath,toSet){if(pathIsEmpty(relativePath)){return new ImmutableTree(toSet,this.children);}else{const front=pathGetFront(relativePath);const child=this.children.get(front)||new ImmutableTree(null);const newChild=child.set(pathPopFront(relativePath),toSet);const newChildren=this.children.insert(front,newChild);return new ImmutableTree(this.value,newChildren);}}/**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */remove(relativePath){if(pathIsEmpty(relativePath)){if(this.children.isEmpty()){return new ImmutableTree(null);}else{return new ImmutableTree(null,this.children);}}else{const front=pathGetFront(relativePath);const child=this.children.get(front);if(child){const newChild=child.remove(pathPopFront(relativePath));let newChildren;if(newChild.isEmpty()){newChildren=this.children.remove(front);}else{newChildren=this.children.insert(front,newChild);}if(this.value===null&&newChildren.isEmpty()){return new ImmutableTree(null);}else{return new ImmutableTree(this.value,newChildren);}}else{return this;}}}/**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */get(relativePath){if(pathIsEmpty(relativePath)){return this.value;}else{const front=pathGetFront(relativePath);const child=this.children.get(front);if(child){return child.get(pathPopFront(relativePath));}else{return null;}}}/**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */setTree(relativePath,newTree){if(pathIsEmpty(relativePath)){return newTree;}else{const front=pathGetFront(relativePath);const child=this.children.get(front)||new ImmutableTree(null);const newChild=child.setTree(pathPopFront(relativePath),newTree);let newChildren;if(newChild.isEmpty()){newChildren=this.children.remove(front);}else{newChildren=this.children.insert(front,newChild);}return new ImmutableTree(this.value,newChildren);}}/**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */fold(fn){return this.fold_(newEmptyPath(),fn);}/**\r\n     * Recursive helper for public-facing fold() method\r\n     */fold_(pathSoFar,fn){const accum={};this.children.inorderTraversal((childKey,childTree)=>{accum[childKey]=childTree.fold_(pathChild(pathSoFar,childKey),fn);});return fn(pathSoFar,this.value,accum);}/**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */findOnPath(path,f){return this.findOnPath_(path,newEmptyPath(),f);}findOnPath_(pathToFollow,pathSoFar,f){const result=this.value?f(pathSoFar,this.value):false;if(result){return result;}else{if(pathIsEmpty(pathToFollow)){return null;}else{const front=pathGetFront(pathToFollow);const nextChild=this.children.get(front);if(nextChild){return nextChild.findOnPath_(pathPopFront(pathToFollow),pathChild(pathSoFar,front),f);}else{return null;}}}}foreachOnPath(path,f){return this.foreachOnPath_(path,newEmptyPath(),f);}foreachOnPath_(pathToFollow,currentRelativePath,f){if(pathIsEmpty(pathToFollow)){return this;}else{if(this.value){f(currentRelativePath,this.value);}const front=pathGetFront(pathToFollow);const nextChild=this.children.get(front);if(nextChild){return nextChild.foreachOnPath_(pathPopFront(pathToFollow),pathChild(currentRelativePath,front),f);}else{return new ImmutableTree(null);}}}/**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */foreach(f){this.foreach_(newEmptyPath(),f);}foreach_(currentRelativePath,f){this.children.inorderTraversal((childName,childTree)=>{childTree.foreach_(pathChild(currentRelativePath,childName),f);});if(this.value){f(currentRelativePath,this.value);}}foreachChild(f){this.children.inorderTraversal((childName,childTree)=>{if(childTree.value){f(childName,childTree.value);}});}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */class CompoundWrite{constructor(writeTree_){this.writeTree_=writeTree_;}static empty(){return new CompoundWrite(new ImmutableTree(null));}}function compoundWriteAddWrite(compoundWrite,path,node){if(pathIsEmpty(path)){return new CompoundWrite(new ImmutableTree(node));}else{const rootmost=compoundWrite.writeTree_.findRootMostValueAndPath(path);if(rootmost!=null){const rootMostPath=rootmost.path;let value=rootmost.value;const relativePath=newRelativePath(rootMostPath,path);value=value.updateChild(relativePath,node);return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath,value));}else{const subtree=new ImmutableTree(node);const newWriteTree=compoundWrite.writeTree_.setTree(path,subtree);return new CompoundWrite(newWriteTree);}}}function compoundWriteAddWrites(compoundWrite,path,updates){let newWrite=compoundWrite;each(updates,(childKey,node)=>{newWrite=compoundWriteAddWrite(newWrite,pathChild(path,childKey),node);});return newWrite;}/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */function compoundWriteRemoveWrite(compoundWrite,path){if(pathIsEmpty(path)){return CompoundWrite.empty();}else{const newWriteTree=compoundWrite.writeTree_.setTree(path,new ImmutableTree(null));return new CompoundWrite(newWriteTree);}}/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */function compoundWriteHasCompleteWrite(compoundWrite,path){return compoundWriteGetCompleteNode(compoundWrite,path)!=null;}/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */function compoundWriteGetCompleteNode(compoundWrite,path){const rootmost=compoundWrite.writeTree_.findRootMostValueAndPath(path);if(rootmost!=null){return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path,path));}else{return null;}}/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */function compoundWriteGetCompleteChildren(compoundWrite){const children=[];const node=compoundWrite.writeTree_.value;if(node!=null){// If it's a leaf node, it has no children; so nothing to do.\nif(!node.isLeafNode()){node.forEachChild(PRIORITY_INDEX,(childName,childNode)=>{children.push(new NamedNode(childName,childNode));});}}else{compoundWrite.writeTree_.children.inorderTraversal((childName,childTree)=>{if(childTree.value!=null){children.push(new NamedNode(childName,childTree.value));}});}return children;}function compoundWriteChildCompoundWrite(compoundWrite,path){if(pathIsEmpty(path)){return compoundWrite;}else{const shadowingNode=compoundWriteGetCompleteNode(compoundWrite,path);if(shadowingNode!=null){return new CompoundWrite(new ImmutableTree(shadowingNode));}else{return new CompoundWrite(compoundWrite.writeTree_.subtree(path));}}}/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */function compoundWriteIsEmpty(compoundWrite){return compoundWrite.writeTree_.isEmpty();}/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */function compoundWriteApply(compoundWrite,node){return applySubtreeWrite(newEmptyPath(),compoundWrite.writeTree_,node);}function applySubtreeWrite(relativePath,writeTree,node){if(writeTree.value!=null){// Since there a write is always a leaf, we're done here\nreturn node.updateChild(relativePath,writeTree.value);}else{let priorityWrite=null;writeTree.children.inorderTraversal((childKey,childTree)=>{if(childKey==='.priority'){// Apply priorities at the end so we don't update priorities for either empty nodes or forget\n// to apply priorities to empty nodes that are later filled\nassert(childTree.value!==null,'Priority writes must always be leaf nodes');priorityWrite=childTree.value;}else{node=applySubtreeWrite(pathChild(relativePath,childKey),childTree,node);}});// If there was a priority write, we only apply it if the node is not empty\nif(!node.getChild(relativePath).isEmpty()&&priorityWrite!==null){node=node.updateChild(pathChild(relativePath,'.priority'),priorityWrite);}return node;}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */function writeTreeChildWrites(writeTree,path){return newWriteTreeRef(path,writeTree);}/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */function writeTreeAddOverwrite(writeTree,path,snap,writeId,visible){assert(writeId>writeTree.lastWriteId,'Stacking an older write on top of newer ones');if(visible===undefined){visible=true;}writeTree.allWrites.push({path,snap,writeId,visible});if(visible){writeTree.visibleWrites=compoundWriteAddWrite(writeTree.visibleWrites,path,snap);}writeTree.lastWriteId=writeId;}/**\r\n * Record a new merge from user code.\r\n */function writeTreeAddMerge(writeTree,path,changedChildren,writeId){assert(writeId>writeTree.lastWriteId,'Stacking an older merge on top of newer ones');writeTree.allWrites.push({path,children:changedChildren,writeId,visible:true});writeTree.visibleWrites=compoundWriteAddWrites(writeTree.visibleWrites,path,changedChildren);writeTree.lastWriteId=writeId;}function writeTreeGetWrite(writeTree,writeId){for(let i=0;i<writeTree.allWrites.length;i++){const record=writeTree.allWrites[i];if(record.writeId===writeId){return record;}}return null;}/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */function writeTreeRemoveWrite(writeTree,writeId){// Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n// out of order.\n//const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n//assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\nconst idx=writeTree.allWrites.findIndex(s=>{return s.writeId===writeId;});assert(idx>=0,'removeWrite called with nonexistent writeId.');const writeToRemove=writeTree.allWrites[idx];writeTree.allWrites.splice(idx,1);let removedWriteWasVisible=writeToRemove.visible;let removedWriteOverlapsWithOtherWrites=false;let i=writeTree.allWrites.length-1;while(removedWriteWasVisible&&i>=0){const currentWrite=writeTree.allWrites[i];if(currentWrite.visible){if(i>=idx&&writeTreeRecordContainsPath_(currentWrite,writeToRemove.path)){// The removed write was completely shadowed by a subsequent write.\nremovedWriteWasVisible=false;}else if(pathContains(writeToRemove.path,currentWrite.path)){// Either we're covering some writes or they're covering part of us (depending on which came first).\nremovedWriteOverlapsWithOtherWrites=true;}}i--;}if(!removedWriteWasVisible){return false;}else if(removedWriteOverlapsWithOtherWrites){// There's some shadowing going on. Just rebuild the visible writes from scratch.\nwriteTreeResetTree_(writeTree);return true;}else{// There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\nif(writeToRemove.snap){writeTree.visibleWrites=compoundWriteRemoveWrite(writeTree.visibleWrites,writeToRemove.path);}else{const children=writeToRemove.children;each(children,childName=>{writeTree.visibleWrites=compoundWriteRemoveWrite(writeTree.visibleWrites,pathChild(writeToRemove.path,childName));});}return true;}}function writeTreeRecordContainsPath_(writeRecord,path){if(writeRecord.snap){return pathContains(writeRecord.path,path);}else{for(const childName in writeRecord.children){if(writeRecord.children.hasOwnProperty(childName)&&pathContains(pathChild(writeRecord.path,childName),path)){return true;}}return false;}}/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */function writeTreeResetTree_(writeTree){writeTree.visibleWrites=writeTreeLayerTree_(writeTree.allWrites,writeTreeDefaultFilter_,newEmptyPath());if(writeTree.allWrites.length>0){writeTree.lastWriteId=writeTree.allWrites[writeTree.allWrites.length-1].writeId;}else{writeTree.lastWriteId=-1;}}/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */function writeTreeDefaultFilter_(write){return write.visible;}/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */function writeTreeLayerTree_(writes,filter,treeRoot){let compoundWrite=CompoundWrite.empty();for(let i=0;i<writes.length;++i){const write=writes[i];// Theory, a later set will either:\n// a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n// b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\nif(filter(write)){const writePath=write.path;let relativePath;if(write.snap){if(pathContains(treeRoot,writePath)){relativePath=newRelativePath(treeRoot,writePath);compoundWrite=compoundWriteAddWrite(compoundWrite,relativePath,write.snap);}else if(pathContains(writePath,treeRoot)){relativePath=newRelativePath(writePath,treeRoot);compoundWrite=compoundWriteAddWrite(compoundWrite,newEmptyPath(),write.snap.getChild(relativePath));}else;}else if(write.children){if(pathContains(treeRoot,writePath)){relativePath=newRelativePath(treeRoot,writePath);compoundWrite=compoundWriteAddWrites(compoundWrite,relativePath,write.children);}else if(pathContains(writePath,treeRoot)){relativePath=newRelativePath(writePath,treeRoot);if(pathIsEmpty(relativePath)){compoundWrite=compoundWriteAddWrites(compoundWrite,newEmptyPath(),write.children);}else{const child=safeGet(write.children,pathGetFront(relativePath));if(child){// There exists a child in this node that matches the root path\nconst deepNode=child.getChild(pathPopFront(relativePath));compoundWrite=compoundWriteAddWrite(compoundWrite,newEmptyPath(),deepNode);}}}else;}else{throw assertionError('WriteRecord should have .snap or .children');}}}return compoundWrite;}/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */function writeTreeCalcCompleteEventCache(writeTree,treePath,completeServerCache,writeIdsToExclude,includeHiddenWrites){if(!writeIdsToExclude&&!includeHiddenWrites){const shadowingNode=compoundWriteGetCompleteNode(writeTree.visibleWrites,treePath);if(shadowingNode!=null){return shadowingNode;}else{const subMerge=compoundWriteChildCompoundWrite(writeTree.visibleWrites,treePath);if(compoundWriteIsEmpty(subMerge)){return completeServerCache;}else if(completeServerCache==null&&!compoundWriteHasCompleteWrite(subMerge,newEmptyPath())){// We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\nreturn null;}else{const layeredCache=completeServerCache||ChildrenNode.EMPTY_NODE;return compoundWriteApply(subMerge,layeredCache);}}}else{const merge=compoundWriteChildCompoundWrite(writeTree.visibleWrites,treePath);if(!includeHiddenWrites&&compoundWriteIsEmpty(merge)){return completeServerCache;}else{// If the server cache is null, and we don't have a complete cache, we need to return null\nif(!includeHiddenWrites&&completeServerCache==null&&!compoundWriteHasCompleteWrite(merge,newEmptyPath())){return null;}else{const filter=function(write){return(write.visible||includeHiddenWrites)&&(!writeIdsToExclude||!~writeIdsToExclude.indexOf(write.writeId))&&(pathContains(write.path,treePath)||pathContains(treePath,write.path));};const mergeAtPath=writeTreeLayerTree_(writeTree.allWrites,filter,treePath);const layeredCache=completeServerCache||ChildrenNode.EMPTY_NODE;return compoundWriteApply(mergeAtPath,layeredCache);}}}}/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */function writeTreeCalcCompleteEventChildren(writeTree,treePath,completeServerChildren){let completeChildren=ChildrenNode.EMPTY_NODE;const topLevelSet=compoundWriteGetCompleteNode(writeTree.visibleWrites,treePath);if(topLevelSet){if(!topLevelSet.isLeafNode()){// we're shadowing everything. Return the children.\ntopLevelSet.forEachChild(PRIORITY_INDEX,(childName,childSnap)=>{completeChildren=completeChildren.updateImmediateChild(childName,childSnap);});}return completeChildren;}else if(completeServerChildren){// Layer any children we have on top of this\n// We know we don't have a top-level set, so just enumerate existing children\nconst merge=compoundWriteChildCompoundWrite(writeTree.visibleWrites,treePath);completeServerChildren.forEachChild(PRIORITY_INDEX,(childName,childNode)=>{const node=compoundWriteApply(compoundWriteChildCompoundWrite(merge,new Path(childName)),childNode);completeChildren=completeChildren.updateImmediateChild(childName,node);});// Add any complete children we have from the set\ncompoundWriteGetCompleteChildren(merge).forEach(namedNode=>{completeChildren=completeChildren.updateImmediateChild(namedNode.name,namedNode.node);});return completeChildren;}else{// We don't have anything to layer on top of. Layer on any children we have\n// Note that we can return an empty snap if we have a defined delete\nconst merge=compoundWriteChildCompoundWrite(writeTree.visibleWrites,treePath);compoundWriteGetCompleteChildren(merge).forEach(namedNode=>{completeChildren=completeChildren.updateImmediateChild(namedNode.name,namedNode.node);});return completeChildren;}}/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */function writeTreeCalcEventCacheAfterServerOverwrite(writeTree,treePath,childPath,existingEventSnap,existingServerSnap){assert(existingEventSnap||existingServerSnap,'Either existingEventSnap or existingServerSnap must exist');const path=pathChild(treePath,childPath);if(compoundWriteHasCompleteWrite(writeTree.visibleWrites,path)){// At this point we can probably guarantee that we're in case 2, meaning no events\n// May need to check visibility while doing the findRootMostValueAndPath call\nreturn null;}else{// No complete shadowing. We're either partially shadowing or not shadowing at all.\nconst childMerge=compoundWriteChildCompoundWrite(writeTree.visibleWrites,path);if(compoundWriteIsEmpty(childMerge)){// We're not shadowing at all. Case 1\nreturn existingServerSnap.getChild(childPath);}else{// This could be more efficient if the serverNode + updates doesn't change the eventSnap\n// However this is tricky to find out, since user updates don't necessary change the server\n// snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n// adds nodes, but doesn't change any existing writes. It is therefore not enough to\n// only check if the updates change the serverNode.\n// Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\nreturn compoundWriteApply(childMerge,existingServerSnap.getChild(childPath));}}}/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */function writeTreeCalcCompleteChild(writeTree,treePath,childKey,existingServerSnap){const path=pathChild(treePath,childKey);const shadowingNode=compoundWriteGetCompleteNode(writeTree.visibleWrites,path);if(shadowingNode!=null){return shadowingNode;}else{if(existingServerSnap.isCompleteForChild(childKey)){const childMerge=compoundWriteChildCompoundWrite(writeTree.visibleWrites,path);return compoundWriteApply(childMerge,existingServerSnap.getNode().getImmediateChild(childKey));}else{return null;}}}/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */function writeTreeShadowingWrite(writeTree,path){return compoundWriteGetCompleteNode(writeTree.visibleWrites,path);}/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */function writeTreeCalcIndexedSlice(writeTree,treePath,completeServerData,startPost,count,reverse,index){let toIterate;const merge=compoundWriteChildCompoundWrite(writeTree.visibleWrites,treePath);const shadowingNode=compoundWriteGetCompleteNode(merge,newEmptyPath());if(shadowingNode!=null){toIterate=shadowingNode;}else if(completeServerData!=null){toIterate=compoundWriteApply(merge,completeServerData);}else{// no children to iterate on\nreturn[];}toIterate=toIterate.withIndex(index);if(!toIterate.isEmpty()&&!toIterate.isLeafNode()){const nodes=[];const cmp=index.getCompare();const iter=reverse?toIterate.getReverseIteratorFrom(startPost,index):toIterate.getIteratorFrom(startPost,index);let next=iter.getNext();while(next&&nodes.length<count){if(cmp(next,startPost)!==0){nodes.push(next);}next=iter.getNext();}return nodes;}else{return[];}}function newWriteTree(){return{visibleWrites:CompoundWrite.empty(),allWrites:[],lastWriteId:-1};}/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */function writeTreeRefCalcCompleteEventCache(writeTreeRef,completeServerCache,writeIdsToExclude,includeHiddenWrites){return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree,writeTreeRef.treePath,completeServerCache,writeIdsToExclude,includeHiddenWrites);}/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */function writeTreeRefCalcCompleteEventChildren(writeTreeRef,completeServerChildren){return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree,writeTreeRef.treePath,completeServerChildren);}/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */function writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef,path,existingEventSnap,existingServerSnap){return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree,writeTreeRef.treePath,path,existingEventSnap,existingServerSnap);}/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */function writeTreeRefShadowingWrite(writeTreeRef,path){return writeTreeShadowingWrite(writeTreeRef.writeTree,pathChild(writeTreeRef.treePath,path));}/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */function writeTreeRefCalcIndexedSlice(writeTreeRef,completeServerData,startPost,count,reverse,index){return writeTreeCalcIndexedSlice(writeTreeRef.writeTree,writeTreeRef.treePath,completeServerData,startPost,count,reverse,index);}/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */function writeTreeRefCalcCompleteChild(writeTreeRef,childKey,existingServerCache){return writeTreeCalcCompleteChild(writeTreeRef.writeTree,writeTreeRef.treePath,childKey,existingServerCache);}/**\r\n * Return a WriteTreeRef for a child.\r\n */function writeTreeRefChild(writeTreeRef,childName){return newWriteTreeRef(pathChild(writeTreeRef.treePath,childName),writeTreeRef.writeTree);}function newWriteTreeRef(path,writeTree){return{treePath:path,writeTree};}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class ChildChangeAccumulator{constructor(){this.changeMap=new Map();}trackChildChange(change){const type=change.type;const childKey=change.childName;assert(type===\"child_added\"/* CHILD_ADDED */||type===\"child_changed\"/* CHILD_CHANGED */||type===\"child_removed\"/* CHILD_REMOVED */,'Only child changes supported for tracking');assert(childKey!=='.priority','Only non-priority child changes can be tracked.');const oldChange=this.changeMap.get(childKey);if(oldChange){const oldType=oldChange.type;if(type===\"child_added\"/* CHILD_ADDED */&&oldType===\"child_removed\"/* CHILD_REMOVED */){this.changeMap.set(childKey,changeChildChanged(childKey,change.snapshotNode,oldChange.snapshotNode));}else if(type===\"child_removed\"/* CHILD_REMOVED */&&oldType===\"child_added\"/* CHILD_ADDED */){this.changeMap.delete(childKey);}else if(type===\"child_removed\"/* CHILD_REMOVED */&&oldType===\"child_changed\"/* CHILD_CHANGED */){this.changeMap.set(childKey,changeChildRemoved(childKey,oldChange.oldSnap));}else if(type===\"child_changed\"/* CHILD_CHANGED */&&oldType===\"child_added\"/* CHILD_ADDED */){this.changeMap.set(childKey,changeChildAdded(childKey,change.snapshotNode));}else if(type===\"child_changed\"/* CHILD_CHANGED */&&oldType===\"child_changed\"/* CHILD_CHANGED */){this.changeMap.set(childKey,changeChildChanged(childKey,change.snapshotNode,oldChange.oldSnap));}else{throw assertionError('Illegal combination of changes: '+change+' occurred after '+oldChange);}}else{this.changeMap.set(childKey,change);}}getChanges(){return Array.from(this.changeMap.values());}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */ // eslint-disable-next-line @typescript-eslint/naming-convention\nclass NoCompleteChildSource_{getCompleteChild(childKey){return null;}getChildAfterChild(index,child,reverse){return null;}}/**\r\n * Singleton instance.\r\n */const NO_COMPLETE_CHILD_SOURCE=new NoCompleteChildSource_();/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */class WriteTreeCompleteChildSource{constructor(writes_,viewCache_,optCompleteServerCache_=null){this.writes_=writes_;this.viewCache_=viewCache_;this.optCompleteServerCache_=optCompleteServerCache_;}getCompleteChild(childKey){const node=this.viewCache_.eventCache;if(node.isCompleteForChild(childKey)){return node.getNode().getImmediateChild(childKey);}else{const serverNode=this.optCompleteServerCache_!=null?new CacheNode(this.optCompleteServerCache_,true,false):this.viewCache_.serverCache;return writeTreeRefCalcCompleteChild(this.writes_,childKey,serverNode);}}getChildAfterChild(index,child,reverse){const completeServerData=this.optCompleteServerCache_!=null?this.optCompleteServerCache_:viewCacheGetCompleteServerSnap(this.viewCache_);const nodes=writeTreeRefCalcIndexedSlice(this.writes_,completeServerData,child,1,reverse,index);if(nodes.length===0){return null;}else{return nodes[0];}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */function newViewProcessor(filter){return{filter};}function viewProcessorAssertIndexed(viewProcessor,viewCache){assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),'Event snap not indexed');assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),'Server snap not indexed');}function viewProcessorApplyOperation(viewProcessor,oldViewCache,operation,writesCache,completeCache){const accumulator=new ChildChangeAccumulator();let newViewCache,filterServerNode;if(operation.type===OperationType.OVERWRITE){const overwrite=operation;if(overwrite.source.fromUser){newViewCache=viewProcessorApplyUserOverwrite(viewProcessor,oldViewCache,overwrite.path,overwrite.snap,writesCache,completeCache,accumulator);}else{assert(overwrite.source.fromServer,'Unknown source.');// We filter the node if it's a tagged update or the node has been previously filtered  and the\n// update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n// again\nfilterServerNode=overwrite.source.tagged||oldViewCache.serverCache.isFiltered()&&!pathIsEmpty(overwrite.path);newViewCache=viewProcessorApplyServerOverwrite(viewProcessor,oldViewCache,overwrite.path,overwrite.snap,writesCache,completeCache,filterServerNode,accumulator);}}else if(operation.type===OperationType.MERGE){const merge=operation;if(merge.source.fromUser){newViewCache=viewProcessorApplyUserMerge(viewProcessor,oldViewCache,merge.path,merge.children,writesCache,completeCache,accumulator);}else{assert(merge.source.fromServer,'Unknown source.');// We filter the node if it's a tagged update or the node has been previously filtered\nfilterServerNode=merge.source.tagged||oldViewCache.serverCache.isFiltered();newViewCache=viewProcessorApplyServerMerge(viewProcessor,oldViewCache,merge.path,merge.children,writesCache,completeCache,filterServerNode,accumulator);}}else if(operation.type===OperationType.ACK_USER_WRITE){const ackUserWrite=operation;if(!ackUserWrite.revert){newViewCache=viewProcessorAckUserWrite(viewProcessor,oldViewCache,ackUserWrite.path,ackUserWrite.affectedTree,writesCache,completeCache,accumulator);}else{newViewCache=viewProcessorRevertUserWrite(viewProcessor,oldViewCache,ackUserWrite.path,writesCache,completeCache,accumulator);}}else if(operation.type===OperationType.LISTEN_COMPLETE){newViewCache=viewProcessorListenComplete(viewProcessor,oldViewCache,operation.path,writesCache,accumulator);}else{throw assertionError('Unknown operation type: '+operation.type);}const changes=accumulator.getChanges();viewProcessorMaybeAddValueEvent(oldViewCache,newViewCache,changes);return{viewCache:newViewCache,changes};}function viewProcessorMaybeAddValueEvent(oldViewCache,newViewCache,accumulator){const eventSnap=newViewCache.eventCache;if(eventSnap.isFullyInitialized()){const isLeafOrEmpty=eventSnap.getNode().isLeafNode()||eventSnap.getNode().isEmpty();const oldCompleteSnap=viewCacheGetCompleteEventSnap(oldViewCache);if(accumulator.length>0||!oldViewCache.eventCache.isFullyInitialized()||isLeafOrEmpty&&!eventSnap.getNode().equals(oldCompleteSnap)||!eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())){accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));}}}function viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor,viewCache,changePath,writesCache,source,accumulator){const oldEventSnap=viewCache.eventCache;if(writeTreeRefShadowingWrite(writesCache,changePath)!=null){// we have a shadowing write, ignore changes\nreturn viewCache;}else{let newEventCache,serverNode;if(pathIsEmpty(changePath)){// TODO: figure out how this plays with \"sliding ack windows\"\nassert(viewCache.serverCache.isFullyInitialized(),'If change path is empty, we must have complete server data');if(viewCache.serverCache.isFiltered()){// We need to special case this, because we need to only apply writes to complete children, or\n// we might end up raising events for incomplete children. If the server data is filtered deep\n// writes cannot be guaranteed to be complete\nconst serverCache=viewCacheGetCompleteServerSnap(viewCache);const completeChildren=serverCache instanceof ChildrenNode?serverCache:ChildrenNode.EMPTY_NODE;const completeEventChildren=writeTreeRefCalcCompleteEventChildren(writesCache,completeChildren);newEventCache=viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(),completeEventChildren,accumulator);}else{const completeNode=writeTreeRefCalcCompleteEventCache(writesCache,viewCacheGetCompleteServerSnap(viewCache));newEventCache=viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(),completeNode,accumulator);}}else{const childKey=pathGetFront(changePath);if(childKey==='.priority'){assert(pathGetLength(changePath)===1,\"Can't have a priority with additional path components\");const oldEventNode=oldEventSnap.getNode();serverNode=viewCache.serverCache.getNode();// we might have overwrites for this priority\nconst updatedPriority=writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache,changePath,oldEventNode,serverNode);if(updatedPriority!=null){newEventCache=viewProcessor.filter.updatePriority(oldEventNode,updatedPriority);}else{// priority didn't change, keep old node\nnewEventCache=oldEventSnap.getNode();}}else{const childChangePath=pathPopFront(changePath);// update child\nlet newEventChild;if(oldEventSnap.isCompleteForChild(childKey)){serverNode=viewCache.serverCache.getNode();const eventChildUpdate=writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache,changePath,oldEventSnap.getNode(),serverNode);if(eventChildUpdate!=null){newEventChild=oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath,eventChildUpdate);}else{// Nothing changed, just keep the old child\nnewEventChild=oldEventSnap.getNode().getImmediateChild(childKey);}}else{newEventChild=writeTreeRefCalcCompleteChild(writesCache,childKey,viewCache.serverCache);}if(newEventChild!=null){newEventCache=viewProcessor.filter.updateChild(oldEventSnap.getNode(),childKey,newEventChild,childChangePath,source,accumulator);}else{// no complete child available or no change\nnewEventCache=oldEventSnap.getNode();}}}return viewCacheUpdateEventSnap(viewCache,newEventCache,oldEventSnap.isFullyInitialized()||pathIsEmpty(changePath),viewProcessor.filter.filtersNodes());}}function viewProcessorApplyServerOverwrite(viewProcessor,oldViewCache,changePath,changedSnap,writesCache,completeCache,filterServerNode,accumulator){const oldServerSnap=oldViewCache.serverCache;let newServerCache;const serverFilter=filterServerNode?viewProcessor.filter:viewProcessor.filter.getIndexedFilter();if(pathIsEmpty(changePath)){newServerCache=serverFilter.updateFullNode(oldServerSnap.getNode(),changedSnap,null);}else if(serverFilter.filtersNodes()&&!oldServerSnap.isFiltered()){// we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\nconst newServerNode=oldServerSnap.getNode().updateChild(changePath,changedSnap);newServerCache=serverFilter.updateFullNode(oldServerSnap.getNode(),newServerNode,null);}else{const childKey=pathGetFront(changePath);if(!oldServerSnap.isCompleteForPath(changePath)&&pathGetLength(changePath)>1){// We don't update incomplete nodes with updates intended for other listeners\nreturn oldViewCache;}const childChangePath=pathPopFront(changePath);const childNode=oldServerSnap.getNode().getImmediateChild(childKey);const newChildNode=childNode.updateChild(childChangePath,changedSnap);if(childKey==='.priority'){newServerCache=serverFilter.updatePriority(oldServerSnap.getNode(),newChildNode);}else{newServerCache=serverFilter.updateChild(oldServerSnap.getNode(),childKey,newChildNode,childChangePath,NO_COMPLETE_CHILD_SOURCE,null);}}const newViewCache=viewCacheUpdateServerSnap(oldViewCache,newServerCache,oldServerSnap.isFullyInitialized()||pathIsEmpty(changePath),serverFilter.filtersNodes());const source=new WriteTreeCompleteChildSource(writesCache,newViewCache,completeCache);return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor,newViewCache,changePath,writesCache,source,accumulator);}function viewProcessorApplyUserOverwrite(viewProcessor,oldViewCache,changePath,changedSnap,writesCache,completeCache,accumulator){const oldEventSnap=oldViewCache.eventCache;let newViewCache,newEventCache;const source=new WriteTreeCompleteChildSource(writesCache,oldViewCache,completeCache);if(pathIsEmpty(changePath)){newEventCache=viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(),changedSnap,accumulator);newViewCache=viewCacheUpdateEventSnap(oldViewCache,newEventCache,true,viewProcessor.filter.filtersNodes());}else{const childKey=pathGetFront(changePath);if(childKey==='.priority'){newEventCache=viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(),changedSnap);newViewCache=viewCacheUpdateEventSnap(oldViewCache,newEventCache,oldEventSnap.isFullyInitialized(),oldEventSnap.isFiltered());}else{const childChangePath=pathPopFront(changePath);const oldChild=oldEventSnap.getNode().getImmediateChild(childKey);let newChild;if(pathIsEmpty(childChangePath)){// Child overwrite, we can replace the child\nnewChild=changedSnap;}else{const childNode=source.getCompleteChild(childKey);if(childNode!=null){if(pathGetBack(childChangePath)==='.priority'&&childNode.getChild(pathParent(childChangePath)).isEmpty()){// This is a priority update on an empty node. If this node exists on the server, the\n// server will send down the priority in the update, so ignore for now\nnewChild=childNode;}else{newChild=childNode.updateChild(childChangePath,changedSnap);}}else{// There is no complete child node available\nnewChild=ChildrenNode.EMPTY_NODE;}}if(!oldChild.equals(newChild)){const newEventSnap=viewProcessor.filter.updateChild(oldEventSnap.getNode(),childKey,newChild,childChangePath,source,accumulator);newViewCache=viewCacheUpdateEventSnap(oldViewCache,newEventSnap,oldEventSnap.isFullyInitialized(),viewProcessor.filter.filtersNodes());}else{newViewCache=oldViewCache;}}}return newViewCache;}function viewProcessorCacheHasChild(viewCache,childKey){return viewCache.eventCache.isCompleteForChild(childKey);}function viewProcessorApplyUserMerge(viewProcessor,viewCache,path,changedChildren,writesCache,serverCache,accumulator){// HACK: In the case of a limit query, there may be some changes that bump things out of the\n// window leaving room for new items.  It's important we process these changes first, so we\n// iterate the changes twice, first processing any that affect items currently in view.\n// TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n// and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n// not the other.\nlet curViewCache=viewCache;changedChildren.foreach((relativePath,childNode)=>{const writePath=pathChild(path,relativePath);if(viewProcessorCacheHasChild(viewCache,pathGetFront(writePath))){curViewCache=viewProcessorApplyUserOverwrite(viewProcessor,curViewCache,writePath,childNode,writesCache,serverCache,accumulator);}});changedChildren.foreach((relativePath,childNode)=>{const writePath=pathChild(path,relativePath);if(!viewProcessorCacheHasChild(viewCache,pathGetFront(writePath))){curViewCache=viewProcessorApplyUserOverwrite(viewProcessor,curViewCache,writePath,childNode,writesCache,serverCache,accumulator);}});return curViewCache;}function viewProcessorApplyMerge(viewProcessor,node,merge){merge.foreach((relativePath,childNode)=>{node=node.updateChild(relativePath,childNode);});return node;}function viewProcessorApplyServerMerge(viewProcessor,viewCache,path,changedChildren,writesCache,serverCache,filterServerNode,accumulator){// If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n// wait for the complete data update coming soon.\nif(viewCache.serverCache.getNode().isEmpty()&&!viewCache.serverCache.isFullyInitialized()){return viewCache;}// HACK: In the case of a limit query, there may be some changes that bump things out of the\n// window leaving room for new items.  It's important we process these changes first, so we\n// iterate the changes twice, first processing any that affect items currently in view.\n// TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n// and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n// not the other.\nlet curViewCache=viewCache;let viewMergeTree;if(pathIsEmpty(path)){viewMergeTree=changedChildren;}else{viewMergeTree=new ImmutableTree(null).setTree(path,changedChildren);}const serverNode=viewCache.serverCache.getNode();viewMergeTree.children.inorderTraversal((childKey,childTree)=>{if(serverNode.hasChild(childKey)){const serverChild=viewCache.serverCache.getNode().getImmediateChild(childKey);const newChild=viewProcessorApplyMerge(viewProcessor,serverChild,childTree);curViewCache=viewProcessorApplyServerOverwrite(viewProcessor,curViewCache,new Path(childKey),newChild,writesCache,serverCache,filterServerNode,accumulator);}});viewMergeTree.children.inorderTraversal((childKey,childMergeTree)=>{const isUnknownDeepMerge=!viewCache.serverCache.isCompleteForChild(childKey)&&childMergeTree.value===undefined;if(!serverNode.hasChild(childKey)&&!isUnknownDeepMerge){const serverChild=viewCache.serverCache.getNode().getImmediateChild(childKey);const newChild=viewProcessorApplyMerge(viewProcessor,serverChild,childMergeTree);curViewCache=viewProcessorApplyServerOverwrite(viewProcessor,curViewCache,new Path(childKey),newChild,writesCache,serverCache,filterServerNode,accumulator);}});return curViewCache;}function viewProcessorAckUserWrite(viewProcessor,viewCache,ackPath,affectedTree,writesCache,completeCache,accumulator){if(writeTreeRefShadowingWrite(writesCache,ackPath)!=null){return viewCache;}// Only filter server node if it is currently filtered\nconst filterServerNode=viewCache.serverCache.isFiltered();// Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n// now that it won't be shadowed.\nconst serverCache=viewCache.serverCache;if(affectedTree.value!=null){// This is an overwrite.\nif(pathIsEmpty(ackPath)&&serverCache.isFullyInitialized()||serverCache.isCompleteForPath(ackPath)){return viewProcessorApplyServerOverwrite(viewProcessor,viewCache,ackPath,serverCache.getNode().getChild(ackPath),writesCache,completeCache,filterServerNode,accumulator);}else if(pathIsEmpty(ackPath)){// This is a goofy edge case where we are acking data at this location but don't have full data.  We\n// should just re-apply whatever we have in our cache as a merge.\nlet changedChildren=new ImmutableTree(null);serverCache.getNode().forEachChild(KEY_INDEX,(name,node)=>{changedChildren=changedChildren.set(new Path(name),node);});return viewProcessorApplyServerMerge(viewProcessor,viewCache,ackPath,changedChildren,writesCache,completeCache,filterServerNode,accumulator);}else{return viewCache;}}else{// This is a merge.\nlet changedChildren=new ImmutableTree(null);affectedTree.foreach((mergePath,value)=>{const serverCachePath=pathChild(ackPath,mergePath);if(serverCache.isCompleteForPath(serverCachePath)){changedChildren=changedChildren.set(mergePath,serverCache.getNode().getChild(serverCachePath));}});return viewProcessorApplyServerMerge(viewProcessor,viewCache,ackPath,changedChildren,writesCache,completeCache,filterServerNode,accumulator);}}function viewProcessorListenComplete(viewProcessor,viewCache,path,writesCache,accumulator){const oldServerNode=viewCache.serverCache;const newViewCache=viewCacheUpdateServerSnap(viewCache,oldServerNode.getNode(),oldServerNode.isFullyInitialized()||pathIsEmpty(path),oldServerNode.isFiltered());return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor,newViewCache,path,writesCache,NO_COMPLETE_CHILD_SOURCE,accumulator);}function viewProcessorRevertUserWrite(viewProcessor,viewCache,path,writesCache,completeServerCache,accumulator){let complete;if(writeTreeRefShadowingWrite(writesCache,path)!=null){return viewCache;}else{const source=new WriteTreeCompleteChildSource(writesCache,viewCache,completeServerCache);const oldEventCache=viewCache.eventCache.getNode();let newEventCache;if(pathIsEmpty(path)||pathGetFront(path)==='.priority'){let newNode;if(viewCache.serverCache.isFullyInitialized()){newNode=writeTreeRefCalcCompleteEventCache(writesCache,viewCacheGetCompleteServerSnap(viewCache));}else{const serverChildren=viewCache.serverCache.getNode();assert(serverChildren instanceof ChildrenNode,'serverChildren would be complete if leaf node');newNode=writeTreeRefCalcCompleteEventChildren(writesCache,serverChildren);}newNode=newNode;newEventCache=viewProcessor.filter.updateFullNode(oldEventCache,newNode,accumulator);}else{const childKey=pathGetFront(path);let newChild=writeTreeRefCalcCompleteChild(writesCache,childKey,viewCache.serverCache);if(newChild==null&&viewCache.serverCache.isCompleteForChild(childKey)){newChild=oldEventCache.getImmediateChild(childKey);}if(newChild!=null){newEventCache=viewProcessor.filter.updateChild(oldEventCache,childKey,newChild,pathPopFront(path),source,accumulator);}else if(viewCache.eventCache.getNode().hasChild(childKey)){// No complete child available, delete the existing one, if any\nnewEventCache=viewProcessor.filter.updateChild(oldEventCache,childKey,ChildrenNode.EMPTY_NODE,pathPopFront(path),source,accumulator);}else{newEventCache=oldEventCache;}if(newEventCache.isEmpty()&&viewCache.serverCache.isFullyInitialized()){// We might have reverted all child writes. Maybe the old event was a leaf node\ncomplete=writeTreeRefCalcCompleteEventCache(writesCache,viewCacheGetCompleteServerSnap(viewCache));if(complete.isLeafNode()){newEventCache=viewProcessor.filter.updateFullNode(newEventCache,complete,accumulator);}}}complete=viewCache.serverCache.isFullyInitialized()||writeTreeRefShadowingWrite(writesCache,newEmptyPath())!=null;return viewCacheUpdateEventSnap(viewCache,newEventCache,complete,viewProcessor.filter.filtersNodes());}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */class View{constructor(query_,initialViewCache){this.query_=query_;this.eventRegistrations_=[];const params=this.query_._queryParams;const indexFilter=new IndexedFilter(params.getIndex());const filter=queryParamsGetNodeFilter(params);this.processor_=newViewProcessor(filter);const initialServerCache=initialViewCache.serverCache;const initialEventCache=initialViewCache.eventCache;// Don't filter server node with other filter than index, wait for tagged listen\nconst serverSnap=indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE,initialServerCache.getNode(),null);const eventSnap=filter.updateFullNode(ChildrenNode.EMPTY_NODE,initialEventCache.getNode(),null);const newServerCache=new CacheNode(serverSnap,initialServerCache.isFullyInitialized(),indexFilter.filtersNodes());const newEventCache=new CacheNode(eventSnap,initialEventCache.isFullyInitialized(),filter.filtersNodes());this.viewCache_=newViewCache(newEventCache,newServerCache);this.eventGenerator_=new EventGenerator(this.query_);}get query(){return this.query_;}}function viewGetServerCache(view){return view.viewCache_.serverCache.getNode();}function viewGetCompleteNode(view){return viewCacheGetCompleteEventSnap(view.viewCache_);}function viewGetCompleteServerCache(view,path){const cache=viewCacheGetCompleteServerSnap(view.viewCache_);if(cache){// If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n// we need to see if it contains the child we're interested in.\nif(view.query._queryParams.loadsAllData()||!pathIsEmpty(path)&&!cache.getImmediateChild(pathGetFront(path)).isEmpty()){return cache.getChild(path);}}return null;}function viewIsEmpty(view){return view.eventRegistrations_.length===0;}function viewAddEventRegistration(view,eventRegistration){view.eventRegistrations_.push(eventRegistration);}/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */function viewRemoveEventRegistration(view,eventRegistration,cancelError){const cancelEvents=[];if(cancelError){assert(eventRegistration==null,'A cancel should cancel all event registrations.');const path=view.query._path;view.eventRegistrations_.forEach(registration=>{const maybeEvent=registration.createCancelEvent(cancelError,path);if(maybeEvent){cancelEvents.push(maybeEvent);}});}if(eventRegistration){let remaining=[];for(let i=0;i<view.eventRegistrations_.length;++i){const existing=view.eventRegistrations_[i];if(!existing.matches(eventRegistration)){remaining.push(existing);}else if(eventRegistration.hasAnyCallback()){// We're removing just this one\nremaining=remaining.concat(view.eventRegistrations_.slice(i+1));break;}}view.eventRegistrations_=remaining;}else{view.eventRegistrations_=[];}return cancelEvents;}/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */function viewApplyOperation(view,operation,writesCache,completeServerCache){if(operation.type===OperationType.MERGE&&operation.source.queryId!==null){assert(viewCacheGetCompleteServerSnap(view.viewCache_),'We should always have a full cache before handling merges');assert(viewCacheGetCompleteEventSnap(view.viewCache_),'Missing event cache, even though we have a server cache');}const oldViewCache=view.viewCache_;const result=viewProcessorApplyOperation(view.processor_,oldViewCache,operation,writesCache,completeServerCache);viewProcessorAssertIndexed(view.processor_,result.viewCache);assert(result.viewCache.serverCache.isFullyInitialized()||!oldViewCache.serverCache.isFullyInitialized(),'Once a server snap is complete, it should never go back');view.viewCache_=result.viewCache;return viewGenerateEventsForChanges_(view,result.changes,result.viewCache.eventCache.getNode(),null);}function viewGetInitialEvents(view,registration){const eventSnap=view.viewCache_.eventCache;const initialChanges=[];if(!eventSnap.getNode().isLeafNode()){const eventNode=eventSnap.getNode();eventNode.forEachChild(PRIORITY_INDEX,(key,childNode)=>{initialChanges.push(changeChildAdded(key,childNode));});}if(eventSnap.isFullyInitialized()){initialChanges.push(changeValue(eventSnap.getNode()));}return viewGenerateEventsForChanges_(view,initialChanges,eventSnap.getNode(),registration);}function viewGenerateEventsForChanges_(view,changes,eventCache,eventRegistration){const registrations=eventRegistration?[eventRegistration]:view.eventRegistrations_;return eventGeneratorGenerateEventsForChanges(view.eventGenerator_,changes,eventCache,registrations);}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let referenceConstructor$1;/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */class SyncPoint{constructor(){/**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */this.views=new Map();}}function syncPointSetReferenceConstructor(val){assert(!referenceConstructor$1,'__referenceConstructor has already been defined');referenceConstructor$1=val;}function syncPointGetReferenceConstructor(){assert(referenceConstructor$1,'Reference.ts has not been loaded');return referenceConstructor$1;}function syncPointIsEmpty(syncPoint){return syncPoint.views.size===0;}function syncPointApplyOperation(syncPoint,operation,writesCache,optCompleteServerCache){const queryId=operation.source.queryId;if(queryId!==null){const view=syncPoint.views.get(queryId);assert(view!=null,'SyncTree gave us an op for an invalid query.');return viewApplyOperation(view,operation,writesCache,optCompleteServerCache);}else{let events=[];for(const view of syncPoint.views.values()){events=events.concat(viewApplyOperation(view,operation,writesCache,optCompleteServerCache));}return events;}}/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */function syncPointGetView(syncPoint,query,writesCache,serverCache,serverCacheComplete){const queryId=query._queryIdentifier;const view=syncPoint.views.get(queryId);if(!view){// TODO: make writesCache take flag for complete server node\nlet eventCache=writeTreeRefCalcCompleteEventCache(writesCache,serverCacheComplete?serverCache:null);let eventCacheComplete=false;if(eventCache){eventCacheComplete=true;}else if(serverCache instanceof ChildrenNode){eventCache=writeTreeRefCalcCompleteEventChildren(writesCache,serverCache);eventCacheComplete=false;}else{eventCache=ChildrenNode.EMPTY_NODE;eventCacheComplete=false;}const viewCache=newViewCache(new CacheNode(eventCache,eventCacheComplete,false),new CacheNode(serverCache,serverCacheComplete,false));return new View(query,viewCache);}return view;}/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */function syncPointAddEventRegistration(syncPoint,query,eventRegistration,writesCache,serverCache,serverCacheComplete){const view=syncPointGetView(syncPoint,query,writesCache,serverCache,serverCacheComplete);if(!syncPoint.views.has(query._queryIdentifier)){syncPoint.views.set(query._queryIdentifier,view);}// This is guaranteed to exist now, we just created anything that was missing\nviewAddEventRegistration(view,eventRegistration);return viewGetInitialEvents(view,eventRegistration);}/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */function syncPointRemoveEventRegistration(syncPoint,query,eventRegistration,cancelError){const queryId=query._queryIdentifier;const removed=[];let cancelEvents=[];const hadCompleteView=syncPointHasCompleteView(syncPoint);if(queryId==='default'){// When you do ref.off(...), we search all views for the registration to remove.\nfor(const[viewQueryId,view]of syncPoint.views.entries()){cancelEvents=cancelEvents.concat(viewRemoveEventRegistration(view,eventRegistration,cancelError));if(viewIsEmpty(view)){syncPoint.views.delete(viewQueryId);// We'll deal with complete views later.\nif(!view.query._queryParams.loadsAllData()){removed.push(view.query);}}}}else{// remove the callback from the specific view.\nconst view=syncPoint.views.get(queryId);if(view){cancelEvents=cancelEvents.concat(viewRemoveEventRegistration(view,eventRegistration,cancelError));if(viewIsEmpty(view)){syncPoint.views.delete(queryId);// We'll deal with complete views later.\nif(!view.query._queryParams.loadsAllData()){removed.push(view.query);}}}}if(hadCompleteView&&!syncPointHasCompleteView(syncPoint)){// We removed our last complete view.\nremoved.push(new(syncPointGetReferenceConstructor())(query._repo,query._path));}return{removed,events:cancelEvents};}function syncPointGetQueryViews(syncPoint){const result=[];for(const view of syncPoint.views.values()){if(!view.query._queryParams.loadsAllData()){result.push(view);}}return result;}/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */function syncPointGetCompleteServerCache(syncPoint,path){let serverCache=null;for(const view of syncPoint.views.values()){serverCache=serverCache||viewGetCompleteServerCache(view,path);}return serverCache;}function syncPointViewForQuery(syncPoint,query){const params=query._queryParams;if(params.loadsAllData()){return syncPointGetCompleteView(syncPoint);}else{const queryId=query._queryIdentifier;return syncPoint.views.get(queryId);}}function syncPointViewExistsForQuery(syncPoint,query){return syncPointViewForQuery(syncPoint,query)!=null;}function syncPointHasCompleteView(syncPoint){return syncPointGetCompleteView(syncPoint)!=null;}function syncPointGetCompleteView(syncPoint){for(const view of syncPoint.views.values()){if(view.query._queryParams.loadsAllData()){return view;}}return null;}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */let referenceConstructor;function syncTreeSetReferenceConstructor(val){assert(!referenceConstructor,'__referenceConstructor has already been defined');referenceConstructor=val;}function syncTreeGetReferenceConstructor(){assert(referenceConstructor,'Reference.ts has not been loaded');return referenceConstructor;}/**\r\n * Static tracker for next query tag.\r\n */let syncTreeNextQueryTag_=1;/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */class SyncTree{/**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */constructor(listenProvider_){this.listenProvider_=listenProvider_;/**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */this.syncPointTree_=new ImmutableTree(null);/**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */this.pendingWriteTree_=newWriteTree();this.tagToQueryMap=new Map();this.queryToTagMap=new Map();}}/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyUserOverwrite(syncTree,path,newData,writeId,visible){// Record pending write.\nwriteTreeAddOverwrite(syncTree.pendingWriteTree_,path,newData,writeId,visible);if(!visible){return[];}else{return syncTreeApplyOperationToSyncPoints_(syncTree,new Overwrite(newOperationSourceUser(),path,newData));}}/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyUserMerge(syncTree,path,changedChildren,writeId){// Record pending merge.\nwriteTreeAddMerge(syncTree.pendingWriteTree_,path,changedChildren,writeId);const changeTree=ImmutableTree.fromObject(changedChildren);return syncTreeApplyOperationToSyncPoints_(syncTree,new Merge(newOperationSourceUser(),path,changeTree));}/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */function syncTreeAckUserWrite(syncTree,writeId,revert=false){const write=writeTreeGetWrite(syncTree.pendingWriteTree_,writeId);const needToReevaluate=writeTreeRemoveWrite(syncTree.pendingWriteTree_,writeId);if(!needToReevaluate){return[];}else{let affectedTree=new ImmutableTree(null);if(write.snap!=null){// overwrite\naffectedTree=affectedTree.set(newEmptyPath(),true);}else{each(write.children,pathString=>{affectedTree=affectedTree.set(new Path(pathString),true);});}return syncTreeApplyOperationToSyncPoints_(syncTree,new AckUserWrite(write.path,affectedTree,revert));}}/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyServerOverwrite(syncTree,path,newData){return syncTreeApplyOperationToSyncPoints_(syncTree,new Overwrite(newOperationSourceServer(),path,newData));}/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyServerMerge(syncTree,path,changedChildren){const changeTree=ImmutableTree.fromObject(changedChildren);return syncTreeApplyOperationToSyncPoints_(syncTree,new Merge(newOperationSourceServer(),path,changeTree));}/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyListenComplete(syncTree,path){return syncTreeApplyOperationToSyncPoints_(syncTree,new ListenComplete(newOperationSourceServer(),path));}/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyTaggedListenComplete(syncTree,path,tag){const queryKey=syncTreeQueryKeyForTag_(syncTree,tag);if(queryKey){const r=syncTreeParseQueryKey_(queryKey);const queryPath=r.path,queryId=r.queryId;const relativePath=newRelativePath(queryPath,path);const op=new ListenComplete(newOperationSourceServerTaggedQuery(queryId),relativePath);return syncTreeApplyTaggedOperation_(syncTree,queryPath,op);}else{// We've already removed the query. No big deal, ignore the update\nreturn[];}}/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */function syncTreeRemoveEventRegistration(syncTree,query,eventRegistration,cancelError){// Find the syncPoint first. Then deal with whether or not it has matching listeners\nconst path=query._path;const maybeSyncPoint=syncTree.syncPointTree_.get(path);let cancelEvents=[];// A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n// other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n// not loadsAllData().\nif(maybeSyncPoint&&(query._queryIdentifier==='default'||syncPointViewExistsForQuery(maybeSyncPoint,query))){const removedAndEvents=syncPointRemoveEventRegistration(maybeSyncPoint,query,eventRegistration,cancelError);if(syncPointIsEmpty(maybeSyncPoint)){syncTree.syncPointTree_=syncTree.syncPointTree_.remove(path);}const removed=removedAndEvents.removed;cancelEvents=removedAndEvents.events;// We may have just removed one of many listeners and can short-circuit this whole process\n// We may also not have removed a default listener, in which case all of the descendant listeners should already be\n// properly set up.\n//\n// Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n// queryId === 'default'\nconst removingDefault=-1!==removed.findIndex(query=>{return query._queryParams.loadsAllData();});const covered=syncTree.syncPointTree_.findOnPath(path,(relativePath,parentSyncPoint)=>syncPointHasCompleteView(parentSyncPoint));if(removingDefault&&!covered){const subtree=syncTree.syncPointTree_.subtree(path);// There are potentially child listeners. Determine what if any listens we need to send before executing the\n// removal\nif(!subtree.isEmpty()){// We need to fold over our subtree and collect the listeners to send\nconst newViews=syncTreeCollectDistinctViewsForSubTree_(subtree);// Ok, we've collected all the listens we need. Set them up.\nfor(let i=0;i<newViews.length;++i){const view=newViews[i],newQuery=view.query;const listener=syncTreeCreateListenerForView_(syncTree,view);syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery),syncTreeTagForQuery_(syncTree,newQuery),listener.hashFn,listener.onComplete);}}}// If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n// The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n// Also, note that if we have a cancelError, it's already been removed at the provider level.\nif(!covered&&removed.length>0&&!cancelError){// If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n// default. Otherwise, we need to iterate through and cancel each individual query\nif(removingDefault){// We don't tag default listeners\nconst defaultTag=null;syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query),defaultTag);}else{removed.forEach(queryToRemove=>{const tagToRemove=syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove),tagToRemove);});}}// Now, clear all of the tags we're tracking for the removed listens\nsyncTreeRemoveTags_(syncTree,removed);}return cancelEvents;}/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyTaggedQueryOverwrite(syncTree,path,snap,tag){const queryKey=syncTreeQueryKeyForTag_(syncTree,tag);if(queryKey!=null){const r=syncTreeParseQueryKey_(queryKey);const queryPath=r.path,queryId=r.queryId;const relativePath=newRelativePath(queryPath,path);const op=new Overwrite(newOperationSourceServerTaggedQuery(queryId),relativePath,snap);return syncTreeApplyTaggedOperation_(syncTree,queryPath,op);}else{// Query must have been removed already\nreturn[];}}/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeApplyTaggedQueryMerge(syncTree,path,changedChildren,tag){const queryKey=syncTreeQueryKeyForTag_(syncTree,tag);if(queryKey){const r=syncTreeParseQueryKey_(queryKey);const queryPath=r.path,queryId=r.queryId;const relativePath=newRelativePath(queryPath,path);const changeTree=ImmutableTree.fromObject(changedChildren);const op=new Merge(newOperationSourceServerTaggedQuery(queryId),relativePath,changeTree);return syncTreeApplyTaggedOperation_(syncTree,queryPath,op);}else{// We've already removed the query. No big deal, ignore the update\nreturn[];}}/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */function syncTreeAddEventRegistration(syncTree,query,eventRegistration){const path=query._path;let serverCache=null;let foundAncestorDefaultView=false;// Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n// Consider optimizing this once there's a better understanding of what actual behavior will be.\nsyncTree.syncPointTree_.foreachOnPath(path,(pathToSyncPoint,sp)=>{const relativePath=newRelativePath(pathToSyncPoint,path);serverCache=serverCache||syncPointGetCompleteServerCache(sp,relativePath);foundAncestorDefaultView=foundAncestorDefaultView||syncPointHasCompleteView(sp);});let syncPoint=syncTree.syncPointTree_.get(path);if(!syncPoint){syncPoint=new SyncPoint();syncTree.syncPointTree_=syncTree.syncPointTree_.set(path,syncPoint);}else{foundAncestorDefaultView=foundAncestorDefaultView||syncPointHasCompleteView(syncPoint);serverCache=serverCache||syncPointGetCompleteServerCache(syncPoint,newEmptyPath());}let serverCacheComplete;if(serverCache!=null){serverCacheComplete=true;}else{serverCacheComplete=false;serverCache=ChildrenNode.EMPTY_NODE;const subtree=syncTree.syncPointTree_.subtree(path);subtree.foreachChild((childName,childSyncPoint)=>{const completeCache=syncPointGetCompleteServerCache(childSyncPoint,newEmptyPath());if(completeCache){serverCache=serverCache.updateImmediateChild(childName,completeCache);}});}const viewAlreadyExists=syncPointViewExistsForQuery(syncPoint,query);if(!viewAlreadyExists&&!query._queryParams.loadsAllData()){// We need to track a tag for this query\nconst queryKey=syncTreeMakeQueryKey_(query);assert(!syncTree.queryToTagMap.has(queryKey),'View does not exist, but we have a tag');const tag=syncTreeGetNextQueryTag_();syncTree.queryToTagMap.set(queryKey,tag);syncTree.tagToQueryMap.set(tag,queryKey);}const writesCache=writeTreeChildWrites(syncTree.pendingWriteTree_,path);let events=syncPointAddEventRegistration(syncPoint,query,eventRegistration,writesCache,serverCache,serverCacheComplete);if(!viewAlreadyExists&&!foundAncestorDefaultView){const view=syncPointViewForQuery(syncPoint,query);events=events.concat(syncTreeSetupListener_(syncTree,query,view));}return events;}/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */function syncTreeCalcCompleteEventCache(syncTree,path,writeIdsToExclude){const includeHiddenSets=true;const writeTree=syncTree.pendingWriteTree_;const serverCache=syncTree.syncPointTree_.findOnPath(path,(pathSoFar,syncPoint)=>{const relativePath=newRelativePath(pathSoFar,path);const serverCache=syncPointGetCompleteServerCache(syncPoint,relativePath);if(serverCache){return serverCache;}});return writeTreeCalcCompleteEventCache(writeTree,path,serverCache,writeIdsToExclude,includeHiddenSets);}function syncTreeGetServerValue(syncTree,query){const path=query._path;let serverCache=null;// Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n// Consider optimizing this once there's a better understanding of what actual behavior will be.\nsyncTree.syncPointTree_.foreachOnPath(path,(pathToSyncPoint,sp)=>{const relativePath=newRelativePath(pathToSyncPoint,path);serverCache=serverCache||syncPointGetCompleteServerCache(sp,relativePath);});let syncPoint=syncTree.syncPointTree_.get(path);if(!syncPoint){syncPoint=new SyncPoint();syncTree.syncPointTree_=syncTree.syncPointTree_.set(path,syncPoint);}else{serverCache=serverCache||syncPointGetCompleteServerCache(syncPoint,newEmptyPath());}const serverCacheComplete=serverCache!=null;const serverCacheNode=serverCacheComplete?new CacheNode(serverCache,true,false):null;const writesCache=writeTreeChildWrites(syncTree.pendingWriteTree_,query._path);const view=syncPointGetView(syncPoint,query,writesCache,serverCacheComplete?serverCacheNode.getNode():ChildrenNode.EMPTY_NODE,serverCacheComplete);return viewGetCompleteNode(view);}/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */function syncTreeApplyOperationToSyncPoints_(syncTree,operation){return syncTreeApplyOperationHelper_(operation,syncTree.syncPointTree_,/*serverCache=*/null,writeTreeChildWrites(syncTree.pendingWriteTree_,newEmptyPath()));}/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */function syncTreeApplyOperationHelper_(operation,syncPointTree,serverCache,writesCache){if(pathIsEmpty(operation.path)){return syncTreeApplyOperationDescendantsHelper_(operation,syncPointTree,serverCache,writesCache);}else{const syncPoint=syncPointTree.get(newEmptyPath());// If we don't have cached server data, see if we can get it from this SyncPoint.\nif(serverCache==null&&syncPoint!=null){serverCache=syncPointGetCompleteServerCache(syncPoint,newEmptyPath());}let events=[];const childName=pathGetFront(operation.path);const childOperation=operation.operationForChild(childName);const childTree=syncPointTree.children.get(childName);if(childTree&&childOperation){const childServerCache=serverCache?serverCache.getImmediateChild(childName):null;const childWritesCache=writeTreeRefChild(writesCache,childName);events=events.concat(syncTreeApplyOperationHelper_(childOperation,childTree,childServerCache,childWritesCache));}if(syncPoint){events=events.concat(syncPointApplyOperation(syncPoint,operation,writesCache,serverCache));}return events;}}/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */function syncTreeApplyOperationDescendantsHelper_(operation,syncPointTree,serverCache,writesCache){const syncPoint=syncPointTree.get(newEmptyPath());// If we don't have cached server data, see if we can get it from this SyncPoint.\nif(serverCache==null&&syncPoint!=null){serverCache=syncPointGetCompleteServerCache(syncPoint,newEmptyPath());}let events=[];syncPointTree.children.inorderTraversal((childName,childTree)=>{const childServerCache=serverCache?serverCache.getImmediateChild(childName):null;const childWritesCache=writeTreeRefChild(writesCache,childName);const childOperation=operation.operationForChild(childName);if(childOperation){events=events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation,childTree,childServerCache,childWritesCache));}});if(syncPoint){events=events.concat(syncPointApplyOperation(syncPoint,operation,writesCache,serverCache));}return events;}function syncTreeCreateListenerForView_(syncTree,view){const query=view.query;const tag=syncTreeTagForQuery_(syncTree,query);return{hashFn:()=>{const cache=viewGetServerCache(view)||ChildrenNode.EMPTY_NODE;return cache.hash();},onComplete:status=>{if(status==='ok'){if(tag){return syncTreeApplyTaggedListenComplete(syncTree,query._path,tag);}else{return syncTreeApplyListenComplete(syncTree,query._path);}}else{// If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n// Note that this may need to be scoped to just this listener if we change permissions on filtered children\nconst error=errorForServerCode(status,query);return syncTreeRemoveEventRegistration(syncTree,query,/*eventRegistration*/null,error);}}};}/**\r\n * Return the tag associated with the given query.\r\n */function syncTreeTagForQuery_(syncTree,query){const queryKey=syncTreeMakeQueryKey_(query);return syncTree.queryToTagMap.get(queryKey);}/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */function syncTreeMakeQueryKey_(query){return query._path.toString()+'$'+query._queryIdentifier;}/**\r\n * Return the query associated with the given tag, if we have one\r\n */function syncTreeQueryKeyForTag_(syncTree,tag){return syncTree.tagToQueryMap.get(tag);}/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */function syncTreeParseQueryKey_(queryKey){const splitIndex=queryKey.indexOf('$');assert(splitIndex!==-1&&splitIndex<queryKey.length-1,'Bad queryKey.');return{queryId:queryKey.substr(splitIndex+1),path:new Path(queryKey.substr(0,splitIndex))};}/**\r\n * A helper method to apply tagged operations\r\n */function syncTreeApplyTaggedOperation_(syncTree,queryPath,operation){const syncPoint=syncTree.syncPointTree_.get(queryPath);assert(syncPoint,\"Missing sync point for query tag that we're tracking\");const writesCache=writeTreeChildWrites(syncTree.pendingWriteTree_,queryPath);return syncPointApplyOperation(syncPoint,operation,writesCache,null);}/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */function syncTreeCollectDistinctViewsForSubTree_(subtree){return subtree.fold((relativePath,maybeChildSyncPoint,childMap)=>{if(maybeChildSyncPoint&&syncPointHasCompleteView(maybeChildSyncPoint)){const completeView=syncPointGetCompleteView(maybeChildSyncPoint);return[completeView];}else{// No complete view here, flatten any deeper listens into an array\nlet views=[];if(maybeChildSyncPoint){views=syncPointGetQueryViews(maybeChildSyncPoint);}each(childMap,(_key,childViews)=>{views=views.concat(childViews);});return views;}});}/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */function syncTreeQueryForListening_(query){if(query._queryParams.loadsAllData()&&!query._queryParams.isDefault()){// We treat queries that load all data as default queries\n// Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n// from Query\nreturn new(syncTreeGetReferenceConstructor())(query._repo,query._path);}else{return query;}}function syncTreeRemoveTags_(syncTree,queries){for(let j=0;j<queries.length;++j){const removedQuery=queries[j];if(!removedQuery._queryParams.loadsAllData()){// We should have a tag for this\nconst removedQueryKey=syncTreeMakeQueryKey_(removedQuery);const removedQueryTag=syncTree.queryToTagMap.get(removedQueryKey);syncTree.queryToTagMap.delete(removedQueryKey);syncTree.tagToQueryMap.delete(removedQueryTag);}}}/**\r\n * Static accessor for query tags.\r\n */function syncTreeGetNextQueryTag_(){return syncTreeNextQueryTag_++;}/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */function syncTreeSetupListener_(syncTree,query,view){const path=query._path;const tag=syncTreeTagForQuery_(syncTree,query);const listener=syncTreeCreateListenerForView_(syncTree,view);const events=syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query),tag,listener.hashFn,listener.onComplete);const subtree=syncTree.syncPointTree_.subtree(path);// The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n// may need to shadow other listens as well.\nif(tag){assert(!syncPointHasCompleteView(subtree.value),\"If we're adding a query, it shouldn't be shadowed\");}else{// Shadow everything at or below this location, this is a default listener.\nconst queriesToStop=subtree.fold((relativePath,maybeChildSyncPoint,childMap)=>{if(!pathIsEmpty(relativePath)&&maybeChildSyncPoint&&syncPointHasCompleteView(maybeChildSyncPoint)){return[syncPointGetCompleteView(maybeChildSyncPoint).query];}else{// No default listener here, flatten any deeper queries into an array\nlet queries=[];if(maybeChildSyncPoint){queries=queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view=>view.query));}each(childMap,(_key,childQueries)=>{queries=queries.concat(childQueries);});return queries;}});for(let i=0;i<queriesToStop.length;++i){const queryToStop=queriesToStop[i];syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop),syncTreeTagForQuery_(syncTree,queryToStop));}}return events;}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */class ExistingValueProvider{constructor(node_){this.node_=node_;}getImmediateChild(childName){const child=this.node_.getImmediateChild(childName);return new ExistingValueProvider(child);}node(){return this.node_;}}class DeferredValueProvider{constructor(syncTree,path){this.syncTree_=syncTree;this.path_=path;}getImmediateChild(childName){const childPath=pathChild(this.path_,childName);return new DeferredValueProvider(this.syncTree_,childPath);}node(){return syncTreeCalcCompleteEventCache(this.syncTree_,this.path_);}}/**\r\n * Generate placeholders for deferred values.\r\n */const generateWithValues=function(values){values=values||{};values['timestamp']=values['timestamp']||new Date().getTime();return values;};/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */const resolveDeferredLeafValue=function(value,existingVal,serverValues){if(!value||typeof value!=='object'){return value;}assert('.sv'in value,'Unexpected leaf node or priority contents');if(typeof value['.sv']==='string'){return resolveScalarDeferredValue(value['.sv'],existingVal,serverValues);}else if(typeof value['.sv']==='object'){return resolveComplexDeferredValue(value['.sv'],existingVal);}else{assert(false,'Unexpected server value: '+JSON.stringify(value,null,2));}};const resolveScalarDeferredValue=function(op,existing,serverValues){switch(op){case'timestamp':return serverValues['timestamp'];default:assert(false,'Unexpected server value: '+op);}};const resolveComplexDeferredValue=function(op,existing,unused){if(!op.hasOwnProperty('increment')){assert(false,'Unexpected server value: '+JSON.stringify(op,null,2));}const delta=op['increment'];if(typeof delta!=='number'){assert(false,'Unexpected increment value: '+delta);}const existingNode=existing.node();assert(existingNode!==null&&typeof existingNode!=='undefined','Expected ChildrenNode.EMPTY_NODE for nulls');// Incrementing a non-number sets the value to the incremented amount\nif(!existingNode.isLeafNode()){return delta;}const leaf=existingNode;const existingVal=leaf.getValue();if(typeof existingVal!=='number'){return delta;}// No need to do over/underflow arithmetic here because JS only handles floats under the covers\nreturn existingVal+delta;};/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */const resolveDeferredValueTree=function(path,node,syncTree,serverValues){return resolveDeferredValue(node,new DeferredValueProvider(syncTree,path),serverValues);};/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */const resolveDeferredValueSnapshot=function(node,existing,serverValues){return resolveDeferredValue(node,new ExistingValueProvider(existing),serverValues);};function resolveDeferredValue(node,existingVal,serverValues){const rawPri=node.getPriority().val();const priority=resolveDeferredLeafValue(rawPri,existingVal.getImmediateChild('.priority'),serverValues);let newNode;if(node.isLeafNode()){const leafNode=node;const value=resolveDeferredLeafValue(leafNode.getValue(),existingVal,serverValues);if(value!==leafNode.getValue()||priority!==leafNode.getPriority().val()){return new LeafNode(value,nodeFromJSON(priority));}else{return node;}}else{const childrenNode=node;newNode=childrenNode;if(priority!==childrenNode.getPriority().val()){newNode=newNode.updatePriority(new LeafNode(priority));}childrenNode.forEachChild(PRIORITY_INDEX,(childName,childNode)=>{const newChildNode=resolveDeferredValue(childNode,existingVal.getImmediateChild(childName),serverValues);if(newChildNode!==childNode){newNode=newNode.updateImmediateChild(childName,newChildNode);}});return newNode;}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */class Tree{/**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */constructor(name='',parent=null,node={children:{},childCount:0}){this.name=name;this.parent=parent;this.node=node;}}/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */function treeSubTree(tree,pathObj){// TODO: Require pathObj to be Path?\nlet path=pathObj instanceof Path?pathObj:new Path(pathObj);let child=tree,next=pathGetFront(path);while(next!==null){const childNode=safeGet(child.node.children,next)||{children:{},childCount:0};child=new Tree(next,child,childNode);path=pathPopFront(path);next=pathGetFront(path);}return child;}/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */function treeGetValue(tree){return tree.node.value;}/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */function treeSetValue(tree,value){tree.node.value=value;treeUpdateParents(tree);}/**\r\n * @returns Whether the tree has any children.\r\n */function treeHasChildren(tree){return tree.node.childCount>0;}/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */function treeIsEmpty(tree){return treeGetValue(tree)===undefined&&!treeHasChildren(tree);}/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */function treeForEachChild(tree,action){each(tree.node.children,(child,childTree)=>{action(new Tree(child,tree,childTree));});}/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */function treeForEachDescendant(tree,action,includeSelf,childrenFirst){if(includeSelf&&!childrenFirst){action(tree);}treeForEachChild(tree,child=>{treeForEachDescendant(child,action,true,childrenFirst);});if(includeSelf&&childrenFirst){action(tree);}}/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */function treeForEachAncestor(tree,action,includeSelf){let node=includeSelf?tree:tree.parent;while(node!==null){if(action(node)){return true;}node=node.parent;}return false;}/**\r\n * @returns The path of this tree node, as a Path.\r\n */function treeGetPath(tree){return new Path(tree.parent===null?tree.name:treeGetPath(tree.parent)+'/'+tree.name);}/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */function treeUpdateParents(tree){if(tree.parent!==null){treeUpdateChild(tree.parent,tree.name,tree);}}/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */function treeUpdateChild(tree,childName,child){const childEmpty=treeIsEmpty(child);const childExists=contains(tree.node.children,childName);if(childEmpty&&childExists){delete tree.node.children[childName];tree.node.childCount--;treeUpdateParents(tree);}else if(!childEmpty&&!childExists){tree.node.children[childName]=child.node;tree.node.childCount++;treeUpdateParents(tree);}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * True for invalid Firebase keys\r\n */const INVALID_KEY_REGEX_=/[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */const INVALID_PATH_REGEX_=/[\\[\\].#$\\u0000-\\u001F\\u007F]/;/**\r\n * Maximum number of characters to allow in leaf value\r\n */const MAX_LEAF_SIZE_=10*1024*1024;const isValidKey=function(key){return typeof key==='string'&&key.length!==0&&!INVALID_KEY_REGEX_.test(key);};const isValidPathString=function(pathString){return typeof pathString==='string'&&pathString.length!==0&&!INVALID_PATH_REGEX_.test(pathString);};const isValidRootPathString=function(pathString){if(pathString){// Allow '/.info/' at the beginning.\npathString=pathString.replace(/^\\/*\\.info(\\/|$)/,'/');}return isValidPathString(pathString);};const isValidPriority=function(priority){return priority===null||typeof priority==='string'||typeof priority==='number'&&!isInvalidJSONNumber(priority)||priority&&typeof priority==='object'&&// eslint-disable-next-line @typescript-eslint/no-explicit-any\ncontains(priority,'.sv');};/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */const validateFirebaseDataArg=function(fnName,value,path,optional){if(optional&&value===undefined){return;}validateFirebaseData(errorPrefix(fnName,'value'),value,path);};/**\r\n * Validate a data object client-side before sending to server.\r\n */const validateFirebaseData=function(errorPrefix,data,path_){const path=path_ instanceof Path?new ValidationPath(path_,errorPrefix):path_;if(data===undefined){throw new Error(errorPrefix+'contains undefined '+validationPathToErrorString(path));}if(typeof data==='function'){throw new Error(errorPrefix+'contains a function '+validationPathToErrorString(path)+' with contents = '+data.toString());}if(isInvalidJSONNumber(data)){throw new Error(errorPrefix+'contains '+data.toString()+' '+validationPathToErrorString(path));}// Check max leaf size, but try to avoid the utf8 conversion if we can.\nif(typeof data==='string'&&data.length>MAX_LEAF_SIZE_/3&&stringLength(data)>MAX_LEAF_SIZE_){throw new Error(errorPrefix+'contains a string greater than '+MAX_LEAF_SIZE_+' utf8 bytes '+validationPathToErrorString(path)+\" ('\"+data.substring(0,50)+\"...')\");}// TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n// to save extra walking of large objects.\nif(data&&typeof data==='object'){let hasDotValue=false;let hasActualChild=false;each(data,(key,value)=>{if(key==='.value'){hasDotValue=true;}else if(key!=='.priority'&&key!=='.sv'){hasActualChild=true;if(!isValidKey(key)){throw new Error(errorPrefix+' contains an invalid key ('+key+') '+validationPathToErrorString(path)+'.  Keys must be non-empty strings '+'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');}}validationPathPush(path,key);validateFirebaseData(errorPrefix,value,path);validationPathPop(path);});if(hasDotValue&&hasActualChild){throw new Error(errorPrefix+' contains \".value\" child '+validationPathToErrorString(path)+' in addition to actual children.');}}};/**\r\n * Pre-validate paths passed in the firebase function.\r\n */const validateFirebaseMergePaths=function(errorPrefix,mergePaths){let i,curPath;for(i=0;i<mergePaths.length;i++){curPath=mergePaths[i];const keys=pathSlice(curPath);for(let j=0;j<keys.length;j++){if(keys[j]==='.priority'&&j===keys.length-1);else if(!isValidKey(keys[j])){throw new Error(errorPrefix+'contains an invalid key ('+keys[j]+') in path '+curPath.toString()+'. Keys must be non-empty strings '+'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');}}}// Check that update keys are not descendants of each other.\n// We rely on the property that sorting guarantees that ancestors come\n// right before descendants.\nmergePaths.sort(pathCompare);let prevPath=null;for(i=0;i<mergePaths.length;i++){curPath=mergePaths[i];if(prevPath!==null&&pathContains(prevPath,curPath)){throw new Error(errorPrefix+'contains a path '+prevPath.toString()+' that is ancestor of another path '+curPath.toString());}prevPath=curPath;}};/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */const validateFirebaseMergeDataArg=function(fnName,data,path,optional){if(optional&&data===undefined){return;}const errorPrefix$1=errorPrefix(fnName,'values');if(!(data&&typeof data==='object')||Array.isArray(data)){throw new Error(errorPrefix$1+' must be an object containing the children to replace.');}const mergePaths=[];each(data,(key,value)=>{const curPath=new Path(key);validateFirebaseData(errorPrefix$1,value,pathChild(path,curPath));if(pathGetBack(curPath)==='.priority'){if(!isValidPriority(value)){throw new Error(errorPrefix$1+\"contains an invalid value for '\"+curPath.toString()+\"', which must be a valid \"+'Firebase priority (a string, finite number, server value, or null).');}}mergePaths.push(curPath);});validateFirebaseMergePaths(errorPrefix$1,mergePaths);};const validatePriority=function(fnName,priority,optional){if(optional&&priority===undefined){return;}if(isInvalidJSONNumber(priority)){throw new Error(errorPrefix(fnName,'priority')+'is '+priority.toString()+', but must be a valid Firebase priority (a string, finite number, '+'server value, or null).');}// Special case to allow importing data with a .sv.\nif(!isValidPriority(priority)){throw new Error(errorPrefix(fnName,'priority')+'must be a valid Firebase priority '+'(a string, finite number, server value, or null).');}};const validateKey=function(fnName,argumentName,key,optional){if(optional&&key===undefined){return;}if(!isValidKey(key)){throw new Error(errorPrefix(fnName,argumentName)+'was an invalid key = \"'+key+'\".  Firebase keys must be non-empty strings and '+'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');}};/**\r\n * @internal\r\n */const validatePathString=function(fnName,argumentName,pathString,optional){if(optional&&pathString===undefined){return;}if(!isValidPathString(pathString)){throw new Error(errorPrefix(fnName,argumentName)+'was an invalid path = \"'+pathString+'\". Paths must be non-empty strings and '+'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');}};const validateRootPathString=function(fnName,argumentName,pathString,optional){if(pathString){// Allow '/.info/' at the beginning.\npathString=pathString.replace(/^\\/*\\.info(\\/|$)/,'/');}validatePathString(fnName,argumentName,pathString,optional);};/**\r\n * @internal\r\n */const validateWritablePath=function(fnName,path){if(pathGetFront(path)==='.info'){throw new Error(fnName+\" failed = Can't modify data under /.info/\");}};const validateUrl=function(fnName,parsedUrl){// TODO = Validate server better.\nconst pathString=parsedUrl.path.toString();if(!(typeof parsedUrl.repoInfo.host==='string')||parsedUrl.repoInfo.host.length===0||!isValidKey(parsedUrl.repoInfo.namespace)&&parsedUrl.repoInfo.host.split(':')[0]!=='localhost'||pathString.length!==0&&!isValidRootPathString(pathString)){throw new Error(errorPrefix(fnName,'url')+'must be a valid firebase URL and '+'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');}};/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */class EventQueue{constructor(){this.eventLists_=[];/**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */this.recursionDepth_=0;}}/**\r\n * @param eventDataList - The new events to queue.\r\n */function eventQueueQueueEvents(eventQueue,eventDataList){// We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\nlet currList=null;for(let i=0;i<eventDataList.length;i++){const data=eventDataList[i];const path=data.getPath();if(currList!==null&&!pathEquals(path,currList.path)){eventQueue.eventLists_.push(currList);currList=null;}if(currList===null){currList={events:[],path};}currList.events.push(data);}if(currList){eventQueue.eventLists_.push(currList);}}/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */function eventQueueRaiseEventsAtPath(eventQueue,path,eventDataList){eventQueueQueueEvents(eventQueue,eventDataList);eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue,eventPath=>pathEquals(eventPath,path));}/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */function eventQueueRaiseEventsForChangedPath(eventQueue,changedPath,eventDataList){eventQueueQueueEvents(eventQueue,eventDataList);eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue,eventPath=>pathContains(eventPath,changedPath)||pathContains(changedPath,eventPath));}function eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue,predicate){eventQueue.recursionDepth_++;let sentAll=true;for(let i=0;i<eventQueue.eventLists_.length;i++){const eventList=eventQueue.eventLists_[i];if(eventList){const eventPath=eventList.path;if(predicate(eventPath)){eventListRaise(eventQueue.eventLists_[i]);eventQueue.eventLists_[i]=null;}else{sentAll=false;}}}if(sentAll){eventQueue.eventLists_=[];}eventQueue.recursionDepth_--;}/**\r\n * Iterates through the list and raises each event\r\n */function eventListRaise(eventList){for(let i=0;i<eventList.events.length;i++){const eventData=eventList.events[i];if(eventData!==null){eventList.events[i]=null;const eventFn=eventData.getEventRunner();if(logger){log('event: '+eventData.toString());}exceptionGuard(eventFn);}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const INTERRUPT_REASON='repo_interrupt';/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */const MAX_TRANSACTION_RETRIES=25;/**\r\n * A connection to a single data repository.\r\n */class Repo{constructor(repoInfo_,forceRestClient_,authTokenProvider_,appCheckProvider_){this.repoInfo_=repoInfo_;this.forceRestClient_=forceRestClient_;this.authTokenProvider_=authTokenProvider_;this.appCheckProvider_=appCheckProvider_;this.dataUpdateCount=0;this.statsListener_=null;this.eventQueue_=new EventQueue();this.nextWriteId_=1;this.interceptServerDataCallback_=null;/** A list of data pieces and paths to be set when this client disconnects. */this.onDisconnect_=newSparseSnapshotTree();/** Stores queues of outstanding transactions for Firebase locations. */this.transactionQueueTree_=new Tree();// TODO: This should be @private but it's used by test_access.js and internal.js\nthis.persistentConnection_=null;// This key is intentionally not updated if RepoInfo is later changed or replaced\nthis.key=this.repoInfo_.toURLString();}/**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */toString(){return(this.repoInfo_.secure?'https://':'http://')+this.repoInfo_.host;}}function repoStart(repo,appId,authOverride){repo.stats_=statsManagerGetCollection(repo.repoInfo_);if(repo.forceRestClient_||beingCrawled()){repo.server_=new ReadonlyRestClient(repo.repoInfo_,(pathString,data,isMerge,tag)=>{repoOnDataUpdate(repo,pathString,data,isMerge,tag);},repo.authTokenProvider_,repo.appCheckProvider_);// Minor hack: Fire onConnect immediately, since there's no actual connection.\nsetTimeout(()=>repoOnConnectStatus(repo,/* connectStatus= */true),0);}else{// Validate authOverride\nif(typeof authOverride!=='undefined'&&authOverride!==null){if(typeof authOverride!=='object'){throw new Error('Only objects are supported for option databaseAuthVariableOverride');}try{stringify(authOverride);}catch(e){throw new Error('Invalid authOverride provided: '+e);}}repo.persistentConnection_=new PersistentConnection(repo.repoInfo_,appId,(pathString,data,isMerge,tag)=>{repoOnDataUpdate(repo,pathString,data,isMerge,tag);},connectStatus=>{repoOnConnectStatus(repo,connectStatus);},updates=>{repoOnServerInfoUpdate(repo,updates);},repo.authTokenProvider_,repo.appCheckProvider_,authOverride);repo.server_=repo.persistentConnection_;}repo.authTokenProvider_.addTokenChangeListener(token=>{repo.server_.refreshAuthToken(token);});repo.appCheckProvider_.addTokenChangeListener(result=>{repo.server_.refreshAppCheckToken(result.token);});// In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n// we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\nrepo.statsReporter_=statsManagerGetOrCreateReporter(repo.repoInfo_,()=>new StatsReporter(repo.stats_,repo.server_));// Used for .info.\nrepo.infoData_=new SnapshotHolder();repo.infoSyncTree_=new SyncTree({startListening:(query,tag,currentHashFn,onComplete)=>{let infoEvents=[];const node=repo.infoData_.getNode(query._path);// This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n// on initial data...\nif(!node.isEmpty()){infoEvents=syncTreeApplyServerOverwrite(repo.infoSyncTree_,query._path,node);setTimeout(()=>{onComplete('ok');},0);}return infoEvents;},stopListening:()=>{}});repoUpdateInfo(repo,'connected',false);repo.serverSyncTree_=new SyncTree({startListening:(query,tag,currentHashFn,onComplete)=>{repo.server_.listen(query,currentHashFn,tag,(status,data)=>{const events=onComplete(status,data);eventQueueRaiseEventsForChangedPath(repo.eventQueue_,query._path,events);});// No synchronous events for network-backed sync trees\nreturn[];},stopListening:(query,tag)=>{repo.server_.unlisten(query,tag);}});}/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */function repoServerTime(repo){const offsetNode=repo.infoData_.getNode(new Path('.info/serverTimeOffset'));const offset=offsetNode.val()||0;return new Date().getTime()+offset;}/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */function repoGenerateServerValues(repo){return generateWithValues({timestamp:repoServerTime(repo)});}/**\r\n * Called by realtime when we get new messages from the server.\r\n */function repoOnDataUpdate(repo,pathString,data,isMerge,tag){// For testing.\nrepo.dataUpdateCount++;const path=new Path(pathString);data=repo.interceptServerDataCallback_?repo.interceptServerDataCallback_(pathString,data):data;let events=[];if(tag){if(isMerge){const taggedChildren=map(data,raw=>nodeFromJSON(raw));events=syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_,path,taggedChildren,tag);}else{const taggedSnap=nodeFromJSON(data);events=syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_,path,taggedSnap,tag);}}else if(isMerge){const changedChildren=map(data,raw=>nodeFromJSON(raw));events=syncTreeApplyServerMerge(repo.serverSyncTree_,path,changedChildren);}else{const snap=nodeFromJSON(data);events=syncTreeApplyServerOverwrite(repo.serverSyncTree_,path,snap);}let affectedPath=path;if(events.length>0){// Since we have a listener outstanding for each transaction, receiving any events\n// is a proxy for some change having occurred.\naffectedPath=repoRerunTransactions(repo,path);}eventQueueRaiseEventsForChangedPath(repo.eventQueue_,affectedPath,events);}function repoOnConnectStatus(repo,connectStatus){repoUpdateInfo(repo,'connected',connectStatus);if(connectStatus===false){repoRunOnDisconnectEvents(repo);}}function repoOnServerInfoUpdate(repo,updates){each(updates,(key,value)=>{repoUpdateInfo(repo,key,value);});}function repoUpdateInfo(repo,pathString,value){const path=new Path('/.info/'+pathString);const newNode=nodeFromJSON(value);repo.infoData_.updateSnapshot(path,newNode);const events=syncTreeApplyServerOverwrite(repo.infoSyncTree_,path,newNode);eventQueueRaiseEventsForChangedPath(repo.eventQueue_,path,events);}function repoGetNextWriteId(repo){return repo.nextWriteId_++;}/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */function repoGetValue(repo,query){// Only active queries are cached. There is no persisted cache.\nconst cached=syncTreeGetServerValue(repo.serverSyncTree_,query);if(cached!=null){return Promise.resolve(cached);}return repo.server_.get(query).then(payload=>{const node=nodeFromJSON(payload).withIndex(query._queryParams.getIndex());const events=syncTreeApplyServerOverwrite(repo.serverSyncTree_,query._path,node);eventQueueRaiseEventsAtPath(repo.eventQueue_,query._path,events);return Promise.resolve(node);},err=>{repoLog(repo,'get for query '+stringify(query)+' failed: '+err);return Promise.reject(new Error(err));});}function repoSetWithPriority(repo,path,newVal,newPriority,onComplete){repoLog(repo,'set',{path:path.toString(),value:newVal,priority:newPriority});// TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n// (b) store unresolved paths on JSON parse\nconst serverValues=repoGenerateServerValues(repo);const newNodeUnresolved=nodeFromJSON(newVal,newPriority);const existing=syncTreeCalcCompleteEventCache(repo.serverSyncTree_,path);const newNode=resolveDeferredValueSnapshot(newNodeUnresolved,existing,serverValues);const writeId=repoGetNextWriteId(repo);const events=syncTreeApplyUserOverwrite(repo.serverSyncTree_,path,newNode,writeId,true);eventQueueQueueEvents(repo.eventQueue_,events);repo.server_.put(path.toString(),newNodeUnresolved.val(/*export=*/true),(status,errorReason)=>{const success=status==='ok';if(!success){warn('set at '+path+' failed: '+status);}const clearEvents=syncTreeAckUserWrite(repo.serverSyncTree_,writeId,!success);eventQueueRaiseEventsForChangedPath(repo.eventQueue_,path,clearEvents);repoCallOnCompleteCallback(repo,onComplete,status,errorReason);});const affectedPath=repoAbortTransactions(repo,path);repoRerunTransactions(repo,affectedPath);// We queued the events above, so just flush the queue here\neventQueueRaiseEventsForChangedPath(repo.eventQueue_,affectedPath,[]);}function repoUpdate(repo,path,childrenToMerge,onComplete){repoLog(repo,'update',{path:path.toString(),value:childrenToMerge});// Start with our existing data and merge each child into it.\nlet empty=true;const serverValues=repoGenerateServerValues(repo);const changedChildren={};each(childrenToMerge,(changedKey,changedValue)=>{empty=false;changedChildren[changedKey]=resolveDeferredValueTree(pathChild(path,changedKey),nodeFromJSON(changedValue),repo.serverSyncTree_,serverValues);});if(!empty){const writeId=repoGetNextWriteId(repo);const events=syncTreeApplyUserMerge(repo.serverSyncTree_,path,changedChildren,writeId);eventQueueQueueEvents(repo.eventQueue_,events);repo.server_.merge(path.toString(),childrenToMerge,(status,errorReason)=>{const success=status==='ok';if(!success){warn('update at '+path+' failed: '+status);}const clearEvents=syncTreeAckUserWrite(repo.serverSyncTree_,writeId,!success);const affectedPath=clearEvents.length>0?repoRerunTransactions(repo,path):path;eventQueueRaiseEventsForChangedPath(repo.eventQueue_,affectedPath,clearEvents);repoCallOnCompleteCallback(repo,onComplete,status,errorReason);});each(childrenToMerge,changedPath=>{const affectedPath=repoAbortTransactions(repo,pathChild(path,changedPath));repoRerunTransactions(repo,affectedPath);});// We queued the events above, so just flush the queue here\neventQueueRaiseEventsForChangedPath(repo.eventQueue_,path,[]);}else{log(\"update() called with empty data.  Don't do anything.\");repoCallOnCompleteCallback(repo,onComplete,'ok',undefined);}}/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */function repoRunOnDisconnectEvents(repo){repoLog(repo,'onDisconnectEvents');const serverValues=repoGenerateServerValues(repo);const resolvedOnDisconnectTree=newSparseSnapshotTree();sparseSnapshotTreeForEachTree(repo.onDisconnect_,newEmptyPath(),(path,node)=>{const resolved=resolveDeferredValueTree(path,node,repo.serverSyncTree_,serverValues);sparseSnapshotTreeRemember(resolvedOnDisconnectTree,path,resolved);});let events=[];sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree,newEmptyPath(),(path,snap)=>{events=events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_,path,snap));const affectedPath=repoAbortTransactions(repo,path);repoRerunTransactions(repo,affectedPath);});repo.onDisconnect_=newSparseSnapshotTree();eventQueueRaiseEventsForChangedPath(repo.eventQueue_,newEmptyPath(),events);}function repoOnDisconnectCancel(repo,path,onComplete){repo.server_.onDisconnectCancel(path.toString(),(status,errorReason)=>{if(status==='ok'){sparseSnapshotTreeForget(repo.onDisconnect_,path);}repoCallOnCompleteCallback(repo,onComplete,status,errorReason);});}function repoOnDisconnectSet(repo,path,value,onComplete){const newNode=nodeFromJSON(value);repo.server_.onDisconnectPut(path.toString(),newNode.val(/*export=*/true),(status,errorReason)=>{if(status==='ok'){sparseSnapshotTreeRemember(repo.onDisconnect_,path,newNode);}repoCallOnCompleteCallback(repo,onComplete,status,errorReason);});}function repoOnDisconnectSetWithPriority(repo,path,value,priority,onComplete){const newNode=nodeFromJSON(value,priority);repo.server_.onDisconnectPut(path.toString(),newNode.val(/*export=*/true),(status,errorReason)=>{if(status==='ok'){sparseSnapshotTreeRemember(repo.onDisconnect_,path,newNode);}repoCallOnCompleteCallback(repo,onComplete,status,errorReason);});}function repoOnDisconnectUpdate(repo,path,childrenToMerge,onComplete){if(isEmpty(childrenToMerge)){log(\"onDisconnect().update() called with empty data.  Don't do anything.\");repoCallOnCompleteCallback(repo,onComplete,'ok',undefined);return;}repo.server_.onDisconnectMerge(path.toString(),childrenToMerge,(status,errorReason)=>{if(status==='ok'){each(childrenToMerge,(childName,childNode)=>{const newChildNode=nodeFromJSON(childNode);sparseSnapshotTreeRemember(repo.onDisconnect_,pathChild(path,childName),newChildNode);});}repoCallOnCompleteCallback(repo,onComplete,status,errorReason);});}function repoAddEventCallbackForQuery(repo,query,eventRegistration){let events;if(pathGetFront(query._path)==='.info'){events=syncTreeAddEventRegistration(repo.infoSyncTree_,query,eventRegistration);}else{events=syncTreeAddEventRegistration(repo.serverSyncTree_,query,eventRegistration);}eventQueueRaiseEventsAtPath(repo.eventQueue_,query._path,events);}function repoRemoveEventCallbackForQuery(repo,query,eventRegistration){// These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n// a little bit by handling the return values anyways.\nlet events;if(pathGetFront(query._path)==='.info'){events=syncTreeRemoveEventRegistration(repo.infoSyncTree_,query,eventRegistration);}else{events=syncTreeRemoveEventRegistration(repo.serverSyncTree_,query,eventRegistration);}eventQueueRaiseEventsAtPath(repo.eventQueue_,query._path,events);}function repoInterrupt(repo){if(repo.persistentConnection_){repo.persistentConnection_.interrupt(INTERRUPT_REASON);}}function repoResume(repo){if(repo.persistentConnection_){repo.persistentConnection_.resume(INTERRUPT_REASON);}}function repoLog(repo,...varArgs){let prefix='';if(repo.persistentConnection_){prefix=repo.persistentConnection_.id+':';}log(prefix,...varArgs);}function repoCallOnCompleteCallback(repo,callback,status,errorReason){if(callback){exceptionGuard(()=>{if(status==='ok'){callback(null);}else{const code=(status||'error').toUpperCase();let message=code;if(errorReason){message+=': '+errorReason;}const error=new Error(message);// eslint-disable-next-line @typescript-eslint/no-explicit-any\nerror.code=code;callback(error);}});}}/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */function repoStartTransaction(repo,path,transactionUpdate,onComplete,unwatcher,applyLocally){repoLog(repo,'transaction on '+path);// Initialize transaction.\nconst transaction={path,update:transactionUpdate,onComplete,// One of TransactionStatus enums.\nstatus:null,// Used when combining transactions at different locations to figure out\n// which one goes first.\norder:LUIDGenerator(),// Whether to raise local events for this transaction.\napplyLocally,// Count of how many times we've retried the transaction.\nretryCount:0,// Function to call to clean up our .on() listener.\nunwatcher,// Stores why a transaction was aborted.\nabortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null};// Run transaction initially.\nconst currentState=repoGetLatestState(repo,path,undefined);transaction.currentInputSnapshot=currentState;const newVal=transaction.update(currentState.val());if(newVal===undefined){// Abort transaction.\ntransaction.unwatcher();transaction.currentOutputSnapshotRaw=null;transaction.currentOutputSnapshotResolved=null;if(transaction.onComplete){transaction.onComplete(null,false,transaction.currentInputSnapshot);}}else{validateFirebaseData('transaction failed: Data returned ',newVal,transaction.path);// Mark as run and add to our queue.\ntransaction.status=0/* RUN */;const queueNode=treeSubTree(repo.transactionQueueTree_,path);const nodeQueue=treeGetValue(queueNode)||[];nodeQueue.push(transaction);treeSetValue(queueNode,nodeQueue);// Update visibleData and raise events\n// Note: We intentionally raise events after updating all of our\n// transaction state, since the user could start new transactions from the\n// event callbacks.\nlet priorityForNode;if(typeof newVal==='object'&&newVal!==null&&contains(newVal,'.priority')){// eslint-disable-next-line @typescript-eslint/no-explicit-any\npriorityForNode=safeGet(newVal,'.priority');assert(isValidPriority(priorityForNode),'Invalid priority returned by transaction. '+'Priority must be a valid string, finite number, server value, or null.');}else{const currentNode=syncTreeCalcCompleteEventCache(repo.serverSyncTree_,path)||ChildrenNode.EMPTY_NODE;priorityForNode=currentNode.getPriority().val();}const serverValues=repoGenerateServerValues(repo);const newNodeUnresolved=nodeFromJSON(newVal,priorityForNode);const newNode=resolveDeferredValueSnapshot(newNodeUnresolved,currentState,serverValues);transaction.currentOutputSnapshotRaw=newNodeUnresolved;transaction.currentOutputSnapshotResolved=newNode;transaction.currentWriteId=repoGetNextWriteId(repo);const events=syncTreeApplyUserOverwrite(repo.serverSyncTree_,path,newNode,transaction.currentWriteId,transaction.applyLocally);eventQueueRaiseEventsForChangedPath(repo.eventQueue_,path,events);repoSendReadyTransactions(repo,repo.transactionQueueTree_);}}/**\r\n * @param excludeSets - A specific set to exclude\r\n */function repoGetLatestState(repo,path,excludeSets){return syncTreeCalcCompleteEventCache(repo.serverSyncTree_,path,excludeSets)||ChildrenNode.EMPTY_NODE;}/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */function repoSendReadyTransactions(repo,node=repo.transactionQueueTree_){// Before recursing, make sure any completed transactions are removed.\nif(!node){repoPruneCompletedTransactionsBelowNode(repo,node);}if(treeGetValue(node)){const queue=repoBuildTransactionQueue(repo,node);assert(queue.length>0,'Sending zero length transaction queue');const allRun=queue.every(transaction=>transaction.status===0/* RUN */);// If they're all run (and not sent), we can send them.  Else, we must wait.\nif(allRun){repoSendTransactionQueue(repo,treeGetPath(node),queue);}}else if(treeHasChildren(node)){treeForEachChild(node,childNode=>{repoSendReadyTransactions(repo,childNode);});}}/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */function repoSendTransactionQueue(repo,path,queue){// Mark transactions as sent and increment retry count!\nconst setsToIgnore=queue.map(txn=>{return txn.currentWriteId;});const latestState=repoGetLatestState(repo,path,setsToIgnore);let snapToSend=latestState;const latestHash=latestState.hash();for(let i=0;i<queue.length;i++){const txn=queue[i];assert(txn.status===0/* RUN */,'tryToSendTransactionQueue_: items in queue should all be run.');txn.status=1/* SENT */;txn.retryCount++;const relativePath=newRelativePath(path,txn.path);// If we've gotten to this point, the output snapshot must be defined.\nsnapToSend=snapToSend.updateChild(relativePath/** @type {!Node} */,txn.currentOutputSnapshotRaw);}const dataToSend=snapToSend.val(true);const pathToSend=path;// Send the put.\nrepo.server_.put(pathToSend.toString(),dataToSend,status=>{repoLog(repo,'transaction put response',{path:pathToSend.toString(),status});let events=[];if(status==='ok'){// Queue up the callbacks and fire them after cleaning up all of our\n// transaction state, since the callback could trigger more\n// transactions or sets.\nconst callbacks=[];for(let i=0;i<queue.length;i++){queue[i].status=2/* COMPLETED */;events=events.concat(syncTreeAckUserWrite(repo.serverSyncTree_,queue[i].currentWriteId));if(queue[i].onComplete){// We never unset the output snapshot, and given that this\n// transaction is complete, it should be set\ncallbacks.push(()=>queue[i].onComplete(null,true,queue[i].currentOutputSnapshotResolved));}queue[i].unwatcher();}// Now remove the completed transactions.\nrepoPruneCompletedTransactionsBelowNode(repo,treeSubTree(repo.transactionQueueTree_,path));// There may be pending transactions that we can now send.\nrepoSendReadyTransactions(repo,repo.transactionQueueTree_);eventQueueRaiseEventsForChangedPath(repo.eventQueue_,path,events);// Finally, trigger onComplete callbacks.\nfor(let i=0;i<callbacks.length;i++){exceptionGuard(callbacks[i]);}}else{// transactions are no longer sent.  Update their status appropriately.\nif(status==='datastale'){for(let i=0;i<queue.length;i++){if(queue[i].status===3/* SENT_NEEDS_ABORT */){queue[i].status=4/* NEEDS_ABORT */;}else{queue[i].status=0/* RUN */;}}}else{warn('transaction at '+pathToSend.toString()+' failed: '+status);for(let i=0;i<queue.length;i++){queue[i].status=4/* NEEDS_ABORT */;queue[i].abortReason=status;}}repoRerunTransactions(repo,path);}},latestHash);}/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */function repoRerunTransactions(repo,changedPath){const rootMostTransactionNode=repoGetAncestorTransactionNode(repo,changedPath);const path=treeGetPath(rootMostTransactionNode);const queue=repoBuildTransactionQueue(repo,rootMostTransactionNode);repoRerunTransactionQueue(repo,queue,path);return path;}/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */function repoRerunTransactionQueue(repo,queue,path){if(queue.length===0){return;// Nothing to do!\n}// Queue up the callbacks and fire them after cleaning up all of our\n// transaction state, since the callback could trigger more transactions or\n// sets.\nconst callbacks=[];let events=[];// Ignore all of the sets we're going to re-run.\nconst txnsToRerun=queue.filter(q=>{return q.status===0/* RUN */;});const setsToIgnore=txnsToRerun.map(q=>{return q.currentWriteId;});for(let i=0;i<queue.length;i++){const transaction=queue[i];const relativePath=newRelativePath(path,transaction.path);let abortTransaction=false,abortReason;assert(relativePath!==null,'rerunTransactionsUnderNode_: relativePath should not be null.');if(transaction.status===4/* NEEDS_ABORT */){abortTransaction=true;abortReason=transaction.abortReason;events=events.concat(syncTreeAckUserWrite(repo.serverSyncTree_,transaction.currentWriteId,true));}else if(transaction.status===0/* RUN */){if(transaction.retryCount>=MAX_TRANSACTION_RETRIES){abortTransaction=true;abortReason='maxretry';events=events.concat(syncTreeAckUserWrite(repo.serverSyncTree_,transaction.currentWriteId,true));}else{// This code reruns a transaction\nconst currentNode=repoGetLatestState(repo,transaction.path,setsToIgnore);transaction.currentInputSnapshot=currentNode;const newData=queue[i].update(currentNode.val());if(newData!==undefined){validateFirebaseData('transaction failed: Data returned ',newData,transaction.path);let newDataNode=nodeFromJSON(newData);const hasExplicitPriority=typeof newData==='object'&&newData!=null&&contains(newData,'.priority');if(!hasExplicitPriority){// Keep the old priority if there wasn't a priority explicitly specified.\nnewDataNode=newDataNode.updatePriority(currentNode.getPriority());}const oldWriteId=transaction.currentWriteId;const serverValues=repoGenerateServerValues(repo);const newNodeResolved=resolveDeferredValueSnapshot(newDataNode,currentNode,serverValues);transaction.currentOutputSnapshotRaw=newDataNode;transaction.currentOutputSnapshotResolved=newNodeResolved;transaction.currentWriteId=repoGetNextWriteId(repo);// Mutates setsToIgnore in place\nsetsToIgnore.splice(setsToIgnore.indexOf(oldWriteId),1);events=events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_,transaction.path,newNodeResolved,transaction.currentWriteId,transaction.applyLocally));events=events.concat(syncTreeAckUserWrite(repo.serverSyncTree_,oldWriteId,true));}else{abortTransaction=true;abortReason='nodata';events=events.concat(syncTreeAckUserWrite(repo.serverSyncTree_,transaction.currentWriteId,true));}}}eventQueueRaiseEventsForChangedPath(repo.eventQueue_,path,events);events=[];if(abortTransaction){// Abort.\nqueue[i].status=2/* COMPLETED */;// Removing a listener can trigger pruning which can muck with\n// mergedData/visibleData (as it prunes data). So defer the unwatcher\n// until we're done.\n(function(unwatcher){setTimeout(unwatcher,Math.floor(0));})(queue[i].unwatcher);if(queue[i].onComplete){if(abortReason==='nodata'){callbacks.push(()=>queue[i].onComplete(null,false,queue[i].currentInputSnapshot));}else{callbacks.push(()=>queue[i].onComplete(new Error(abortReason),false,null));}}}}// Clean up completed transactions.\nrepoPruneCompletedTransactionsBelowNode(repo,repo.transactionQueueTree_);// Now fire callbacks, now that we're in a good, known state.\nfor(let i=0;i<callbacks.length;i++){exceptionGuard(callbacks[i]);}// Try to send the transaction result to the server.\nrepoSendReadyTransactions(repo,repo.transactionQueueTree_);}/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */function repoGetAncestorTransactionNode(repo,path){let front;// Start at the root and walk deeper into the tree towards path until we\n// find a node with pending transactions.\nlet transactionNode=repo.transactionQueueTree_;front=pathGetFront(path);while(front!==null&&treeGetValue(transactionNode)===undefined){transactionNode=treeSubTree(transactionNode,front);path=pathPopFront(path);front=pathGetFront(path);}return transactionNode;}/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */function repoBuildTransactionQueue(repo,transactionNode){// Walk any child transaction queues and aggregate them into a single queue.\nconst transactionQueue=[];repoAggregateTransactionQueuesForNode(repo,transactionNode,transactionQueue);// Sort them by the order the transactions were created.\ntransactionQueue.sort((a,b)=>a.order-b.order);return transactionQueue;}function repoAggregateTransactionQueuesForNode(repo,node,queue){const nodeQueue=treeGetValue(node);if(nodeQueue){for(let i=0;i<nodeQueue.length;i++){queue.push(nodeQueue[i]);}}treeForEachChild(node,child=>{repoAggregateTransactionQueuesForNode(repo,child,queue);});}/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */function repoPruneCompletedTransactionsBelowNode(repo,node){const queue=treeGetValue(node);if(queue){let to=0;for(let from=0;from<queue.length;from++){if(queue[from].status!==2/* COMPLETED */){queue[to]=queue[from];to++;}}queue.length=to;treeSetValue(node,queue.length>0?queue:undefined);}treeForEachChild(node,childNode=>{repoPruneCompletedTransactionsBelowNode(repo,childNode);});}/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */function repoAbortTransactions(repo,path){const affectedPath=treeGetPath(repoGetAncestorTransactionNode(repo,path));const transactionNode=treeSubTree(repo.transactionQueueTree_,path);treeForEachAncestor(transactionNode,node=>{repoAbortTransactionsOnNode(repo,node);});repoAbortTransactionsOnNode(repo,transactionNode);treeForEachDescendant(transactionNode,node=>{repoAbortTransactionsOnNode(repo,node);});return affectedPath;}/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */function repoAbortTransactionsOnNode(repo,node){const queue=treeGetValue(node);if(queue){// Queue up the callbacks and fire them after cleaning up all of our\n// transaction state, since the callback could trigger more transactions\n// or sets.\nconst callbacks=[];// Go through queue.  Any already-sent transactions must be marked for\n// abort, while the unsent ones can be immediately aborted and removed.\nlet events=[];let lastSent=-1;for(let i=0;i<queue.length;i++){if(queue[i].status===3/* SENT_NEEDS_ABORT */);else if(queue[i].status===1/* SENT */){assert(lastSent===i-1,'All SENT items should be at beginning of queue.');lastSent=i;// Mark transaction for abort when it comes back.\nqueue[i].status=3/* SENT_NEEDS_ABORT */;queue[i].abortReason='set';}else{assert(queue[i].status===0/* RUN */,'Unexpected transaction status in abort');// We can abort it immediately.\nqueue[i].unwatcher();events=events.concat(syncTreeAckUserWrite(repo.serverSyncTree_,queue[i].currentWriteId,true));if(queue[i].onComplete){callbacks.push(queue[i].onComplete.bind(null,new Error('set'),false,null));}}}if(lastSent===-1){// We're not waiting for any sent transactions.  We can clear the queue.\ntreeSetValue(node,undefined);}else{// Remove the transactions we aborted.\nqueue.length=lastSent+1;}// Now fire the callbacks.\neventQueueRaiseEventsForChangedPath(repo.eventQueue_,treeGetPath(node),events);for(let i=0;i<callbacks.length;i++){exceptionGuard(callbacks[i]);}}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */function decodePath(pathString){let pathStringDecoded='';const pieces=pathString.split('/');for(let i=0;i<pieces.length;i++){if(pieces[i].length>0){let piece=pieces[i];try{piece=decodeURIComponent(piece.replace(/\\+/g,' '));}catch(e){}pathStringDecoded+='/'+piece;}}return pathStringDecoded;}/**\r\n * @returns key value hash\r\n */function decodeQuery(queryString){const results={};if(queryString.charAt(0)==='?'){queryString=queryString.substring(1);}for(const segment of queryString.split('&')){if(segment.length===0){continue;}const kv=segment.split('=');if(kv.length===2){results[decodeURIComponent(kv[0])]=decodeURIComponent(kv[1]);}else{warn(`Invalid query segment '${segment}' in query '${queryString}'`);}}return results;}const parseRepoInfo=function(dataURL,nodeAdmin){const parsedUrl=parseDatabaseURL(dataURL),namespace=parsedUrl.namespace;if(parsedUrl.domain==='firebase.com'){fatal(parsedUrl.host+' is no longer supported. '+'Please use <YOUR FIREBASE>.firebaseio.com instead');}// Catch common error of uninitialized namespace value.\nif((!namespace||namespace==='undefined')&&parsedUrl.domain!=='localhost'){fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');}if(!parsedUrl.secure){warnIfPageIsSecure();}const webSocketOnly=parsedUrl.scheme==='ws'||parsedUrl.scheme==='wss';return{repoInfo:new RepoInfo(parsedUrl.host,parsedUrl.secure,namespace,nodeAdmin,webSocketOnly,/*persistenceKey=*/'',/*includeNamespaceInQueryParams=*/namespace!==parsedUrl.subdomain),path:new Path(parsedUrl.pathString)};};const parseDatabaseURL=function(dataURL){// Default to empty strings in the event of a malformed string.\nlet host='',domain='',subdomain='',pathString='',namespace='';// Always default to SSL, unless otherwise specified.\nlet secure=true,scheme='https',port=443;// Don't do any validation here. The caller is responsible for validating the result of parsing.\nif(typeof dataURL==='string'){// Parse scheme.\nlet colonInd=dataURL.indexOf('//');if(colonInd>=0){scheme=dataURL.substring(0,colonInd-1);dataURL=dataURL.substring(colonInd+2);}// Parse host, path, and query string.\nlet slashInd=dataURL.indexOf('/');if(slashInd===-1){slashInd=dataURL.length;}let questionMarkInd=dataURL.indexOf('?');if(questionMarkInd===-1){questionMarkInd=dataURL.length;}host=dataURL.substring(0,Math.min(slashInd,questionMarkInd));if(slashInd<questionMarkInd){// For pathString, questionMarkInd will always come after slashInd\npathString=decodePath(dataURL.substring(slashInd,questionMarkInd));}const queryParams=decodeQuery(dataURL.substring(Math.min(dataURL.length,questionMarkInd)));// If we have a port, use scheme for determining if it's secure.\ncolonInd=host.indexOf(':');if(colonInd>=0){secure=scheme==='https'||scheme==='wss';port=parseInt(host.substring(colonInd+1),10);}else{colonInd=host.length;}const hostWithoutPort=host.slice(0,colonInd);if(hostWithoutPort.toLowerCase()==='localhost'){domain='localhost';}else if(hostWithoutPort.split('.').length<=2){domain=hostWithoutPort;}else{// Interpret the subdomain of a 3 or more component URL as the namespace name.\nconst dotInd=host.indexOf('.');subdomain=host.substring(0,dotInd).toLowerCase();domain=host.substring(dotInd+1);// Normalize namespaces to lowercase to share storage / connection.\nnamespace=subdomain;}// Always treat the value of the `ns` as the namespace name if it is present.\nif('ns'in queryParams){namespace=queryParams['ns'];}}return{host,port,domain,subdomain,secure,scheme,pathString,namespace};};/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * Encapsulates the data needed to raise an event\r\n */class DataEvent{/**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */constructor(eventType,eventRegistration,snapshot,prevName){this.eventType=eventType;this.eventRegistration=eventRegistration;this.snapshot=snapshot;this.prevName=prevName;}getPath(){const ref=this.snapshot.ref;if(this.eventType==='value'){return ref._path;}else{return ref.parent._path;}}getEventType(){return this.eventType;}getEventRunner(){return this.eventRegistration.getEventRunner(this);}toString(){return this.getPath().toString()+':'+this.eventType+':'+stringify(this.snapshot.exportVal());}}class CancelEvent{constructor(eventRegistration,error,path){this.eventRegistration=eventRegistration;this.error=error;this.path=path;}getPath(){return this.path;}getEventType(){return'cancel';}getEventRunner(){return this.eventRegistration.getEventRunner(this);}toString(){return this.path.toString()+':cancel';}}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */class CallbackContext{constructor(snapshotCallback,cancelCallback){this.snapshotCallback=snapshotCallback;this.cancelCallback=cancelCallback;}onValue(expDataSnapshot,previousChildName){this.snapshotCallback.call(null,expDataSnapshot,previousChildName);}onCancel(error){assert(this.hasCancelCallback,'Raising a cancel event on a listener with no cancel callback');return this.cancelCallback.call(null,error);}get hasCancelCallback(){return!!this.cancelCallback;}matches(other){return this.snapshotCallback===other.snapshotCallback||this.snapshotCallback.userCallback!==undefined&&this.snapshotCallback.userCallback===other.snapshotCallback.userCallback&&this.snapshotCallback.context===other.snapshotCallback.context;}}/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */class OnDisconnect{/** @hideconstructor */constructor(_repo,_path){this._repo=_repo;this._path=_path;}/**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */cancel(){const deferred=new Deferred();repoOnDisconnectCancel(this._repo,this._path,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */remove(){validateWritablePath('OnDisconnect.remove',this._path);const deferred=new Deferred();repoOnDisconnectSet(this._repo,this._path,null,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */set(value){validateWritablePath('OnDisconnect.set',this._path);validateFirebaseDataArg('OnDisconnect.set',value,this._path,false);const deferred=new Deferred();repoOnDisconnectSet(this._repo,this._path,value,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */setWithPriority(value,priority){validateWritablePath('OnDisconnect.setWithPriority',this._path);validateFirebaseDataArg('OnDisconnect.setWithPriority',value,this._path,false);validatePriority('OnDisconnect.setWithPriority',priority,false);const deferred=new Deferred();repoOnDisconnectSetWithPriority(this._repo,this._path,value,priority,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */update(values){validateWritablePath('OnDisconnect.update',this._path);validateFirebaseMergeDataArg('OnDisconnect.update',values,this._path,false);const deferred=new Deferred();repoOnDisconnectUpdate(this._repo,this._path,values,deferred.wrapCallback(()=>{}));return deferred.promise;}}/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * @internal\r\n */class QueryImpl{/**\r\n     * @hideconstructor\r\n     */constructor(_repo,_path,_queryParams,_orderByCalled){this._repo=_repo;this._path=_path;this._queryParams=_queryParams;this._orderByCalled=_orderByCalled;}get key(){if(pathIsEmpty(this._path)){return null;}else{return pathGetBack(this._path);}}get ref(){return new ReferenceImpl(this._repo,this._path);}get _queryIdentifier(){const obj=queryParamsGetQueryObject(this._queryParams);const id=ObjectToUniqueKey(obj);return id==='{}'?'default':id;}/**\r\n     * An object representation of the query parameters used by this Query.\r\n     */get _queryObject(){return queryParamsGetQueryObject(this._queryParams);}isEqual(other){other=getModularInstance(other);if(!(other instanceof QueryImpl)){return false;}const sameRepo=this._repo===other._repo;const samePath=pathEquals(this._path,other._path);const sameQueryIdentifier=this._queryIdentifier===other._queryIdentifier;return sameRepo&&samePath&&sameQueryIdentifier;}toJSON(){return this.toString();}toString(){return this._repo.toString()+pathToUrlEncodedString(this._path);}}/**\r\n * Validates that no other order by call has been made\r\n */function validateNoPreviousOrderByCall(query,fnName){if(query._orderByCalled===true){throw new Error(fnName+\": You can't combine multiple orderBy calls.\");}}/**\r\n * Validates start/end values for queries.\r\n */function validateQueryEndpoints(params){let startNode=null;let endNode=null;if(params.hasStart()){startNode=params.getIndexStartValue();}if(params.hasEnd()){endNode=params.getIndexEndValue();}if(params.getIndex()===KEY_INDEX){const tooManyArgsError='Query: When ordering by key, you may only pass one argument to '+'startAt(), endAt(), or equalTo().';const wrongArgTypeError='Query: When ordering by key, the argument passed to startAt(), startAfter(), '+'endAt(), endBefore(), or equalTo() must be a string.';if(params.hasStart()){const startName=params.getIndexStartName();if(startName!==MIN_NAME){throw new Error(tooManyArgsError);}else if(typeof startNode!=='string'){throw new Error(wrongArgTypeError);}}if(params.hasEnd()){const endName=params.getIndexEndName();if(endName!==MAX_NAME){throw new Error(tooManyArgsError);}else if(typeof endNode!=='string'){throw new Error(wrongArgTypeError);}}}else if(params.getIndex()===PRIORITY_INDEX){if(startNode!=null&&!isValidPriority(startNode)||endNode!=null&&!isValidPriority(endNode)){throw new Error('Query: When ordering by priority, the first argument passed to startAt(), '+'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value '+'(null, a number, or a string).');}}else{assert(params.getIndex()instanceof PathIndex||params.getIndex()===VALUE_INDEX,'unknown index type.');if(startNode!=null&&typeof startNode==='object'||endNode!=null&&typeof endNode==='object'){throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or '+'equalTo() cannot be an object.');}}}/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */function validateLimit(params){if(params.hasStart()&&params.hasEnd()&&params.hasLimit()&&!params.hasAnchoredLimit()){throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \"+'limitToFirst() or limitToLast() instead.');}}/**\r\n * @internal\r\n */class ReferenceImpl extends QueryImpl{/** @hideconstructor */constructor(repo,path){super(repo,path,new QueryParams(),false);}get parent(){const parentPath=pathParent(this._path);return parentPath===null?null:new ReferenceImpl(this._repo,parentPath);}get root(){let ref=this;while(ref.parent!==null){ref=ref.parent;}return ref;}}/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */class DataSnapshot{/**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */constructor(_node,/**\r\n     * The location of this DataSnapshot.\r\n     */ref,_index){this._node=_node;this.ref=ref;this._index=_index;}/**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */get priority(){// typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\nreturn this._node.getPriority().val();}/**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */get key(){return this.ref.key;}/** Returns the number of child properties of this `DataSnapshot`. */get size(){return this._node.numChildren();}/**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */child(path){const childPath=new Path(path);const childRef=child(this.ref,path);return new DataSnapshot(this._node.getChild(childPath),childRef,PRIORITY_INDEX);}/**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */exists(){return!this._node.isEmpty();}/**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nexportVal(){return this._node.val(true);}/**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */forEach(action){if(this._node.isLeafNode()){return false;}const childrenNode=this._node;// Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\nreturn!!childrenNode.forEachChild(this._index,(key,node)=>{return action(new DataSnapshot(node,child(this.ref,key),PRIORITY_INDEX));});}/**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */hasChild(path){const childPath=new Path(path);return!this._node.getChild(childPath).isEmpty();}/**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */hasChildren(){if(this._node.isLeafNode()){return false;}else{return!this._node.isEmpty();}}/**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */toJSON(){return this.exportVal();}/**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nval(){return this._node.val();}}/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */function ref(db,path){db=getModularInstance(db);db._checkNotDeleted('ref');return path!==undefined?child(db._root,path):db._root;}/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */function refFromURL(db,url){db=getModularInstance(db);db._checkNotDeleted('refFromURL');const parsedURL=parseRepoInfo(url,db._repo.repoInfo_.nodeAdmin);validateUrl('refFromURL',parsedURL);const repoInfo=parsedURL.repoInfo;if(!db._repo.repoInfo_.isCustomHost()&&repoInfo.host!==db._repo.repoInfo_.host){fatal('refFromURL'+': Host name does not match the current database: '+'(found '+repoInfo.host+' but expected '+db._repo.repoInfo_.host+')');}return ref(db,parsedURL.path.toString());}/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */function child(parent,path){parent=getModularInstance(parent);if(pathGetFront(parent._path)===null){validateRootPathString('child','path',path,false);}else{validatePathString('child','path',path,false);}return new ReferenceImpl(parent._repo,pathChild(parent._path,path));}/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */function onDisconnect(ref){ref=getModularInstance(ref);return new OnDisconnect(ref._repo,ref._path);}/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */function push(parent,value){parent=getModularInstance(parent);validateWritablePath('push',parent._path);validateFirebaseDataArg('push',value,parent._path,true);const now=repoServerTime(parent._repo);const name=nextPushId(now);// push() returns a ThennableReference whose promise is fulfilled with a\n// regular Reference. We use child() to create handles to two different\n// references. The first is turned into a ThennableReference below by adding\n// then() and catch() methods and is used as the return value of push(). The\n// second remains a regular Reference and is used as the fulfilled value of\n// the first ThennableReference.\nconst thennablePushRef=child(parent,name);const pushRef=child(parent,name);let promise;if(value!=null){promise=set(pushRef,value).then(()=>pushRef);}else{promise=Promise.resolve(pushRef);}thennablePushRef.then=promise.then.bind(promise);thennablePushRef.catch=promise.then.bind(promise,undefined);return thennablePushRef;}/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */function remove(ref){validateWritablePath('remove',ref._path);return set(ref,null);}/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */function set(ref,value){ref=getModularInstance(ref);validateWritablePath('set',ref._path);validateFirebaseDataArg('set',value,ref._path,false);const deferred=new Deferred();repoSetWithPriority(ref._repo,ref._path,value,/*priority=*/null,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */function setPriority(ref,priority){ref=getModularInstance(ref);validateWritablePath('setPriority',ref._path);validatePriority('setPriority',priority,false);const deferred=new Deferred();repoSetWithPriority(ref._repo,pathChild(ref._path,'.priority'),priority,null,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */function setWithPriority(ref,value,priority){validateWritablePath('setWithPriority',ref._path);validateFirebaseDataArg('setWithPriority',value,ref._path,false);validatePriority('setWithPriority',priority,false);if(ref.key==='.length'||ref.key==='.keys'){throw'setWithPriority failed: '+ref.key+' is a read-only object.';}const deferred=new Deferred();repoSetWithPriority(ref._repo,ref._path,value,priority,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */function update(ref,values){validateFirebaseMergeDataArg('update',values,ref._path,false);const deferred=new Deferred();repoUpdate(ref._repo,ref._path,values,deferred.wrapCallback(()=>{}));return deferred.promise;}/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */function get(query){query=getModularInstance(query);return repoGetValue(query._repo,query).then(node=>{return new DataSnapshot(node,new ReferenceImpl(query._repo,query._path),query._queryParams.getIndex());});}/**\r\n * Represents registration for 'value' events.\r\n */class ValueEventRegistration{constructor(callbackContext){this.callbackContext=callbackContext;}respondsTo(eventType){return eventType==='value';}createEvent(change,query){const index=query._queryParams.getIndex();return new DataEvent('value',this,new DataSnapshot(change.snapshotNode,new ReferenceImpl(query._repo,query._path),index));}getEventRunner(eventData){if(eventData.getEventType()==='cancel'){return()=>this.callbackContext.onCancel(eventData.error);}else{return()=>this.callbackContext.onValue(eventData.snapshot,null);}}createCancelEvent(error,path){if(this.callbackContext.hasCancelCallback){return new CancelEvent(this,error,path);}else{return null;}}matches(other){if(!(other instanceof ValueEventRegistration)){return false;}else if(!other.callbackContext||!this.callbackContext){// If no callback specified, we consider it to match any callback.\nreturn true;}else{return other.callbackContext.matches(this.callbackContext);}}hasAnyCallback(){return this.callbackContext!==null;}}/**\r\n * Represents the registration of a child_x event.\r\n */class ChildEventRegistration{constructor(eventType,callbackContext){this.eventType=eventType;this.callbackContext=callbackContext;}respondsTo(eventType){let eventToCheck=eventType==='children_added'?'child_added':eventType;eventToCheck=eventToCheck==='children_removed'?'child_removed':eventToCheck;return this.eventType===eventToCheck;}createCancelEvent(error,path){if(this.callbackContext.hasCancelCallback){return new CancelEvent(this,error,path);}else{return null;}}createEvent(change,query){assert(change.childName!=null,'Child events should have a childName.');const childRef=child(new ReferenceImpl(query._repo,query._path),change.childName);const index=query._queryParams.getIndex();return new DataEvent(change.type,this,new DataSnapshot(change.snapshotNode,childRef,index),change.prevName);}getEventRunner(eventData){if(eventData.getEventType()==='cancel'){return()=>this.callbackContext.onCancel(eventData.error);}else{return()=>this.callbackContext.onValue(eventData.snapshot,eventData.prevName);}}matches(other){if(other instanceof ChildEventRegistration){return this.eventType===other.eventType&&(!this.callbackContext||!other.callbackContext||this.callbackContext.matches(other.callbackContext));}return false;}hasAnyCallback(){return!!this.callbackContext;}}function addEventListener(query,eventType,callback,cancelCallbackOrListenOptions,options){let cancelCallback;if(typeof cancelCallbackOrListenOptions==='object'){cancelCallback=undefined;options=cancelCallbackOrListenOptions;}if(typeof cancelCallbackOrListenOptions==='function'){cancelCallback=cancelCallbackOrListenOptions;}if(options&&options.onlyOnce){const userCallback=callback;const onceCallback=(dataSnapshot,previousChildName)=>{repoRemoveEventCallbackForQuery(query._repo,query,container);userCallback(dataSnapshot,previousChildName);};onceCallback.userCallback=callback.userCallback;onceCallback.context=callback.context;callback=onceCallback;}const callbackContext=new CallbackContext(callback,cancelCallback||undefined);const container=eventType==='value'?new ValueEventRegistration(callbackContext):new ChildEventRegistration(eventType,callbackContext);repoAddEventCallbackForQuery(query._repo,query,container);return()=>repoRemoveEventCallbackForQuery(query._repo,query,container);}function onValue(query,callback,cancelCallbackOrListenOptions,options){return addEventListener(query,'value',callback,cancelCallbackOrListenOptions,options);}function onChildAdded(query,callback,cancelCallbackOrListenOptions,options){return addEventListener(query,'child_added',callback,cancelCallbackOrListenOptions,options);}function onChildChanged(query,callback,cancelCallbackOrListenOptions,options){return addEventListener(query,'child_changed',callback,cancelCallbackOrListenOptions,options);}function onChildMoved(query,callback,cancelCallbackOrListenOptions,options){return addEventListener(query,'child_moved',callback,cancelCallbackOrListenOptions,options);}function onChildRemoved(query,callback,cancelCallbackOrListenOptions,options){return addEventListener(query,'child_removed',callback,cancelCallbackOrListenOptions,options);}/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */function off(query,eventType,callback){let container=null;const expCallback=callback?new CallbackContext(callback):null;if(eventType==='value'){container=new ValueEventRegistration(expCallback);}else if(eventType){container=new ChildEventRegistration(eventType,expCallback);}repoRemoveEventCallbackForQuery(query._repo,query,container);}/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */class QueryConstraint{}class QueryEndAtConstraint extends QueryConstraint{constructor(_value,_key){super();this._value=_value;this._key=_key;}_apply(query){validateFirebaseDataArg('endAt',this._value,query._path,true);const newParams=queryParamsEndAt(query._queryParams,this._value,this._key);validateLimit(newParams);validateQueryEndpoints(newParams);if(query._queryParams.hasEnd()){throw new Error('endAt: Starting point was already set (by another call to endAt, '+'endBefore or equalTo).');}return new QueryImpl(query._repo,query._path,newParams,query._orderByCalled);}}/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */function endAt(value,key){validateKey('endAt','key',key,true);return new QueryEndAtConstraint(value,key);}class QueryEndBeforeConstraint extends QueryConstraint{constructor(_value,_key){super();this._value=_value;this._key=_key;}_apply(query){validateFirebaseDataArg('endBefore',this._value,query._path,false);const newParams=queryParamsEndBefore(query._queryParams,this._value,this._key);validateLimit(newParams);validateQueryEndpoints(newParams);if(query._queryParams.hasEnd()){throw new Error('endBefore: Starting point was already set (by another call to endAt, '+'endBefore or equalTo).');}return new QueryImpl(query._repo,query._path,newParams,query._orderByCalled);}}/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */function endBefore(value,key){validateKey('endBefore','key',key,true);return new QueryEndBeforeConstraint(value,key);}class QueryStartAtConstraint extends QueryConstraint{constructor(_value,_key){super();this._value=_value;this._key=_key;}_apply(query){validateFirebaseDataArg('startAt',this._value,query._path,true);const newParams=queryParamsStartAt(query._queryParams,this._value,this._key);validateLimit(newParams);validateQueryEndpoints(newParams);if(query._queryParams.hasStart()){throw new Error('startAt: Starting point was already set (by another call to startAt, '+'startBefore or equalTo).');}return new QueryImpl(query._repo,query._path,newParams,query._orderByCalled);}}/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */function startAt(value=null,key){validateKey('startAt','key',key,true);return new QueryStartAtConstraint(value,key);}class QueryStartAfterConstraint extends QueryConstraint{constructor(_value,_key){super();this._value=_value;this._key=_key;}_apply(query){validateFirebaseDataArg('startAfter',this._value,query._path,false);const newParams=queryParamsStartAfter(query._queryParams,this._value,this._key);validateLimit(newParams);validateQueryEndpoints(newParams);if(query._queryParams.hasStart()){throw new Error('startAfter: Starting point was already set (by another call to startAt, '+'startAfter, or equalTo).');}return new QueryImpl(query._repo,query._path,newParams,query._orderByCalled);}}/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */function startAfter(value,key){validateKey('startAfter','key',key,true);return new QueryStartAfterConstraint(value,key);}class QueryLimitToFirstConstraint extends QueryConstraint{constructor(_limit){super();this._limit=_limit;}_apply(query){if(query._queryParams.hasLimit()){throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst '+'or limitToLast).');}return new QueryImpl(query._repo,query._path,queryParamsLimitToFirst(query._queryParams,this._limit),query._orderByCalled);}}/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */function limitToFirst(limit){if(typeof limit!=='number'||Math.floor(limit)!==limit||limit<=0){throw new Error('limitToFirst: First argument must be a positive integer.');}return new QueryLimitToFirstConstraint(limit);}class QueryLimitToLastConstraint extends QueryConstraint{constructor(_limit){super();this._limit=_limit;}_apply(query){if(query._queryParams.hasLimit()){throw new Error('limitToLast: Limit was already set (by another call to limitToFirst '+'or limitToLast).');}return new QueryImpl(query._repo,query._path,queryParamsLimitToLast(query._queryParams,this._limit),query._orderByCalled);}}/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */function limitToLast(limit){if(typeof limit!=='number'||Math.floor(limit)!==limit||limit<=0){throw new Error('limitToLast: First argument must be a positive integer.');}return new QueryLimitToLastConstraint(limit);}class QueryOrderByChildConstraint extends QueryConstraint{constructor(_path){super();this._path=_path;}_apply(query){validateNoPreviousOrderByCall(query,'orderByChild');const parsedPath=new Path(this._path);if(pathIsEmpty(parsedPath)){throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');}const index=new PathIndex(parsedPath);const newParams=queryParamsOrderBy(query._queryParams,index);validateQueryEndpoints(newParams);return new QueryImpl(query._repo,query._path,newParams,/*orderByCalled=*/true);}}/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */function orderByChild(path){if(path==='$key'){throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');}else if(path==='$priority'){throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');}else if(path==='$value'){throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');}validatePathString('orderByChild','path',path,false);return new QueryOrderByChildConstraint(path);}class QueryOrderByKeyConstraint extends QueryConstraint{_apply(query){validateNoPreviousOrderByCall(query,'orderByKey');const newParams=queryParamsOrderBy(query._queryParams,KEY_INDEX);validateQueryEndpoints(newParams);return new QueryImpl(query._repo,query._path,newParams,/*orderByCalled=*/true);}}/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */function orderByKey(){return new QueryOrderByKeyConstraint();}class QueryOrderByPriorityConstraint extends QueryConstraint{_apply(query){validateNoPreviousOrderByCall(query,'orderByPriority');const newParams=queryParamsOrderBy(query._queryParams,PRIORITY_INDEX);validateQueryEndpoints(newParams);return new QueryImpl(query._repo,query._path,newParams,/*orderByCalled=*/true);}}/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */function orderByPriority(){return new QueryOrderByPriorityConstraint();}class QueryOrderByValueConstraint extends QueryConstraint{_apply(query){validateNoPreviousOrderByCall(query,'orderByValue');const newParams=queryParamsOrderBy(query._queryParams,VALUE_INDEX);validateQueryEndpoints(newParams);return new QueryImpl(query._repo,query._path,newParams,/*orderByCalled=*/true);}}/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */function orderByValue(){return new QueryOrderByValueConstraint();}class QueryEqualToValueConstraint extends QueryConstraint{constructor(_value,_key){super();this._value=_value;this._key=_key;}_apply(query){validateFirebaseDataArg('equalTo',this._value,query._path,false);if(query._queryParams.hasStart()){throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or '+'equalTo).');}if(query._queryParams.hasEnd()){throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or '+'equalTo).');}return new QueryEndAtConstraint(this._value,this._key)._apply(new QueryStartAtConstraint(this._value,this._key)._apply(query));}}/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */function equalTo(value,key){validateKey('equalTo','key',key,true);return new QueryEqualToValueConstraint(value,key);}/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */function query(query,...queryConstraints){let queryImpl=getModularInstance(query);for(const constraint of queryConstraints){queryImpl=constraint._apply(queryImpl);}return queryImpl;}/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */syncPointSetReferenceConstructor(ReferenceImpl);syncTreeSetReferenceConstructor(ReferenceImpl);/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */const FIREBASE_DATABASE_EMULATOR_HOST_VAR='FIREBASE_DATABASE_EMULATOR_HOST';/**\r\n * Creates and caches `Repo` instances.\r\n */const repos={};/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */let useRestClient=false;/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */function repoManagerApplyEmulatorSettings(repo,host,port,tokenProvider){repo.repoInfo_=new RepoInfo(`${host}:${port}`,/* secure= */false,repo.repoInfo_.namespace,repo.repoInfo_.webSocketOnly,repo.repoInfo_.nodeAdmin,repo.repoInfo_.persistenceKey,repo.repoInfo_.includeNamespaceInQueryParams);if(tokenProvider){repo.authTokenProvider_=tokenProvider;}}/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */function repoManagerDatabaseFromApp(app,authProvider,appCheckProvider,url,nodeAdmin){let dbUrl=url||app.options.databaseURL;if(dbUrl===undefined){if(!app.options.projectId){fatal(\"Can't determine Firebase Database URL. Be sure to include \"+' a Project ID when calling firebase.initializeApp().');}log('Using default host for project ',app.options.projectId);dbUrl=`${app.options.projectId}-default-rtdb.firebaseio.com`;}let parsedUrl=parseRepoInfo(dbUrl,nodeAdmin);let repoInfo=parsedUrl.repoInfo;let isEmulator;let dbEmulatorHost=undefined;if(typeof process!=='undefined'){dbEmulatorHost=process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];}if(dbEmulatorHost){isEmulator=true;dbUrl=`http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;parsedUrl=parseRepoInfo(dbUrl,nodeAdmin);repoInfo=parsedUrl.repoInfo;}else{isEmulator=!parsedUrl.repoInfo.secure;}const authTokenProvider=nodeAdmin&&isEmulator?new EmulatorTokenProvider(EmulatorTokenProvider.OWNER):new FirebaseAuthTokenProvider(app.name,app.options,authProvider);validateUrl('Invalid Firebase Database URL',parsedUrl);if(!pathIsEmpty(parsedUrl.path)){fatal('Database URL must point to the root of a Firebase Database '+'(not including a child path).');}const repo=repoManagerCreateRepo(repoInfo,app,authTokenProvider,new AppCheckTokenProvider(app.name,appCheckProvider));return new Database(repo,app);}/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */function repoManagerDeleteRepo(repo,appName){const appRepos=repos[appName];// This should never happen...\nif(!appRepos||appRepos[repo.key]!==repo){fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);}repoInterrupt(repo);delete appRepos[repo.key];}/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */function repoManagerCreateRepo(repoInfo,app,authTokenProvider,appCheckProvider){let appRepos=repos[app.name];if(!appRepos){appRepos={};repos[app.name]=appRepos;}let repo=appRepos[repoInfo.toURLString()];if(repo){fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');}repo=new Repo(repoInfo,useRestClient,authTokenProvider,appCheckProvider);appRepos[repoInfo.toURLString()]=repo;return repo;}/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */function repoManagerForceRestClient(forceRestClient){useRestClient=forceRestClient;}/**\r\n * Class representing a Firebase Realtime Database.\r\n */class Database{/** @hideconstructor */constructor(_repoInternal,/** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */app){this._repoInternal=_repoInternal;this.app=app;/** Represents a `Database` instance. */this['type']='database';/** Track if the instance has been used (root or repo accessed) */this._instanceStarted=false;}get _repo(){if(!this._instanceStarted){repoStart(this._repoInternal,this.app.options.appId,this.app.options['databaseAuthVariableOverride']);this._instanceStarted=true;}return this._repoInternal;}get _root(){if(!this._rootInternal){this._rootInternal=new ReferenceImpl(this._repo,newEmptyPath());}return this._rootInternal;}_delete(){if(this._rootInternal!==null){repoManagerDeleteRepo(this._repo,this.app.name);this._repoInternal=null;this._rootInternal=null;}return Promise.resolve();}_checkNotDeleted(apiName){if(this._rootInternal===null){fatal('Cannot call '+apiName+' on a deleted database.');}}}/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */function getDatabase(app=getApp(),url){return _getProvider(app,'database').getImmediate({identifier:url});}/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */function connectDatabaseEmulator(db,host,port,options={}){db=getModularInstance(db);db._checkNotDeleted('useEmulator');if(db._instanceStarted){fatal('Cannot call useEmulator() after instance has already been initialized.');}const repo=db._repoInternal;let tokenProvider=undefined;if(repo.repoInfo_.nodeAdmin){if(options.mockUserToken){fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');}tokenProvider=new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);}else if(options.mockUserToken){const token=typeof options.mockUserToken==='string'?options.mockUserToken:createMockUserToken(options.mockUserToken,db.app.options.projectId);tokenProvider=new EmulatorTokenProvider(token);}// Modify the repo to apply emulator settings\nrepoManagerApplyEmulatorSettings(repo,host,port,tokenProvider);}/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */function goOffline(db){db=getModularInstance(db);db._checkNotDeleted('goOffline');repoInterrupt(db._repo);}/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */function goOnline(db){db=getModularInstance(db);db._checkNotDeleted('goOnline');repoResume(db._repo);}function enableLogging(logger,persistent){enableLogging$1(logger,persistent);}/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */function registerDatabase(variant){setSDKVersion(SDK_VERSION$1);_registerComponent(new Component('database',(container,{instanceIdentifier:url})=>{const app=container.getProvider('app').getImmediate();const authProvider=container.getProvider('auth-internal');const appCheckProvider=container.getProvider('app-check-internal');return repoManagerDatabaseFromApp(app,authProvider,appCheckProvider,url);},\"PUBLIC\"/* PUBLIC */).setMultipleInstances(true));registerVersion(name,version,variant);// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name,version,'esm2017');}/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */const SERVER_TIMESTAMP={'.sv':'timestamp'};/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */function serverTimestamp(){return SERVER_TIMESTAMP;}/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */function increment(delta){return{'.sv':{'increment':delta}};}/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */ /**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */class TransactionResult{/** @hideconstructor */constructor(/** Whether the transaction was successfully committed. */committed,/** The resulting data snapshot. */snapshot){this.committed=committed;this.snapshot=snapshot;}/** Returns a JSON-serializable representation of this object. */toJSON(){return{committed:this.committed,snapshot:this.snapshot.toJSON()};}}/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */function runTransaction(ref,// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate,options){var _a;ref=getModularInstance(ref);validateWritablePath('Reference.transaction',ref._path);if(ref.key==='.length'||ref.key==='.keys'){throw'Reference.transaction failed: '+ref.key+' is a read-only object.';}const applyLocally=(_a=options===null||options===void 0?void 0:options.applyLocally)!==null&&_a!==void 0?_a:true;const deferred=new Deferred();const promiseComplete=(error,committed,node)=>{let dataSnapshot=null;if(error){deferred.reject(error);}else{dataSnapshot=new DataSnapshot(node,new ReferenceImpl(ref._repo,ref._path),PRIORITY_INDEX);deferred.resolve(new TransactionResult(committed,dataSnapshot));}};// Add a watch to make sure we get server updates.\nconst unwatcher=onValue(ref,()=>{});repoStartTransaction(ref._repo,ref._path,transactionUpdate,promiseComplete,unwatcher,applyLocally);return deferred.promise;}/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */PersistentConnection;// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen=function(pathString,onComplete){this.sendRequest('q',{p:pathString},onComplete);};// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo=function(data,onEcho){this.sendRequest('echo',{d:data},onEcho);};// RealTimeConnection properties that we use in tests.\nConnection;/**\r\n * @internal\r\n */const hijackHash=function(newHash){const oldPut=PersistentConnection.prototype.put;PersistentConnection.prototype.put=function(pathString,data,onComplete,hash){if(hash!==undefined){hash=newHash();}oldPut.call(this,pathString,data,onComplete,hash);};return function(){PersistentConnection.prototype.put=oldPut;};};RepoInfo;/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */const forceRestClient=function(forceRestClient){repoManagerForceRestClient(forceRestClient);};/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */registerDatabase();export{DataSnapshot,Database,OnDisconnect,QueryConstraint,TransactionResult,QueryImpl as _QueryImpl,QueryParams as _QueryParams,ReferenceImpl as _ReferenceImpl,forceRestClient as _TEST_ACCESS_forceRestClient,hijackHash as _TEST_ACCESS_hijackHash,repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp,setSDKVersion as _setSDKVersion,validatePathString as _validatePathString,validateWritablePath as _validateWritablePath,child,connectDatabaseEmulator,enableLogging,endAt,endBefore,equalTo,get,getDatabase,goOffline,goOnline,increment,limitToFirst,limitToLast,off,onChildAdded,onChildChanged,onChildMoved,onChildRemoved,onDisconnect,onValue,orderByChild,orderByKey,orderByPriority,orderByValue,push,query,ref,refFromURL,remove,runTransaction,serverTimestamp,set,setPriority,setWithPriority,startAfter,startAt,update};","map":{"version":3,"mappings":"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","names":["SDK_VERSION","setSDKVersion","version","DOMStorageWrapper","constructor","domStorage_","set","key","value","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","name","prefix_","toString","MemoryStorage","cache_","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","varArgs","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","logWrapper","prefix","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","reject","addTokenChangeListener","listener","_a","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","type","params","connURL","pairs","StatsCollection","incrementCounter","amount","counters_","deepCopy","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","closeAfter","responseNum","callback","closeAfterResponse","onClose","currentResponseNum","handleResponse","requestNum","pendingResponses","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","bytesSent","base64data","base64Encode","enqueueSegment","pw","src","style","display","appendChild","bytesReceived","commandCB","onMessageCB","Set","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","outstandingRequests","size","pendingSegs","currentSerial","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","connectionURL_","device","options","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","isInMemoryStorage","appendFrame_","frames","totalFrames","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","keepaliveTimer","clearInterval","setInterval","TransportManager","initTransports_","ALL_TRANSPORTS","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","connectionCount","everConnected","onConnectionLost_","onSecondaryConnectionLost_","state_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","pendingDataMessages","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","token","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","trigger","eventType","listeners_","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","isMobileCordova","online_","getInstance","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","stringLength","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","GET_CONNECT_TIMEOUT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","Map","onVisible_","onOnline_","action","onResponse","curReqNum","requestNumber_","r","connected_","realtime_","requestCBHash_","initConnection_","deferred","Deferred","request","p","q","_queryObject","outstandingGet","outstandingGets_","outstandingGetCount_","index","undefined","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","listens","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","safeGet","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","maxReconnectDelay_","tryAppCheck","authMethod","isValidFormat","requestData","cred","res","invalidAuthTokenCount_","onAuthRevoked_","invalidAppCheckTokenCount_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","response","putInternal","outstandingPuts_","outstandingPutCount_","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","Date","getTime","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnectionTimer_","establishConnection_","reconnectDelay_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","forceTokenRefresh_","all","interrupt","interruptReasons_","resume","isEmpty","delta","serverTimeOffset","map","normalizedPathString","statusCode","explanation","securityDebugCallback_","console","replace","queries","values","clientName","isReactNative","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","LLRBEmptyNode","comparator_","root_","BLACK","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE","setMaxNode","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","LeafNode","value_","priorityNode_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","lazyHash_","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","nodeFromJSON","setNodeFromJSON","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","next","newIndex","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","Object","defineProperties","MAX","setPriorityMaxNode","USE_HINZE","json","jsonLeaf","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","childData","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","MIN_PUSH_CHAR","MAX_PUSH_CHAR","MAX_KEY_LEN","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","charAt","successor","keyAsInt","source","sourcePlusOne","repeat","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","startSet_","hasStartAfter","startAfterSet_","hasEndBefore","endBeforeSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","hasLimit","limitSet_","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","getListenId_","listenId","thisListen","listens_","queryStringParameters","restRequest_","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","getNode","rootNode_","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForget","tree","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","forEach","StatsListener","collection_","newStats","last_","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsListener_","reportStats_","reportedStats","haveStatsToReport","statsToReport_","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","layeredCache","mergeAtPath","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","oldChange","changeMap","oldType","getChanges","from","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorAckUserWrite","viewProcessorRevertUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteNode","viewGetCompleteServerCache","cache","viewIsEmpty","eventRegistrations_","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor","SyncPoint","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","views","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncTreeApplyUserOverwrite","syncTree","newData","pendingWriteTree_","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","maybeSyncPoint","syncPointTree_","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","queryToTagMap","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","tagToQueryMap","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeGetServerValue","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefixFxn","errorPrefix","hasDotValue","hasActualChild","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","validatePriority","validateKey","argumentName","validatePathString","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","EventQueue","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventLists_","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","recursionDepth_","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","persistentConnection_","connectStatus","repoOnServerInfoUpdate","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","eventQueue_","repoServerTime","offsetNode","offset","repoGenerateServerValues","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","nextWriteId_","repoGetValue","cached","err","repoLog","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","repoOnDisconnectSet","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","repoStartTransaction","transactionUpdate","unwatcher","applyLocally","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","transactionQueueTree_","nodeQueue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","call","onCancel","hasCancelCallback","userCallback","OnDisconnect","cancel","wrapCallback","setWithPriority","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","getModularInstance","sameRepo","samePath","sameQueryIdentifier","toJSON","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","refFromURL","parsedURL","thennablePushRef","pushRef","setPriority","ValueEventRegistration","callbackContext","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","container","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","expCallback","QueryConstraint","QueryEndAtConstraint","_value","_apply","endAt","QueryEndBeforeConstraint","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","startAfter","QueryLimitToFirstConstraint","_limit","limitToFirst","limit","QueryLimitToLastConstraint","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","equalTo","queryConstraints","queryImpl","constraint","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","OWNER","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","repoManagerForceRestClient","forceRestClient","_repoInternal","_instanceStarted","_rootInternal","_delete","apiName","getDatabase","getApp","_getProvider","identifier","connectDatabaseEmulator","mockUserToken","createMockUserToken","goOffline","goOnline","enableLoggingImpl","registerDatabase","variant","_registerComponent","Component","instanceIdentifier","getProvider","setMultipleInstances","registerVersion","SERVER_TIMESTAMP","serverTimestamp","increment","TransactionResult","committed","runTransaction","promiseComplete","prototype","simpleListen","echo","onEcho","hijackHash","newHash","oldPut"],"sources":["../src/core/version.ts","../src/core/storage/DOMStorageWrapper.ts","../src/core/storage/MemoryStorage.ts","../src/core/storage/storage.ts","../src/core/util/util.ts","../src/core/AppCheckTokenProvider.ts","../src/core/AuthTokenProvider.ts","../src/realtime/Constants.ts","../src/core/RepoInfo.ts","../src/core/stats/StatsCollection.ts","../src/core/stats/StatsManager.ts","../src/realtime/polling/PacketReceiver.ts","../src/realtime/BrowserPollConnection.ts","../src/realtime/WebSocketConnection.ts","../src/realtime/TransportManager.ts","../src/realtime/Connection.ts","../src/core/ServerActions.ts","../src/core/util/EventEmitter.ts","../src/core/util/OnlineMonitor.ts","../src/core/util/Path.ts","../src/core/util/VisibilityMonitor.ts","../src/core/PersistentConnection.ts","../src/core/snap/Node.ts","../src/core/snap/indexes/Index.ts","../src/core/snap/indexes/KeyIndex.ts","../src/core/util/SortedMap.ts","../src/core/snap/comparators.ts","../src/core/snap/snap.ts","../src/core/snap/LeafNode.ts","../src/core/snap/indexes/PriorityIndex.ts","../src/core/snap/childSet.ts","../src/core/snap/IndexMap.ts","../src/core/snap/ChildrenNode.ts","../src/core/snap/nodeFromJSON.ts","../src/core/snap/indexes/PathIndex.ts","../src/core/snap/indexes/ValueIndex.ts","../src/core/util/NextPushId.ts","../src/core/view/Change.ts","../src/core/view/filter/IndexedFilter.ts","../src/core/view/filter/RangedFilter.ts","../src/core/view/filter/LimitedFilter.ts","../src/core/view/QueryParams.ts","../src/core/ReadonlyRestClient.ts","../src/core/SnapshotHolder.ts","../src/core/SparseSnapshotTree.ts","../src/core/stats/StatsListener.ts","../src/core/stats/StatsReporter.ts","../src/core/operation/Operation.ts","../src/core/operation/AckUserWrite.ts","../src/core/operation/ListenComplete.ts","../src/core/operation/Overwrite.ts","../src/core/operation/Merge.ts","../src/core/view/CacheNode.ts","../src/core/view/EventGenerator.ts","../src/core/view/ViewCache.ts","../src/core/util/ImmutableTree.ts","../src/core/CompoundWrite.ts","../src/core/WriteTree.ts","../src/core/view/ChildChangeAccumulator.ts","../src/core/view/CompleteChildSource.ts","../src/core/view/ViewProcessor.ts","../src/core/view/View.ts","../src/core/SyncPoint.ts","../src/core/SyncTree.ts","../src/core/util/ServerValues.ts","../src/core/util/Tree.ts","../src/core/util/validation.ts","../src/core/view/EventQueue.ts","../src/core/Repo.ts","../src/core/util/libs/parser.ts","../src/core/view/Event.ts","../src/core/view/EventRegistration.ts","../src/api/OnDisconnect.ts","../src/api/Reference_impl.ts","../src/api/Database.ts","../src/register.ts","../src/api/ServerValue.ts","../src/api/Transaction.ts","../src/api/test_access.ts","../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || '',\n            'X-Firebase-AppCheck': this.appCheckToken || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(\n            request['p'],\n            payload,\n            /*isMerge*/ false,\n            /*tag*/ null\n          );\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault =\n      -1 !==\n      removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n    const covered = syncTree.syncPointTree_.findOnPath(\n      path,\n      (relativePath, parentSyncPoint) =>\n        syncPointHasCompleteView(parentSyncPoint)\n    );\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(\n            syncTreeQueryForListening_(newQuery),\n            syncTreeTagForQuery_(syncTree, newQuery),\n            listener.hashFn,\n            listener.onComplete\n          );\n        }\n      } else {\n        // There's nothing below us, so nothing we need to start listening on\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag: number | null = null;\n        syncTree.listenProvider_.stopListening(\n          syncTreeQueryForListening_(query),\n          defaultTag\n        );\n      } else {\n        removed.forEach((queryToRemove: QueryContext) => {\n          const tagToRemove = syncTree.queryToTagMap.get(\n            syncTreeMakeQueryKey_(queryToRemove)\n          );\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(queryToRemove),\n            tagToRemove\n          );\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery_(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery_(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will try to\n * establish a connection and request the value for `query`. If\n * the client is not able to retrieve the query result, it reports\n * an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(repo: Repo, query: QueryContext): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload as string).withIndex(\n        query._queryParams.getIndex()\n      );\n      const events = syncTreeApplyServerOverwrite(\n        repo.serverSyncTree_,\n        query._path,\n        node\n      );\n      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n      return Promise.resolve(node);\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathChild,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with `on()`.\n *\n * Detach a callback previously attached with `on()`. Note that if `on()` was\n * called multiple times with the same eventType and callback, the callback\n * will be called multiple times for each event, and `off()` must be called\n * multiple times to remove the callback. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  return _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}